{"docstore/metadata":{"./data/101.pdf":{"docHash":"64txAS2247EnvNsQKKYEqRL+9IBQkf0iFgg/x865V7A="},"59683466-2a6c-4c5a-8c45-cfe29bed951e":{"docHash":"zZNe+TD11RbXcrm+Ol+OclX/x21N3P2u/xGiYQ3bAz4=","refDocId":"./data/101.pdf"},"ba74d382-8a0a-45e1-8027-cb1fb1a0d160":{"docHash":"0/HkdHzBPSHoEcz6gC2gJ94aF1rm/xI/vxXiDUnZbuE=","refDocId":"./data/101.pdf"},"2c9ae0e1-8ee9-4b80-a7bd-1a1365a64a60":{"docHash":"6uTrlk+YsKAuNtR8/TODJ4lCHyHbXo6NF7Ww3VOp9rM=","refDocId":"./data/101.pdf"},"29c5e192-6771-46d5-9214-61880df08477":{"docHash":"w0lO6pq7agHSAGKFjHD/TZIxEKAhmUnay82bedsc4wA=","refDocId":"./data/101.pdf"},"989cde1e-0da5-492c-964e-e473f06365d7":{"docHash":"8l2evn7SlR4JKhpsT0hgcVzYX1DTUXrpWwwcORb97VY=","refDocId":"./data/101.pdf"},"6161da72-ad88-4daa-b432-e416d1a8e2a7":{"docHash":"u3d81fQ/iziD3l4R3ZCLnaVuyasSc5NtbEQYjg0Zk+g=","refDocId":"./data/101.pdf"},"93fd9e59-0d5e-40df-b1de-1c5e27322589":{"docHash":"0ndjjpqfRuNc3SsCP9BjOOXj1hv5lh3Ix+CuYKX8MNA=","refDocId":"./data/101.pdf"},"55b3c169-54d5-4aaa-8599-35a4d0a45458":{"docHash":"jFYJ6+Dy2ck6/7ZMubufiqs43w4OnWlfZOvtGY6modA=","refDocId":"./data/101.pdf"},"./data/_Resume Zach Dive.pdf":{"docHash":"bOeZjmS0dw4v0s1XYqsuxPYNrItlIk6xAhJD5gJNKfc="},"9fd8cf77-375d-48f9-9d6c-59708d5425a4":{"docHash":"LYb5ZhhrviV9feezvNG0gCAr6HSUnnDbUN+qrUHnpcE=","refDocId":"./data/_Resume Zach Dive.pdf"},"0ddc4676-8f5c-4905-8ae4-f0412ec079b4":{"docHash":"DZUHVK98VhSjX/CICtKRjjlzTrvB/CBPdh0lNr5YPpw=","refDocId":"./data/_Resume Zach Dive.pdf"},"./data/OpenSCAD CheatSheet.pdf":{"docHash":"iq6VL6Hr6wFccot569giwUCwfqOblvBbUBjeiwEsSiM="},"./data/OpenSCAD_User_Manual.pdf":{"docHash":"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo="},"./data/The_OpenSCAD_Language.pdf":{"docHash":"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg="},"f85d52b3-8801-4c8d-a509-1f08238727ea":{"docHash":"2E1+Vy4WwIqy6Q/VxGdiwXt2aLLsMgKOuL/7+y8+KlY=","refDocId":"./data/OpenSCAD CheatSheet.pdf"},"17c31771-bb9a-4c95-aed9-4419855fbe1e":{"docHash":"9R6yP0378SfxkqBBzDcquJdsErUnwpt6tpeF4gVQqHA=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"6663bd34-6ae2-4146-b906-f73fadfc9887":{"docHash":"SG4/aZu5u7rD06b1at3DyjWw0zh6sdW958EYQJJXsIg=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"5abd24ba-bfac-44bc-9caf-4f54d980d1e9":{"docHash":"oTPMFxS+w4Pg6NGlrK+AFTiTk8B+neg52TkKrvbc7Bk=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"38064d01-3554-4b18-ad06-a4b52d388685":{"docHash":"Mg7gKA91EP8qAa35P86pcxbEFRB2DNQLRf/2E3BHHOs=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"103d6c65-5677-4afb-ad46-05feca36e6a5":{"docHash":"hvPbCugnJ1JAH98bZVyDn14lLBfZRRR7WSD5ToVJSLo=","refDocId":"./data/OpenSCAD CheatSheet.pdf"},"1eca59ef-18ec-4640-a441-24f9c0411829":{"docHash":"9MUaUdA1JvHT5RQlF+jiHcaBEOZSbY/YEyJ7D+o99uU=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"c0f5aac2-7ce8-4bc3-97fd-9c3ab866e4d2":{"docHash":"m/iIYZrjqVGHPs5wlP8ZP6LYrIYRddjJInhurLpnziM=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"52ce2ac8-b143-4c20-bdbc-2bfec2ba18c6":{"docHash":"y8693m7QWYZjiKjJtFuKcNfPh/5KMPEzsUoZHB6QCBE=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"8ea1a15e-49ff-4b39-b90c-3ea3a16e239a":{"docHash":"i36iI8Dco2SCfrn1AYtowSWRnXelaJHDkQel5b+Eprc=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"9f3f6f11-cdda-482b-b087-420e0c94c026":{"docHash":"/GpNOM7sV+2msuL+AMeWZ6k8o1f9AClhuxi63pwPkGQ=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"bc444b8a-c271-4e26-85ca-b6672447cf87":{"docHash":"QHSMRk12KJ2Hsoeh9BTfrJrIpb/1TDjmYq+8lcOTeGc=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"89d07e0a-5112-4485-b225-93874b8e3dcf":{"docHash":"baaIsq57Zv4q0EADqOV+WULxxfcd+b2zi4FA9YjCnDM=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"d9940351-d285-4e99-ad0a-a950f42004e4":{"docHash":"xz1IokNsWwByncYmCA6oFttML48E7vAP4/U/g2ks4bk=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"55d662d5-faac-4eae-90e1-404982f0636b":{"docHash":"/AMqPmRNNb2CfPkMcqif3WQZc360e34RwHcmRi0hJSk=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"f3903400-d470-47b2-afbf-3d0b146f0cba":{"docHash":"t1O2qX+Q6C/DbDzrTdqlGtkUBYBw0s0Xf9fymgREW1U=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"9a95cfa2-2a96-4372-bb7d-adfa683e8178":{"docHash":"lIp7CJYuKAWAPDN4uKrUBnAiuCDMo9pYwG0Az1b/LUA=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"ba850f09-7b04-491e-bb4a-2b62173f40f8":{"docHash":"r2xLAp5vIOXPtkfMxjthvHPYEEytCFQhv8Eddap0DpI=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"668b71d6-30be-4f9e-9ba7-8446d36ab896":{"docHash":"3JezCG9Bjk6nsOYlUL27RP7qPA71rf2Cm5uPIVwQCi0=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"a657f7b9-75d5-4a73-aca2-8666848dc248":{"docHash":"k58Ce0o55e6REiKfkl+OICZEqTl5UqLvh5Fxrz5+TPc=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"868ee473-c4c8-43b7-b78f-f05e0c7d18a9":{"docHash":"CHRLCoxWfoTgRMPn7S3PEMXASa0wyAU9QqEZePQrbYQ=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"8c1bb3e6-42c6-4204-a6d4-4b2c544940ef":{"docHash":"miY83ApRS5cwhspg11KM2waIAx4pxv/GC+jecqkE2M0=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"057806a7-d3f0-4f28-96e4-170c1e843d9e":{"docHash":"Eut7p5EfiolZcyPsyXhwGgsYwoPdkHdH1keaWhjmB7g=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"2d2bbf15-621b-4ced-b7db-affec964805e":{"docHash":"q4nGkIpysxvCSDjpQbZEMDnY+hhWeWCvnBlBlJkqMok=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"559a2d33-0593-4621-bab8-9be5c7b4430b":{"docHash":"aCtP1TZCCNJDDygF83gKpqhC+tA5qb2PZBhyYkrTAoc=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"ffed19da-edca-4848-8ed5-c9709e97d141":{"docHash":"byNdBlFYuXFYOaJTjm8v6+OsydzRBC3g/nr24VXTclY=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"7391a281-eb31-4fc7-ad19-8e26035f5c21":{"docHash":"VkIlfkwdstiMOa0pNqA5E0pC6A7dBAP3ooFec80bXTw=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"5685a9d7-bff4-4f14-b6b1-3a189685504d":{"docHash":"ttcqv4cOE9LoNv+2DJ/d0wQ/AOUrUUo440nQTh0NtO8=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"d0623ae5-7f04-4d35-8e28-0ca7becf1a19":{"docHash":"ivaQ4+XUHfTcJpkmmBXqbjvzkCmIgFIUYwRQR90bjTg=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"d3341176-2cc5-464b-b842-26dc04dcba50":{"docHash":"Ai7yuGslH62YO9G2YfuFJ9HDychiB/+qq8XgEudPJkM=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"b96da8f0-0cc1-4acd-86fe-2fa1964a9c2a":{"docHash":"J6EnRvVbz7Dum9o8vvQBK7iqiC2Ry6cfZmyMucotOqQ=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"84c31354-45a3-4ab6-8a0a-0e028ae547c7":{"docHash":"rypGY0sOUht1yDN38b9opHbOn0jP493zHDCsmC2LuZk=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"2b2ec95b-6b3d-4d1d-9fea-badbdcdecaa5":{"docHash":"8l0NHu4fTXN4uPN30mnvzpRL5dSyzlhDDJXPcCBaDC4=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"58c21190-526b-4428-97d4-c6271cf97a96":{"docHash":"HsTeYpOB3KNDqlDR6FTMcL6KsBG+XduVBYQEnXQYVwo=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"003f9202-4a78-4ca0-b666-5c5bd725d507":{"docHash":"gHp1uo/ED/oC6cdJt5J7XfNT4UlLJiNNty33wPG+SsQ=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"a071a378-591e-4136-9ded-42aed969c4ef":{"docHash":"fTRFcEGRT7hY3kdAbhK5ezQqpc99zdmvy8jxaxrTBF0=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"9db81337-f230-45ea-b603-145a55b0d137":{"docHash":"I6GNZZOHAOBDLVE/yuwikz7/UfpFvuQNpOViywcF2zo=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"047bf994-93f8-40f5-ab01-88ca1b469764":{"docHash":"M9/1IIryrkB4f4uaBv/MnRNp0dH+0F/GTNZmXWdffv0=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"901920e2-7363-471e-bf2d-95aa93270e75":{"docHash":"xOMz1i8eS/vtTpwVXO6KMEU5h0HdKatIQ4x5Vb9G6bc=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"8424c1cd-cdb8-4b71-863e-4cb31241897c":{"docHash":"rRlYAgO7bAy7VwWyVMCU+qlQoG1id/HS2FDeon1VT2M=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"0ddc8ccb-c883-4aa2-8050-fff221a3a5ea":{"docHash":"f0YIT/Ud9+5w+BAiZPlQ2302BT5pddqEiY4rCx4tARc=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"4eaee97a-e302-4f0c-9224-07c7949fe129":{"docHash":"JVtdF8ise2wM0gvVU3L6OQelhHGoZLTYDsnyt9RblkM=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"b87db35d-b938-4432-a5ac-71a0b46627c7":{"docHash":"R69S2O4iSU7t0Dak0dJ4VNZs6kz+6ydNgE/W1wrqu+U=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"453f6722-6f6a-41ba-9e02-f8a6313b2562":{"docHash":"ttcqv4cOE9LoNv+2DJ/d0wQ/AOUrUUo440nQTh0NtO8=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"dcea0ced-5760-47ad-9e2a-548689dbfef9":{"docHash":"VkIlfkwdstiMOa0pNqA5E0pC6A7dBAP3ooFec80bXTw=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"1bbbc8de-9f65-469b-894c-3606e2474cf2":{"docHash":"q4nGkIpysxvCSDjpQbZEMDnY+hhWeWCvnBlBlJkqMok=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"4f857178-85e7-403a-97d7-a73b93d3e156":{"docHash":"aCtP1TZCCNJDDygF83gKpqhC+tA5qb2PZBhyYkrTAoc=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"4f81d409-cd04-47a5-93fe-2e955c43a9b1":{"docHash":"TZYJZ4V4UfciVBsnxyOa9FHWWPc9AcDzfvUey1GONaw=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"ec481e4f-3d93-4d23-aa91-1178bdabf825":{"docHash":"byNdBlFYuXFYOaJTjm8v6+OsydzRBC3g/nr24VXTclY=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"adbd612f-3f9c-43c9-8dd0-a1293694463b":{"docHash":"0UE3S2iJJzAd0eiTRHBzx9esZ2uz1WGTu9/8ykc8DK8=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"9eee2fa8-e601-4645-ac1a-97cba8f4d479":{"docHash":"mh3aODJmS7q8jcbZ8o32xNW4pZ5SYZc2FQTidiik3vQ=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"1a0c91c7-4ad0-49cf-9a7f-c93aa3598959":{"docHash":"ivaQ4+XUHfTcJpkmmBXqbjvzkCmIgFIUYwRQR90bjTg=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"4d49d26a-03c0-430d-b56b-824e1ee302f0":{"docHash":"nibCJ0IhwEsbVCMKOGZAxZX9XQcirQUemhLtfIpqLgs=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"3b11dcd4-8ecb-4f1d-a4ec-66a00bcda284":{"docHash":"9WDaMqfUqmukowD8syiFkT71k2Hja4P7+FYvwzj6JgA=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"4de34dfd-4e02-475b-855d-b29b205b153a":{"docHash":"3zX7Omn8/1hJ+oMIKKYAApXBvR3rfsmtoWvI67sye+k=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"c7bd2269-5585-4a24-b7a9-3d3afcfa5e41":{"docHash":"75wYMFlGY3lY4FLkmGN7+Z9ajDB3Sa2lZjN5tYAWcW4=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"826f583d-b27c-446a-84d5-9cda36f0994b":{"docHash":"Af4x4eHvj+FJp6F7mBEsdInScuQfZrizzDvpWWl13u4=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"5a41cd06-ea52-4689-957d-8fc61b886f8b":{"docHash":"uEP/i+yFb7rScX30ywNkWXSnSphJxABJ+hPF+UQV9AE=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"93bb886a-96b8-43ae-bd40-8a20fb52ba41":{"docHash":"Hzm9G35jZw4yjv7Tfhl/HhPLLzqOqzhZLGYQSunvKIw=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"1880b1e5-a468-481b-b94d-40568f53e273":{"docHash":"HiGJT3xwg93hQC50ivMwWrd8X7KY+TtQs4f5Cg1+cwY=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"5f23515b-bfe4-4519-8ce5-401ad26335bd":{"docHash":"p+BFkkPljy5jseNQRD4QnNuRfiUTt5J5zhS06OWbaF4=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"7491d9d6-81c1-49df-9d61-84e244bb956c":{"docHash":"tuXoJsw3r6QMXlJZIEl0qhc8ka5ww3Td7c2/5e4lHs8=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"6f140ea4-7b65-44c9-a992-e36505aa6292":{"docHash":"irEK/C/VSB7LU7FbnnQ5hDGCpZy8U3Ps5Spq4ufdC1I=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"4f28aec4-e6cc-42ed-86a0-a94ebc372899":{"docHash":"2RY8Il1K8r2wzGlveWZI/LHozUWmP7FnOSdHzFXv5lc=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"834e2a70-6460-4e29-86f7-d3cf32652c49":{"docHash":"Rkm/qO77xum2+m/KMPz6mZ2YHIGvk0eNkQdZacZH6OQ=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"40f6d154-be08-4eaf-819c-addc6c9ada6a":{"docHash":"tBJCsiR/9/YysuCBvAU0z3//DHFA4cxk7FHTc/fbUFw=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"7956c7b6-cd7e-4780-82d1-b9c0bbb1b26e":{"docHash":"OK27eV2x/Bk/hRmARVsV+dz4y41QxsupFRM200Yv/qc=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"11ddb4d3-2a31-4f18-9390-82fb117347ed":{"docHash":"r5wCtIf82ck0dmUmubFQ7lnqNhnREGFHzkaVQ5h/Lw0=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"ad35d9ea-9ec3-4f23-832c-28eef7b5e701":{"docHash":"kWqTBebnTYDgQOGxF8rswMCpPMQz9bFlFzbBGEUmJk0=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"bb893d8c-39f3-45d8-b8cb-2da9bba66677":{"docHash":"IRIfM2vOd394qTaljeHBGP5YSGleuaVYAteacm+lBvg=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"d932c917-a58e-427a-a77c-f0f1de6de167":{"docHash":"2G/XtSy/36T5EteC6yRDOt3OByJQOInGixCIe3/kjYc=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"f379d5de-a624-43a8-9f83-4813fd258eaf":{"docHash":"pc7yVFMMvofpsnrkmHhuEE/qL2TAxPIlfG5ch1ZvHTM=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"4a7dcfbd-e215-478f-9db8-3cfcdd35eeb6":{"docHash":"7rj4ss94rfOdXMsnD3CQI5qCpc68NkflfxYbGfF9pMM=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"db0c0d8b-b389-47e4-8c66-688b3ec3fd6d":{"docHash":"4VdNGFRHp8KX0U8B8/V4S+TMxs12lAEK92UFSZhWvB8=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"e36dc175-8a80-4042-9f17-77b93760e281":{"docHash":"j2f+KszhwG/HofzygTC6AIpjIUtfVryDd74FXcmiGm4=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"fbd9ecab-9363-4997-acfb-69cda1f50ab8":{"docHash":"28w7k2P2h8nAFJYhDU+k0kCtadcn5tyAxUJqcvGSErk=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"377ce9cc-f450-4da2-8ccc-428096fcfbfd":{"docHash":"WQpEIpZzqPGXpdL4ZLZuKyxeEb4tRl0SEmr/3EfbImg=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"886f6c37-5cf1-41f1-a16c-9212f2090f0d":{"docHash":"asltHgPY7dObDJ3SmcRLWf6OChLOxCtGdJmcgbGt3vQ=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"b47c1688-4c24-4d7c-8b17-d19f98eb7de2":{"docHash":"rL2/KMTgrf3P5RUfRxEkkuagP29SP2BOM0TL+hnFA5Y=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"f59ae72d-1b51-4d84-b2ef-eb894251c4fe":{"docHash":"gxwLcyD/7ToO86IguQNe9NV69q9DlOMWFIc84422vpA=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"c87cb60f-31a7-437d-aeac-35f4305ccf12":{"docHash":"THSkXe4RhfAPVive7hARG81qceWx4tETbvWlzR+7KUk=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"28e5dbb4-2667-4b95-aafc-4f760e1b41b5":{"docHash":"S/EFnNw3S2C6RK5JLZlJwmkDfQ+Xxp8YziOm06xBYpY=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"443915fb-8013-4a3a-acc9-1f515b501952":{"docHash":"9zSU+NcKrfyEPvuVD+2vO3Dlnga4N1Ot9KGzVSwaS+U=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"a3e68d1d-73bc-4fca-8354-ab591c6ddba4":{"docHash":"N3jwZsXECQ7Ee7EntmWyP01fAVEkiE7meL1kCfhZUt0=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"90f0f5f8-d0b4-4dea-94d6-80993392c477":{"docHash":"cvLnl0lxNzelUITqPaGUWQEuW82srMFqK1lkys9CTkc=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"2ce9da6b-f306-4736-b2d9-d86dae6f2fcf":{"docHash":"1FmygSXnzzU/qlql40v644FYhv2YHzek0qY/Bfm5Wl4=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"13304efc-dda5-4f34-a9cf-a081c242009d":{"docHash":"JhVN7YVkML5hLGPgmZncQw73BqUqS6iYHZyMh2Q7S2w=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"f3495615-de7d-422b-8fb0-74624a646604":{"docHash":"ujN7icX3BuUbgftvz0djZxS2IOMWUuLDtVMTV+SK49Y=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"659f5eb3-6700-4215-a23f-cbd70b976c68":{"docHash":"n5qrjgjoVHMgL/mqZ2nfiRvXWXMABPLGQERBcOQr6Lw=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"c21da9c3-d07a-4cba-9b15-793c032736dd":{"docHash":"zdDhSNsTPM+eClzPLGvPjtQ/9Iazgz0oX81i8s7vFg0=","refDocId":"./data/OpenSCAD_User_Manual.pdf"},"50d3255b-feee-40bd-9690-5a1f9f2be81a":{"docHash":"zXtRnJylM26r2EZXs+wBf5qn10WhlsE3pwJsfv/T87E=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"cb976b16-db1b-4f80-96e8-1b40d0522601":{"docHash":"d47q49Bpm1jcFRpO5NcwXJx5Yf9JXwmE/YlPnKEMI1M=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"e91e51a5-d6df-432a-af55-d56f6dcd5e0a":{"docHash":"dhsp6s+PclLo6jNiPfieJGmuttbC2QB+3UCm6cbPGMs=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"7005455c-a881-43d8-b371-91beab05d692":{"docHash":"a8OE9h7IXeM9oCscXe7XBmstVfDyda28dI38DDzxp/8=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"c9d54c4d-8e9e-446a-88e5-65c88c8f1c4b":{"docHash":"Wt70RAXIDypjpafI6tap/hEPwyfhVD6PirQFw3byO4E=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"6118d7b9-2667-467f-8c43-7740024d1af2":{"docHash":"JOFGxl1xiIOTttNT+zhXCo803Q9H8ryqWJ+85aIvKVA=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"193b28c2-c988-422a-9049-8ddf2861bf0f":{"docHash":"i25QRqYe3YDwdwAysblnJcbZxhTGJ8sWcEiPpH9iCGM=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"a7a678ad-3af0-4940-a8f3-ccdb65238857":{"docHash":"kXEA7/o6jX0uEms/6R3owCH8VbhnOmgjKc4tX/YG4Xs=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"7aa5c3ee-7602-478f-b672-8d60145191ec":{"docHash":"RwjHyR6/s81B1ua6sxS7ab06im9KU1I8WHzyDnJyObU=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"4c3a92e6-c470-476e-9e1f-41990067f0fa":{"docHash":"7Bgd+1dgsQLGr7VqQhv7CVQOSS9+lm3NlUO5Gn93KXI=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"2c6c7234-4ebe-4521-bba3-0b7a3ac9456c":{"docHash":"lu3s8LlHafJnepS+ukmhsi492cBKvJsVXXiUrNXhVaM=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"7ca2e74f-3950-4b07-aecb-a81d70794c8e":{"docHash":"sGYjzgmPoYs/w2EXNAEIXGUG1Mwkkt1rM2WRmMiXlkM=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"fa7a258b-3fb2-4a50-ab34-f516f1b30487":{"docHash":"YqyQ8dIts296us8EC6hTpqER/1vQ3psl/rWUlTuWqW0=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"ee5b54c9-1804-4baa-8fe6-99cea7cfc821":{"docHash":"rKmVQQdtFlMgZsRVtjjyjmMcaTDB3RkwpqvqdGu6qno=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"389b6b69-1134-4a88-bf42-4659f56df784":{"docHash":"YSrLUb/IljcCRNRbv1K2c/2q3iIzMSGqmmHLetOGDEo=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"cdec7d4d-fc47-40c1-a847-71fad1b2350f":{"docHash":"7aCH4kxq/ztSadA0+IU/BOKuKh1Eg4mHqxpYUL7V9pc=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"8340468e-231d-4a6c-b971-9864c464343e":{"docHash":"N3Yi1rPPFySfI/EN3DR1jcvbRB+/hahCcXkiLnVolus=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"23a5b34d-ca0f-4e49-bc61-a3aa295a2be2":{"docHash":"GzLHnyy13Q0eny3SPJwxjn1ODzVfLYtvohd46X5CQ6E=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"4025f175-02e8-4b6b-84a0-70e44e650eac":{"docHash":"Lsu22M19EMwtlIiEJ5/T1uZYJhl3JdUUlq/LTXBTBf8=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"0b6f79b2-3517-4214-850d-da0e2f5f68ff":{"docHash":"PBC/f8nS1QtbOmRMjNTFkuhdxDbcS8ORVgz8Uyt/3ho=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"7a3d3a05-99e8-462c-a189-8889be324817":{"docHash":"Wgch/tJ5CRJk07SmonrXWsT7MJ8ZMMKeEwJufcc0FE0=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"00302a0a-d90f-4dc3-ad83-d4918852a042":{"docHash":"on1NeB+c5u+BzG+vdesyQVaS3Wn19Wmk1gjhn0J2B+c=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"7906a468-eb11-495d-9559-dbcc503a1003":{"docHash":"2qIXL8738BYeX0QHAXVwoE/Vkuct6jPc5j2CsKEn+Y4=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"df9d2c1e-8266-4ab3-9445-d6f753ff9e83":{"docHash":"6pwGMOLHy+nANoTU+80yzrZTtr8Rn5HKSQ4nZ0e9RVw=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"43564100-b022-4aff-84f1-d5dee391544e":{"docHash":"XZWMtZZRdVTptmN8vRCeTF0fQ/kDz7U+z5A0hSUcPUw=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"d17b6989-bc06-4246-8a03-649dfae82608":{"docHash":"nYtJYivPOtH0nmhVicN/9mc5ydSu+YtpZ1is6ysDqjY=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"f795328b-3c9a-4521-8495-3bde42381ea8":{"docHash":"2rA4QuJyYXjaul+1zz+toucJt1ps6lqnFNwqAUc7ZgE=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"315883cb-167b-4104-82bf-fb177462a9e2":{"docHash":"e8D8f6IYTJvbvSK0jVt7pMCgsp5IH687D2pX45k6vT8=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"07954e2a-8064-4622-bcfe-ab1a5fed4fd9":{"docHash":"TfBFWKB3rPCXK1Qzgzu1aXAo/4uLkls/LR4FpohENpk=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"e2e789c3-f600-4c47-a433-6de9c639df5d":{"docHash":"HfN97ZFXCxkJVLl/FE8lEJN5AV0lSbwagiJcTFpll9U=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"17b91545-8391-4d40-b65b-5e53d1c9a6f7":{"docHash":"l50cwhAnR8m01ytahtGsfq3RTpibI0uiuGXqF+xmVDw=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"e27904a4-7206-4073-905b-b237f4fa88e6":{"docHash":"VpiBs8/7ebRRxG7vYt05uKAIoHyy+BXR+H14+s6OTIM=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"fc4bfaab-1099-457c-8806-55657e59c5c1":{"docHash":"YrqSSi7mM5CWwOSnGzcGF3d1ypElsy/NS8bIOwpuM+Q=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"95ca73f2-fbb7-4bee-a0a9-fd68dd528b71":{"docHash":"VIO9Lo5zwOBfIrygKASTWPOAhbkrRaFGgGFEqommTt8=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"f67401fa-2ca1-4d13-b0a4-4b37e75d9de7":{"docHash":"MFDIJCrXJsfZ0hCDq8FVSM6Qi259aeg1xCNVV3ZY6js=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"6ffa686c-1df3-41a0-9281-d6742a9c33d9":{"docHash":"59Saer3XS35i6uOhSafTipZdBPF2XYR49IZGBxVa5BM=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"48043eb6-c97b-44f6-b399-55e3ed47eaa1":{"docHash":"zHkKvnFMNYIdAp7XOND4TFXbjfxlpJTlT8a1++OCPgk=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"665b4f78-8032-46c1-9c00-88217e6b91d8":{"docHash":"GkESQGvePXyU6dzz/ph8b96MqfCjuDatHu2HEq6WkHU=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"a8d7eb56-0948-41ac-9da4-e586395555e9":{"docHash":"GahpgSx0wzfypCkSJibQYA0+f3MEjyqhNtXPjsvbj9w=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"27108161-672f-4bed-8838-617a0c714f5b":{"docHash":"EB+wHt7E1DJ7FKFY9oiJyqcDjHU84SZ1n9qewLA41OY=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"e9eefcc8-08fa-4c6e-960e-2dc6bfb9fb1f":{"docHash":"1laCth05byV3HDUVQZMHe9OIUbc8qMyxyiIbeiBuMhM=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"771fd4aa-f943-449a-8da7-84ed84ab5682":{"docHash":"6sdjjkWSb8XYkcv8prdz7yW+Wvg5X8AC5QEcVocBEm4=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"d2851b3b-54c9-42e3-9438-9a9853d05113":{"docHash":"sTP9WtgpADLWCSqqYOv7f8zYDj7/wEwINp2MTP3kEmM=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"0042a987-9d97-4661-aadc-f078f9b5e13a":{"docHash":"bIp3J4cBIEniF+vwWjcVQncdhZl1+qefdCJuew2ALW4=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"228352a2-1099-4278-aad5-c6dfdfea4283":{"docHash":"tAsJrpN0a3u3ZFfu5e0aoNY7mvwgwDEHoGeVexsJcNs=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"c325ff09-9f01-439b-b6ab-36061a5abf6e":{"docHash":"m3v/6H87nPqytTRG7i/9QN8Fwmj0LpRU/zflOPU2DMM=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"7ee34a0f-da80-4a8e-b7ed-7d622d54a8d2":{"docHash":"jk0GmYO9L9YyZ0Yt7FfuBDRj4CWaaBe3c4E2jAfaNbw=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"91e35cb7-7b3b-4d2b-bfb2-a1000397c0db":{"docHash":"uHufJUJSlLJMXpCGHIqEO4NY45L+EEJfhIId2ecMiiQ=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"014095b2-6a6e-40f3-9cdd-4b2ca2faaf36":{"docHash":"e2jcbMznx8FjFMHAvjj0Lg0EFtNy4krfRoq1dHWrLtY=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"cf6b0052-4983-4fb3-80a1-5def28d2a66e":{"docHash":"uZyxBMUiDSoawjjvsbQIJHHlYi3P6SRB70IKs7nd3p0=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"74daf637-d00d-4c33-a5f1-67d8e883dfff":{"docHash":"FpvQoKZ+jHSktVLEqEvUVtoaS2LxZyh+VIrSF7KwSkM=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"e49c1e0c-c0e2-4c3d-989a-90ee384ad962":{"docHash":"enSumXBwX9JvcwoqmNJRlRw9IEPT7otslKjMCHduLWM=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"3a9bd32b-a228-4e28-b02c-758510262c13":{"docHash":"4NJc67LMouKR6T0v80xeIM9pjyLMzSAmeO27CIp8F6E=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"f7f3507d-4eb6-44e0-901a-2ee46c90516b":{"docHash":"yYYA9wE0MhyWl211Gn9O/aI2UcO+gCwUFZI47Flws/Q=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"3714a845-3da3-43a5-bc98-cab5079dd681":{"docHash":"l8NVOR12jzh/0z4vMOXz09oIqTcHdDjB81pJa/eQnew=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"4b7bd1db-9fb9-4c44-9672-1d79321c4524":{"docHash":"kocIg44qGdZwXI9CAffKNNt0iTh6A58cqw2RRAgRzbM=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"1d775cb0-d859-4649-9968-a4a791b378f8":{"docHash":"zRtoeTCUZUhHz+MdY1lHmKn7d6687CHjAhVM/mq4sPU=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"b1d05a2a-e0fb-4721-ba84-89ad4a6531ea":{"docHash":"Sd6mQynEsza22y0YYhHAUNmKrcNqa/zzJLFj5sVYckQ=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"6daa334d-91c2-4561-8278-64fa8b9cbe5d":{"docHash":"9GLLz1VelcFN+UGGcRUtIKd+qQSh+TGtBrY7U7R0Yk0=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"6dbf8253-a603-435e-b62a-a7181c5cca76":{"docHash":"TNPWgF4J2rnQsfsdXlWiVXmYh99Z8BVgjLCDY6yq/rs=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"db841ea4-c7c6-458c-a337-8b418fdb3787":{"docHash":"Lx7Z+4jhuVbl0VWell779sZSewrHzlL7cY+VjqlBk2M=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"d70376dd-7697-4515-9fc2-fef3c636562f":{"docHash":"WtS7krIAvlfBFFqzi7FwZpXtdSkxhp+b/BcLmChAuVs=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"4164d166-97d2-4575-8944-6e8eb6cbfb58":{"docHash":"BzVQl1mhCfqIGSLf3/q3dQc1k8Vm9hGkSdRaBPJukcM=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"91c293ae-1718-4295-b167-f0563b48e98b":{"docHash":"g/YEaBpk9TaU7w9FGPLfrEIOCg/W+JP5rQjoRYHi9/0=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"4d2fe101-9efe-49e4-9353-f1046d96af06":{"docHash":"Iad96n2tFDAG6HTUaBnUM65uu4WEo7SgnzIaLGJxLmg=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"6fa7c19c-025f-4a41-bd7c-2f4d506b3df4":{"docHash":"SnR3y7tgFd4ACvwyLXI11PRSs9gofYYRHH+FbUCppx0=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"e5141ef4-5676-4fe5-a069-4cdda5272cc1":{"docHash":"36stVRBql/RLZtga3weq0SXv//f0XSfOb+tkUxx+qPs=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"33066aad-2b20-44d1-ac61-7e5490b0438b":{"docHash":"gb16W4xgeTrcBi/fDxVRr8GUJ5dC+F75cXH//WI8lu8=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"bd92ce54-85c4-451a-be78-3a4a0a1ec64a":{"docHash":"Yw6pfWA1DY3f6WmuhmwUA1OquOUgR6t+uKiadWHMMGY=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"c037dfa6-e17c-42c0-b7df-53eb7d4430e5":{"docHash":"G0rHXBqNSlTu+HGBGmhnFWqfFga2ejk1lL9HjiQ/cq4=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"2c79d51d-87d8-40d2-b4d9-438de2b747ce":{"docHash":"eKiFy6LBT74iE1BIwKYMB3jiZNOpBiiXtn/YWXed6GE=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"66dee7bf-bf7b-4812-b1aa-f9421e6ec189":{"docHash":"6scaYEIutLuO1OijXl9j2N8a00RWQx5caW9LhkDAL+E=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"bab93170-0ba8-448c-ba5b-558b18d4674b":{"docHash":"up7lclLUcqB/KR+qkWpiUucXYZMowI2HEQ6VWU5H034=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"fa06c28c-dbf9-4db6-afe3-997142c8b485":{"docHash":"WLKYFr2ef/l3/NNl/skb5TIGlTwILJMq/jE/LtyAmvg=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"f0875a7d-83ec-4983-9fc7-6e471422025a":{"docHash":"NyYAfp6/WHFuamhou+V9jQDc3SKw1dQav7/+/v8Cx6Y=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"1fb06054-4a07-4803-ac36-77399fed9e63":{"docHash":"rKBfFUbNs5R8dI9UCe0uTD7v/HfBSWWpm1Vca06Eakk=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"b2c0dcf2-0c35-473a-bda8-3572ca6e2c41":{"docHash":"M4B5gdam+hsgBa0EURZ6dnnyTm6i24FnVr6U/w8kdqA=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"b136db52-618b-46fc-88d1-3c37fa0012ab":{"docHash":"Y6iIe2qIoRZeZzOMDoVj+/5CGTCBq0MTZmL4dn1Dt2M=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"80f53e68-230e-4784-bace-ce90e9a650b6":{"docHash":"twlbvAvkNz2ZhMyF8KetlT8To9C++kYiNMSxABOxgqM=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"d30c3108-7ec7-4941-9712-0160a008ab0f":{"docHash":"fwJptfo8FtNN6y476zvOHu5L7aauUhxAzxXLj4rx4NE=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"030b9748-8b22-46fd-99c2-dd510b654b37":{"docHash":"xxHndvppwH+YeBJcyJ9t7qQ+qkK6gWmd37SFDFMueTw=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"602a72df-b432-463e-8c54-4ad412a60980":{"docHash":"cAeH1iT8r37LdzG61u1/5ojGwnwrxNCYagnnHkPv1f0=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"ec1304bc-9ea7-4660-9b43-92c15e349d73":{"docHash":"6UKUBWoE6MjNIodL9+q7pPOKHK1uJLtRkuB/uYHpo5s=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"141dab11-261c-4048-a5a4-cf702c18d143":{"docHash":"PqTdtG4Xv7WS12o3tye0dImJ+4x+3+9udbonE1cZREw=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"3d15798a-c543-44a3-943d-ac77520e94c3":{"docHash":"yJpaUa3SHVBTCvftcU/JyE51VmcC7KHhlQE6NoIbde8=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"29847c89-5f02-4072-a3a2-6e3e4fe67b52":{"docHash":"zBrQy2C78jcysyp9X+MRJzqZfgaoVokIRA/BNr7C9Dk=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"1aeb1b32-ef27-4486-921d-9257a0b7bb9b":{"docHash":"mS04ODdC4IH3jwKFxAbDyISshiFqhND1u953+151JuU=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"b20c490e-300a-4a8e-b3e1-66500c219349":{"docHash":"+kZEP3iNoVn+7Eo1YDwL2xXJqCE5n87RVMQS1RhJAJc=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"39aacd13-b81c-48f1-afc1-7a224ed171d8":{"docHash":"7uICXjVDpOJS81rDftRSKo2/ms9sWXj8nXvBU4h4jqU=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"730f5ed3-e9e2-4600-b2ac-41943876494b":{"docHash":"yFZFs82wrwfA7Fvgcic54+WttHdvs630vfnlVJrvU6w=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"d3fccd4b-6f56-49f0-b87c-d04920bfc069":{"docHash":"8kXfSBudYRo8+8nOK1f9uhjpBz29+HlUCo4PYK7Z5oQ=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"281c1368-e034-4387-b503-cc1f8272d9fa":{"docHash":"dXrP/enlS0BQH4l3HQCOjPHTW6ehsS6YxwgPQOajLsc=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"56aacd46-4174-4ab4-aeb3-5fb891c174ed":{"docHash":"ad/+kt+wuEBRieZ8shXLEWGJC1aedbheDwFAZ3mawyw=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"862228a2-3692-494a-a2fd-72e71e8f5455":{"docHash":"AfCujYgozV5qCVqklAXl4WcjvhdiPaJ5Xc52AdYt2cc=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"9aaf39bf-24d0-4cff-885f-a5847c61e77f":{"docHash":"DZTIv5UrgyDvQ5HS9FDmPtkL2zMt7CG+Q83B4fif7RM=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"2fe42f7b-6af2-49ae-9506-74aa15996bdc":{"docHash":"KKYE9udh1b8lSumOlpA09r6PHXRVSnaF8WPBGNixYDA=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"3729abe4-49fd-4dca-a497-b0109118fd23":{"docHash":"sOFyEatrkBASAQ/vKf819Y4Q2Y6xlgrRlUXA0s/NMvk=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"1195edd1-6f4c-4cf9-bf92-03b84af32b09":{"docHash":"RsKm2hwS77ODwpJGSLH4vhi1jNHH8h7L65EG8kEGbLw=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"08bf8f76-de8f-427b-b88d-dc23f1f9c205":{"docHash":"OJJ4WEjQkEa72+4omwTjTjkw0/R08q/Q6NwucQGYsto=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"ca621dad-b5d5-439d-8de4-1d027acd16c9":{"docHash":"LjYPZeGVjb9EnT4wtQa5TcFWfujT5PQYH+dqF7WbDCo=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"1365eb78-f5e3-45f9-9b10-490f03d2beca":{"docHash":"2Wxj5Dj3HeRcG2tclmdFWr9hQciNMcDOKEP9e7bkNXs=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"5c1033aa-63cf-4141-b855-22e6531dd487":{"docHash":"cxK+hjekBxsr49Cvjk/zbHPSzGDTWoTncPjkhe9jpoY=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"4c70bfe7-2993-46e2-85e3-9acad70a4a15":{"docHash":"Y5L5i+AV5N3RYE5+5xKCtnSuwptk4Z1H511i29JEwjg=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"2b04843d-d46f-4ab8-a475-575f148cde90":{"docHash":"Xj7BsEdts9Wq5NufmFoHEXMG7nE/edH7XfEi7yu63ok=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"3322090d-24b2-4573-b04d-946c5e49d769":{"docHash":"+wa3W7kIP0+F5ukthpz8tZR6eMoTl0ok87ez1FpuQNI=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"d12d29ce-a4c6-41e6-ad48-17e0d491bb3a":{"docHash":"uARK9CmA5OGYS3yMfuQxLEA5NWBMSqADBmV7gR7suxs=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"55fd0f3a-a988-4426-8798-9fcd723cf390":{"docHash":"BqKiAfoI91gtoztqPh4a25WL8MnnHe4hWzPW2U4RjfI=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"a5ca4c72-d049-48e0-b0c7-8fdf0923137e":{"docHash":"oWOf4OxjBcr8FyEpNjxn3EYvWXnti4zC562IfoaPcI0=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"3b675a71-79b0-425f-a44e-347bba4c3938":{"docHash":"6Td7gV+CYRSYIU4zJvbyUtsCEzRoEViR1UJfu8yiUyw=","refDocId":"./data/The_OpenSCAD_Language.pdf"},"1ece8add-49e5-4669-a042-ea44754423ec":{"docHash":"W+n0V9OEIWclBTfgLjjBsqVfQ2H8RTdbvkB6166h1ko=","refDocId":"./data/The_OpenSCAD_Language.pdf"}},"docstore/data":{"59683466-2a6c-4c5a-8c45-cfe29bed951e":{"__data__":"{\"id_\":\"59683466-2a6c-4c5a-8c45-cfe29bed951e\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/101.pdf\",\"metadata\":{},\"hash\":\"64txAS2247EnvNsQKKYEqRL+9IBQkf0iFgg/x865V7A=\"},\"NEXT\":{\"nodeId\":\"29c5e192-6771-46d5-9214-61880df08477\",\"metadata\":{},\"hash\":\"w0lO6pq7agHSAGKFjHD/TZIxEKAhmUnay82bedsc4wA=\"}},\"hash\":\"zZNe+TD11RbXcrm+Ol+OclX/x21N3P2u/xGiYQ3bAz4=\",\"text\":\"Domestic Mail Manual • Updated 7-9-23 101 101.1.2 Retail Mail: Physical Standards for Letters, Cards, Flats, and Parcels 101Physical Standards 1.0Physical Standards for Letters 1.1Dimensional Standards for Letters Letter-size mail is the following: a.Not less than 5 inches long, 3-1/2 inches high, and 0.007-inch thick. For pieces more than 6 inches long or 4-1/4 inches high, the minimum thickness is 0.009. (Pieces not meeting the 0.009 thickness are subject to a nonmachinable surcharge under 1.2f.) b. Not more than 11-1/2 inches long, or more than 6-1/8 inches high, or more than 1/4-inch thick. c.Not more than 3.5 ounces. (Charge flat-size prices for First-Class Mail letter-size pieces over 3.5 ounces.) d. Rectangular, with four square corners and parallel opposite sides. Letter-size, card-type mailpieces made of cardstock may have finished corners that do not exceed a radius of 0.125 inch (1/8 inch). See Exhibit 201.1.1.1. 1.2Nonmachinable Criteria A letter-size piece is nonmachinable if it has one or more of the following characteristics (see 601.1.1.2 to determine the length, height, top, and bottom of a mailpiece): a.Has an aspect ratio (length divided by height) of less than 1.3 or more than 2.5. b. Is polybagged, polywrapped, enclosed in any plastic material, or has an exterior surface made of a material that is not paper. Windows in envelopes made of paper do not make mailpieces nonmachinable. Attachments allowable under applicable eligibility standards do not make mailpieces nonmachinable. c.Has clasps, strings, buttons, or similar closure devices. Overview 1.0  Physical Standards for Letters 2.0  Physical Standards for Flats 3.0  Physical Standards for Parcels 4.0  Additional Physical Standards for Priority Mail Express\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"29c5e192-6771-46d5-9214-61880df08477":{"__data__":"{\"id_\":\"29c5e192-6771-46d5-9214-61880df08477\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/101.pdf\",\"metadata\":{},\"hash\":\"64txAS2247EnvNsQKKYEqRL+9IBQkf0iFgg/x865V7A=\"},\"PREVIOUS\":{\"nodeId\":\"59683466-2a6c-4c5a-8c45-cfe29bed951e\",\"metadata\":{},\"hash\":\"zZNe+TD11RbXcrm+Ol+OclX/x21N3P2u/xGiYQ3bAz4=\"},\"NEXT\":{\"nodeId\":\"ba74d382-8a0a-45e1-8027-cb1fb1a0d160\",\"metadata\":{},\"hash\":\"0/HkdHzBPSHoEcz6gC2gJ94aF1rm/xI/vxXiDUnZbuE=\"}},\"hash\":\"w0lO6pq7agHSAGKFjHD/TZIxEKAhmUnay82bedsc4wA=\",\"text\":\"4.0  Additional Physical Standards for Priority Mail Express 5.0  Additional Physical Standards for Priority Mail 6.0  Additional Physical Standards for First-Class Mail and USPS Ground Advantage — Retail 7.0  Additional Physical Standards for Media Mail and Library Mail Domestic Mail Manual • Updated 7-9-23 101 101.2.1 Retail Mail: Physical Standards for Letters, Cards, Flats, and Parcels d. Contains items such as pens, pencils, keys, or coins that cause the thickness of the mailpiece to be uneven; or loose keys or coins or similar objects not affixed to the contents within the mailpiece. Loose items may cause a letter to be nonmailable when mailed in paper envelopes (see 601.3.3). e.Is too rigid (does not bend easily when subjected to a transport belt tension of 40 pounds around an 11-inch diameter turn). f.Is less than 0.009 inches thick if the mailpiece is more than 6 inches long or 4-1/4 inches high. g. Has a delivery address parallel to the shorter dimension of the mailpiece. h. Is a self-mailer that is not prepared according to 201.3.14. i.Is a booklet that is not prepared according to 201.3.16. 2.0Physical Standards for Flats 2.1General Definition of Flat-Size Mail Flat-size mail is the following: a.More than 11-1/2 inches long, or more than 6-1/8 inches high, or more than 1/4 inch thick, except as allowed for EDDM-Retail flats under 140. For general retail mailability, all pieces 1/4 inch thick or less must be a minimum of 5 inches long and 3-1/2 inches high and 0.007 inch thick. b. Not more than 15 inches long, or more than 12 inches high, or more than 3/4 inch thick. c.Flexible (see 2.3). d. Rectangular with four square corners or with finished corners that do not exceed a radius of 0.125 inch (1/8 inch). See Exhibit 201.1.1.1.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"ba74d382-8a0a-45e1-8027-cb1fb1a0d160":{"__data__":"{\"id_\":\"ba74d382-8a0a-45e1-8027-cb1fb1a0d160\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/101.pdf\",\"metadata\":{},\"hash\":\"64txAS2247EnvNsQKKYEqRL+9IBQkf0iFgg/x865V7A=\"},\"PREVIOUS\":{\"nodeId\":\"29c5e192-6771-46d5-9214-61880df08477\",\"metadata\":{},\"hash\":\"w0lO6pq7agHSAGKFjHD/TZIxEKAhmUnay82bedsc4wA=\"},\"NEXT\":{\"nodeId\":\"2c9ae0e1-8ee9-4b80-a7bd-1a1365a64a60\",\"metadata\":{},\"hash\":\"6uTrlk+YsKAuNtR8/TODJ4lCHyHbXo6NF7Ww3VOp9rM=\"}},\"hash\":\"0/HkdHzBPSHoEcz6gC2gJ94aF1rm/xI/vxXiDUnZbuE=\",\"text\":\"See Exhibit 201.1.1.1. e.Uniformly thick (see 2.4). f.Unwrapped, sleeved, wrapped, or enveloped. 2.2Length and Height of Flats The length of a flat-size mailpiece is the longest dimension. The height is the dimension perpendicular to the length. 2.3Minimum Flexibility Criteria for Flat-Size Pieces Flat-size pieces must be flexible. Boxes—with or without hinges, gaps, or breaks that allow the piece to bend—are not flats. Tight envelopes or wrappers that are filled with one or more boxes are not flats. At the customer’s option, a customer may perform the following test on his or her mailpieces. When a postal employee observes a customer demonstrating that a flat-size piece is flexible according to these standards, the employee does not need to perform the test. Test flats as defined in 201.4.3. Domestic Mail Manual • Updated 7-9-23 101 101.3.3 Retail Mail: Physical Standards for Letters, Cards, Flats, and Parcels 2.4Uniform Thickness Flat-size mailpieces must be uniformly thick so that any bumps, protrusions, or other irregularities do not cause more than 1/4-inch variance in thickness. When determining variance in thickness, exclude the outside edges of a mailpiece (1 inch from each edge) when the contents do not extend into those edges. Also, exclude the selvage of any polywrap covering (see 201.5.3) from this determination. Mailers must secure nonpaper contents to prevent shifting of more than 2 inches within the mailpiece if shifting would cause the piece to be nonuniform in thickness or would result in the contents bursting out of the mailpiece (see 601.3.3). 2.5Ineligible Flat-Size Pieces Flat-size mailpieces that do not meet the eligibility standards in 2.3 and 2.4 are considered parcels, and customers mailing these pieces must pay the applicable parcel prices. 3.0Physical Standards for Parcels 3.1Processing Categories USPS categorizes parcels into one of three mail processing categories: machinable, irregular, or nonmachinable parcel. These categories are based on\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2c9ae0e1-8ee9-4b80-a7bd-1a1365a64a60":{"__data__":"{\"id_\":\"2c9ae0e1-8ee9-4b80-a7bd-1a1365a64a60\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/101.pdf\",\"metadata\":{},\"hash\":\"64txAS2247EnvNsQKKYEqRL+9IBQkf0iFgg/x865V7A=\"},\"PREVIOUS\":{\"nodeId\":\"ba74d382-8a0a-45e1-8027-cb1fb1a0d160\",\"metadata\":{},\"hash\":\"0/HkdHzBPSHoEcz6gC2gJ94aF1rm/xI/vxXiDUnZbuE=\"},\"NEXT\":{\"nodeId\":\"989cde1e-0da5-492c-964e-e473f06365d7\",\"metadata\":{},\"hash\":\"8l2evn7SlR4JKhpsT0hgcVzYX1DTUXrpWwwcORb97VY=\"}},\"hash\":\"6uTrlk+YsKAuNtR8/TODJ4lCHyHbXo6NF7Ww3VOp9rM=\",\"text\":\"machinable, irregular, or nonmachinable parcel. These categories are based on the physical dimensions of the piece, regardless of the placement (orientation) of the delivery address on the piece. For additional information on machinable, irregular, and nonmachinable processing categories, see 201.7.0. 3.2Maximum Weight and Size [7-9-23] All parcels must be large enough to hold the required delivery address, return address, mailing labels, postage, barcode, endorsements, and other mail markings on the address side of the parcel. For mailability, all pieces 1/4 inch thick or less must be a minimum of 5 inches in length, 3-1/2 inches in height, and 0.007 inch in thickness. No mailpiece may weigh more than 70 pounds. Except for USPS Ground Advantage – Retail, which may not measure more than 130 inches in length and girth combined, no mailpiece may measure more than 108 inches in length and girth combined. For parcels, length is the distance of the longest dimension and girth is the distance around the thickest part. Lower size or weight standards apply to mail addressed to some APOs and FPOs subject to 703.2.0 and 703.4.0 and for Department of State mail, subject to 703.3.0. 3.3Two or More Packages With the exception of USPS-produced Flat Rate Envelopes and Boxes, two or more packages may be mailed as a single parcel, if they are about the same size or shape, if they are securely wrapped or fastened together, and if they do not together exceed the weight or size limits. Domestic Mail Manual • Updated 7-9-23 101 101.6.1 Retail Mail: Physical Standards for Letters, Cards, Flats, and Parcels 4.0Additional Physical Standards for Priority Mail Express Each piece of Priority Mail Express may not weigh more than 70 pounds. The combined length and girth of a piece (the length of its longest side plus the distance around its thickest part) may not exceed 108 inches. Lower size or weight standards apply to Priority Mail Express addressed to certain APO/FPO and DPOs.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"989cde1e-0da5-492c-964e-e473f06365d7":{"__data__":"{\"id_\":\"989cde1e-0da5-492c-964e-e473f06365d7\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/101.pdf\",\"metadata\":{},\"hash\":\"64txAS2247EnvNsQKKYEqRL+9IBQkf0iFgg/x865V7A=\"},\"PREVIOUS\":{\"nodeId\":\"2c9ae0e1-8ee9-4b80-a7bd-1a1365a64a60\",\"metadata\":{},\"hash\":\"6uTrlk+YsKAuNtR8/TODJ4lCHyHbXo6NF7Ww3VOp9rM=\"},\"NEXT\":{\"nodeId\":\"6161da72-ad88-4daa-b432-e416d1a8e2a7\",\"metadata\":{},\"hash\":\"u3d81fQ/iziD3l4R3ZCLnaVuyasSc5NtbEQYjg0Zk+g=\"}},\"hash\":\"8l2evn7SlR4JKhpsT0hgcVzYX1DTUXrpWwwcORb97VY=\",\"text\":\"weight standards apply to Priority Mail Express addressed to certain APO/FPO and DPOs. Priority Mail Express items must be large enough to hold the required mailing labels and indicia on a single optical plane without bending or folding. 5.0Additional Physical Standards for Priority Mail The maximum weight is 70 pounds. The combined length and girth of a piece (the length of its longest side plus the distance around its thickest part) may not exceed 108 inches. Lower size and weight standards apply for some APO/FPO and DPO mail subject to 703.2.0, and 703.4.0, and for Department of State mail subject to 703.3.0. [7-9-23] 6.0Additional Physical Standards for First-Class Mail and USPS Ground Advantage — Retail [7-9-23] 6.1Maximum Weight 6.1.1   First-Class Mail First-Class Mail (letters and flats) must not exceed 13 ounces. 6.1.2   USPS Ground Advantage — Retail USPS Ground Advantage — Retail mail must not exceed 70 pounds. 6.2Cards Claimed at Card Prices 6.2.1   Card Price A card may be a single or double (reply) stamped card or a single or double postcard. Stamped cards are available from USPS with postage imprinted on them. Postcards are commercially available or privately printed mailing cards. To be eligible for card pricing, a card and each half of a double card must meet the physical standards in 6.2 and the applicable eligibility for the price claimed. Ineligible cards are subject to letter-size pricing. 6.2.2   Postcard Dimensions Each card and part of a double card claimed at card pricing must be the following: a.Rectangular. b. Not less than 3-1/2 inches high, 5 inches long, and 0.007 inch thick. c.Not more than 4-1/4 inches high, or more than 6 inches long, or greater than 0.016 inch thick. d. Not more than 3.5 ounces (Charge flat-size prices for First-Class Mail card-type pieces over 3.5 ounces.) Domestic Mail Manual • Updated 7-9-23 101\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"6161da72-ad88-4daa-b432-e416d1a8e2a7":{"__data__":"{\"id_\":\"6161da72-ad88-4daa-b432-e416d1a8e2a7\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/101.pdf\",\"metadata\":{},\"hash\":\"64txAS2247EnvNsQKKYEqRL+9IBQkf0iFgg/x865V7A=\"},\"PREVIOUS\":{\"nodeId\":\"989cde1e-0da5-492c-964e-e473f06365d7\",\"metadata\":{},\"hash\":\"8l2evn7SlR4JKhpsT0hgcVzYX1DTUXrpWwwcORb97VY=\"},\"NEXT\":{\"nodeId\":\"93fd9e59-0d5e-40df-b1de-1c5e27322589\",\"metadata\":{},\"hash\":\"0ndjjpqfRuNc3SsCP9BjOOXj1hv5lh3Ix+CuYKX8MNA=\"}},\"hash\":\"u3d81fQ/iziD3l4R3ZCLnaVuyasSc5NtbEQYjg0Zk+g=\",\"text\":\"Domestic Mail Manual • Updated 7-9-23 101 101.6.2.9 Retail Mail: Physical Standards for Letters, Cards, Flats, and Parcels 6.2.3   Other Cards A card that does not meet the applicable standards in 6.2 must not bear the words “Postcard” or “Double Postcard.” 6.2.4   Paper or Card Stock A card must be of uniform thickness and made of unfolded and uncreased paper or cardstock of approximately the quality and weight of a stamped card (i.e., a card available from USPS). A card must be formed either of one piece of paper or cardstock or of two pieces of paper permanently and uniformly bonded together. The stock used for a card may be of any color or surface that permits the legible printing of the address, postmark, and any required markings. 6.2.5   Acceptable Attachments A card may bear an attachment that is the following: a.A paper label, such as a wafer seal or decal affixed with permanent adhesive to the back side of the card, or within the message area on the address side (see Exhibit 202.2.1), or to the left of the address block. b. A label affixed with permanent adhesive for showing the delivery or return address. c.A small reusable seal or decal prepared with pressure-sensitive and nonremovable adhesive that is intended to be removed from the first half of a double card and applied to the reply half. 6.2.6   Unacceptable Attachment A card may not bear an attachment that is the following: a.Other than paper. b. Not totally adhered to the card surface. c.An encumbrance to postal processing. 6.2.7   Tearing Guides A card may have perforations or tearing guides if they do not eliminate or interfere with any address element, postage, marking, or endorsement and do not impair the physical integrity of the card. 6.2.8   Address Side of Cards The address side of a card is the side bearing the delivery address and postage. The address side may be formatted to contain a message area. Cards that do not contain a message area on the address side are subject to the applicable standards for the price claimed.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"93fd9e59-0d5e-40df-b1de-1c5e27322589":{"__data__":"{\"id_\":\"93fd9e59-0d5e-40df-b1de-1c5e27322589\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/101.pdf\",\"metadata\":{},\"hash\":\"64txAS2247EnvNsQKKYEqRL+9IBQkf0iFgg/x865V7A=\"},\"PREVIOUS\":{\"nodeId\":\"6161da72-ad88-4daa-b432-e416d1a8e2a7\",\"metadata\":{},\"hash\":\"u3d81fQ/iziD3l4R3ZCLnaVuyasSc5NtbEQYjg0Zk+g=\"},\"NEXT\":{\"nodeId\":\"55b3c169-54d5-4aaa-8599-35a4d0a45458\",\"metadata\":{},\"hash\":\"jFYJ6+Dy2ck6/7ZMubufiqs43w4OnWlfZOvtGY6modA=\"}},\"hash\":\"0ndjjpqfRuNc3SsCP9BjOOXj1hv5lh3Ix+CuYKX8MNA=\",\"text\":\"standards for the price claimed. For the purposes of 6.2, miscellaneous graphics or printing, such as symbols, logos, or characters, that appear on the address side of cards not containing a message area are generally acceptable provided the items are not intended to convey a message. 6.2.9   Double Cards A double card (a double stamped card or double postcard) consists of two attached cards, one of which is designed to be detached by the recipient and returned by mail as a single card. Double cards are subject to these standards: Domestic Mail Manual • Updated 7-9-23 101 101.6.2.10 Retail Mail: Physical Standards for Letters, Cards, Flats, and Parcels a.The reply half of a double card must be used for reply only and may not be used to convey a message to the original addressee or to send statements of account. The reply half may be formatted for response purposes (e.g., contain blocks for completion by the addressee). b. A double card must be folded before mailing and prepared so that the address on the reply half is on the inside when the double card is originally mailed. The address side of the reply half may be prepared as Business Reply Mail, Courtesy Reply Mail, meter reply mail, or as a USPS Returns service label. c.Plain stickers, seals, or a single wire stitch (staple) may be used to fasten the open edge at the top or bottom once the card is folded if affixed so that the inner surfaces of the cards can be readily examined. Fasteners must be affixed according to the applicable preparation requirements for the price claimed. Any sealing on the left and right sides of the cards, no matter the sealing process used, is not permitted. d. The first half of a double card must be detached when the reply half is mailed for return. 6.2.10   Enclosures Enclosures in double postcards are prohibited at card prices. 6.3Nonmachinable Pieces 6.3.1   Nonmachinable Letters Letter-size pieces (except card-size pieces) that meet one or more of the nonmachinable characteristics in 1.2 are subject to the nonmachinable\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"55b3c169-54d5-4aaa-8599-35a4d0a45458":{"__data__":"{\"id_\":\"55b3c169-54d5-4aaa-8599-35a4d0a45458\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/101.pdf\",\"metadata\":{},\"hash\":\"64txAS2247EnvNsQKKYEqRL+9IBQkf0iFgg/x865V7A=\"},\"PREVIOUS\":{\"nodeId\":\"93fd9e59-0d5e-40df-b1de-1c5e27322589\",\"metadata\":{},\"hash\":\"0ndjjpqfRuNc3SsCP9BjOOXj1hv5lh3Ix+CuYKX8MNA=\"}},\"hash\":\"jFYJ6+Dy2ck6/7ZMubufiqs43w4OnWlfZOvtGY6modA=\",\"text\":\"nonmachinable characteristics in 1.2 are subject to the nonmachinable surcharge (see 133.1.7). 6.3.2   Nonmachinable Flats Flat-size pieces that do not meet the standards in 2.0 are considered parcels, and the mailer must pay the applicable parcel price.  6.4Parcels [7-9-23] USPS Ground Advantage — Retail parcels are eligible for USPS Tracking and Signature Confirmation service. A USPS Ground Advantage — Retail parcel is the following: a.A mailpiece that exceeds any one of the maximum dimensions for a flat (large envelope). See 2.1. b. A flat-size mailpiece, regardless of thickness, that is rigid or nonrectangular. c.A flat-size mailpiece that is not uniformly thick under 2.4. d.[7-9-23] A mailpiece that does not exceed 130 inches in combined length and girth. 7.0Additional Physical Standards for Media Mail and Library Mail These standards apply to Media Mail and Library Mail: Domestic Mail Manual • Updated 7-9-23 101 101.6.4 Retail Mail: Physical Standards for Letters, Cards, Flats, and Parcels a.No piece may weigh more than 70 pounds. b. The combined length and girth of a piece (the length of its longest side plus the distance around its thickest part) may not exceed 108 inches. c.Lower size or weight standards apply to mail addressed to certain APOs and FPOs, subject to 703.2.0 and 703.4.0 and for Department of State mail, subject to 703.3.0. Domestic Mail Manual • Updated 7-9-23\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"9fd8cf77-375d-48f9-9d6c-59708d5425a4":{"__data__":"{\"id_\":\"9fd8cf77-375d-48f9-9d6c-59708d5425a4\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/_Resume Zach Dive.pdf\",\"metadata\":{},\"hash\":\"bOeZjmS0dw4v0s1XYqsuxPYNrItlIk6xAhJD5gJNKfc=\"},\"NEXT\":{\"nodeId\":\"0ddc4676-8f5c-4905-8ae4-f0412ec079b4\",\"metadata\":{},\"hash\":\"DZUHVK98VhSjX/CICtKRjjlzTrvB/CBPdh0lNr5YPpw=\"}},\"hash\":\"LYb5ZhhrviV9feezvNG0gCAr6HSUnnDbUN+qrUHnpcE=\",\"text\":\"ZachDive Berkeley,CA|zach_dive@berkeley.edu|541-901-2993|linkedin.com/in/zacharydive/ PROFESSIONALEXPERIENCE AdeptAILabsSanFrancisco,CA MemberOfTechnicalStaffJune2023–August2023 ●InitiatedandshapedAdept’sfirstAISummerResidencyProgramastheinauguralintern ●Identifiedaproductfeature(‘talkback’)thatwouldimprovetheuserexperienceofinteractingwithourmodel(ACT-2) ●Collaboratedwithacross-functionalteamofMLresearchers,engineers,anddesignerstodevelopamethodologyfor collectingHCIdemonstrationstotrainourmodeltodo‘talkback’inthemostimpactfuluserscenarios ●Directedaseriesofsprintstocollectthisdataforfine-tuning,unveilingnewmodelcapabilitiesforinternaltestingviaa TypeScriptprototype,inturnimprovingmodelperformanceonbenchmarksbyapproximately90% AfinitiLondon,UK ProductManagerJune2021-November2021 ●SupervisedthedevelopmentofanewUIforAfiniti’sAIbehavioralpairingplatform,increasingclientsatisfaction25% ●Assisted2SeniorProductManagersinproductdevelopment,includingsynthesizing200+usersurveyresponses, prioritizingfeaturesinConfluenceandleadingdevelopmentsprintsinReactandMaterialUI ●Proposedanewautomatedsystemtotrackhiringdataduringaperiodof700newhiresandworkedwithengineersto buildanewdatatrackingpipeline,saving50hrsofmanualwork/month JunctionExeter,UK FounderUKSeptember2019–June2021 ●LedthefirstUKlaunchofEurope'slargestandleadinghackathonbrand ●Managedateamof15coreteammembers,aswellasjunioreventvolunteers ●Co-ordinatedsponsorship,partner-relationmanagementandfinancialmanagementincludingabudgetof£15,000 CNNInternationalLondon,UK DigitalMarketingInternJuly2018–August2018 ●BuiltmarketingcampaignsforCNNInternational,leadingtoa300%increaseinwebsitevisits ●DesignedbannersforclientsusingtheAdobeSuite,enabling50%increaseinleads LEADERSHIP&PROJECTS MintBerkeley,CA\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"0ddc4676-8f5c-4905-8ae4-f0412ec079b4":{"__data__":"{\"id_\":\"0ddc4676-8f5c-4905-8ae4-f0412ec079b4\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/_Resume Zach Dive.pdf\",\"metadata\":{},\"hash\":\"bOeZjmS0dw4v0s1XYqsuxPYNrItlIk6xAhJD5gJNKfc=\"},\"PREVIOUS\":{\"nodeId\":\"9fd8cf77-375d-48f9-9d6c-59708d5425a4\",\"metadata\":{},\"hash\":\"LYb5ZhhrviV9feezvNG0gCAr6HSUnnDbUN+qrUHnpcE=\"}},\"hash\":\"DZUHVK98VhSjX/CICtKRjjlzTrvB/CBPdh0lNr5YPpw=\",\"text\":\"LEADERSHIP&PROJECTS MintBerkeley,CA Co-FounderandTechnicalProductLeadJanuary2023-August2023 ●DevelopedafooddeliveryplatformconnectingconsumerstolocalBayAreafarmers'marketsusingFigmatodesign high-fidelitywireframesandthefullMERNJavascriptstackforthedevelopmentofthewebapplication ●IncubatedbythePad-13ProgramatBerkeleySkyDeckasmemberoftheBatch-16cohort ●Conducteduserresearchvia30+userinterviews,surveys,dataanalysisandtranslatedintostoriesforproductbacklog ExeterEntrepreneursExeter,UK PresidentJune2019–June2021 ●LedthelargestsocietyattheUniversityofExeter,with1800+membersandateamof16committeepositions ●Electedtop3mostinnovativeuniversitysocietiesintheUKbyBrightNetwork ExCodeExeter,UK ProfessorJune2019–June2021 ●Instructedandorchestratedan8-weeknon-profit,student-runcodingbootcamp,teachingintroductoryPythonskills ●Lecturedto500+studentsand200+overZoompost-pandemic ●FosteredsponsorshipswithAWSandAccenturetodeliverano-costeducationalprogramtouniversitystudents EDUCATION UniversityofCalifornia,BerkeleyBerkeley,CA MasterofDesignGraduationDate:December2023 ●Organizations/Awards:DistinguishedScholarAward,CalBoxingNCBAAthlete,AIEntrepreneursBerkeley UniversityofExeterExeter,UK BachelorofScience,Business&Management(GPA:4.0)September2019–June2021 ●Organizations/Awards:Dean’sCommendationAcademicExcellence,ExeterMuay-ThaiVarsityFighter SKILLS Programming:|Python|React.JS|JavaScript|HTML|CSS|mySQL|Mongoose.js|Express.js|Node.js|RestAPIs| Software:Figma|AdobeCC|Jira|Asana|Monday|Trello|AWS|GoogleCloud|GoogleAnalytics|Excel|Tableau| Methods:RoadMapping|UserPersonas|A/BTesting|CohortAnalysis|KPIsetting|UserResearch|Agile|Scrum|\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"103d6c65-5677-4afb-ad46-05feca36e6a5":{"__data__":"{\"id_\":\"103d6c65-5677-4afb-ad46-05feca36e6a5\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD CheatSheet.pdf\",\"metadata\":{},\"hash\":\"iq6VL6Hr6wFccot569giwUCwfqOblvBbUBjeiwEsSiM=\"},\"NEXT\":{\"nodeId\":\"f85d52b3-8801-4c8d-a509-1f08238727ea\",\"metadata\":{},\"hash\":\"2E1+Vy4WwIqy6Q/VxGdiwXt2aLLsMgKOuL/7+y8+KlY=\"}},\"hash\":\"hvPbCugnJ1JAH98bZVyDn14lLBfZRRR7WSD5ToVJSLo=\",\"text\":\"Syntax var = value; module name(...) { ... } name(); function name(...) = ... name(); include <....scad> use <....scad> 2D circle(radius | d=diameter) square(size,center) square([width,height],center) polygon([points]) polygon([points],[paths]) text(t, size, font, halign, valign, spacing, direction, language, script) 3D sphere(radius | d=diameter) cube(size, center) cube([width,depth,height], center) cylinder(h,r|d,center) cylinder(h,r1|d1,r2|d2,center) polyhedron(points, triangles, convexity) * ! # % Transformations translate([x,y,z]) rotate([x,y,z]) scale([x,y,z]) resize([x,y,z],auto) mirror([x,y,z]) multmatrix(m) color(\\\"colorname\\\") color([r,g,b,a]) offset(r|delta,chamfer) hull() minkowski() Boolean operations union() difference() intersection() Modifier Characters disable show only highlight / debug transparent / background Mathematical abs sign sin cos tan acos asin atan atan2 floor round ceil ln len let log pow sqrt exp rands min max Functions concat lookup str chr search version version_num norm cross parent_module(idx) Other echo(...) for (i = [start:end]) { ... } for (i = [start:step:end]) { ... } for (i = [...,...,...]) { ... } intersection_for(i = [start:end]) { ... } intersection_for(i = [start:step:end]) { ... } intersection_for(i = [...,...,...]) { ... } if (...) { ... } assign (...) { ... } import(\\\"....stl\\\") linear_extrude(height,center,convexity,twist,slices) rotate_extrude(angle,convexity) surface(file = \\\"....dat\\\",center,convexity)\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f85d52b3-8801-4c8d-a509-1f08238727ea":{"__data__":"{\"id_\":\"f85d52b3-8801-4c8d-a509-1f08238727ea\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD CheatSheet.pdf\",\"metadata\":{},\"hash\":\"iq6VL6Hr6wFccot569giwUCwfqOblvBbUBjeiwEsSiM=\"},\"PREVIOUS\":{\"nodeId\":\"103d6c65-5677-4afb-ad46-05feca36e6a5\",\"metadata\":{},\"hash\":\"hvPbCugnJ1JAH98bZVyDn14lLBfZRRR7WSD5ToVJSLo=\"}},\"hash\":\"2E1+Vy4WwIqy6Q/VxGdiwXt2aLLsMgKOuL/7+y8+KlY=\",\"text\":\"surface(file = \\\"....dat\\\",center,convexity) projection(cut) render(convexity) children([idx]) List Comprehensions Generate [ for (i = range|list) i ] Conditions [ for (i = ...) if (condition(i)) i ] Assignments [ for (i = ...) let (assignments) a ] $fa $fs $fn $t $vpr $vpt $vpd $children Special variables minimum angle minimum size number of fragments animation step viewport rotation angles in degrees viewport translation viewport camera distance number of module children Links: Official website | Code | Issues | Manual | MCAD library | Forum | Other links  Edit me on GitHub! By Peter Uithoven @ Fablab Amersfoort (CC-BY) OpenSCAD CheatSheet v2015.03\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"17c31771-bb9a-4c95-aed9-4419855fbe1e":{"__data__":"{\"id_\":\"17c31771-bb9a-4c95-aed9-4419855fbe1e\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"NEXT\":{\"nodeId\":\"1eca59ef-18ec-4640-a441-24f9c0411829\",\"metadata\":{},\"hash\":\"9MUaUdA1JvHT5RQlF+jiHcaBEOZSbY/YEyJ7D+o99uU=\"}},\"hash\":\"9R6yP0378SfxkqBBzDcquJdsErUnwpt6tpeF4gVQqHA=\",\"text\":\"OpenSCAD User Manual Contents 1 Introduction 1.1 Additional Resources 1.2 History 2 The OpenSCAD User Manual 3 The OpenSCAD Language Reference 4 Work in progress 5 Contents 6 Chapter 1 -- First Steps 6.1 Compiling and rendering our first model 6.2 See also 6.3 See also 6.3.1 There is no semicolon following the translate command 6.3.2 See Also 6.3.3 See Also 6.4 CGAL surfaces 6.5 CGAL grid only 6.6 The OpenCSG view 6.7 The Thrown Together View 6.8 See also 6.9 References 7 Chapter 2 -- The OpenSCAD User Interface 7.1 User Interface 7.1.1 Viewing area 7.1.2 Console window 7.1.3 Text editor 7.2 Interactive modification of the numerical value 7.3 View navigation 7.4 View setup 7.4.1 Render modes 7.4.1.1 OpenCSG (F9) 7.4.1.1.1 Implementation Details 7.4.1.2 CGAL (Surfaces and Grid, F10 and F11) 7.4.1.2.1 Implementation Details 7.4.2 View options 7.4.2.1 Show Edges (Ctrl+1) 7.4.2.2 Show Axes (Ctrl+2) 7.4.2.3 Show Crosshairs (Ctrl+3) 7.4.3 Animation 7.4.4 View alignment 7.5 Dodecahedron 7.6 Icosahedron 7.7 Half-pyramid 7.8 Bounding Box 7.9 Linear Extrude extended use examples 7.9.1 Linear Extrude with Scale as an interpolated function 7.9.2 Linear Extrude with Twist as an interpolated function 7.9.3 Linear Extrude with Twist and Scale as interpolated functions 7.10 Rocket 7.11 Horns 7.12 Strandbeest 7.13 Previous 7.14 Next 7.14.1 Command line usage 7.14.2 Export options 7.14.2.1 Camera and image output 7.14.3 Constants\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1eca59ef-18ec-4640-a441-24f9c0411829":{"__data__":"{\"id_\":\"1eca59ef-18ec-4640-a441-24f9c0411829\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"17c31771-bb9a-4c95-aed9-4419855fbe1e\",\"metadata\":{},\"hash\":\"9R6yP0378SfxkqBBzDcquJdsErUnwpt6tpeF4gVQqHA=\"},\"NEXT\":{\"nodeId\":\"52ce2ac8-b143-4c20-bdbc-2bfec2ba18c6\",\"metadata\":{},\"hash\":\"y8693m7QWYZjiKjJtFuKcNfPh/5KMPEzsUoZHB6QCBE=\"}},\"hash\":\"9MUaUdA1JvHT5RQlF+jiHcaBEOZSbY/YEyJ7D+o99uU=\",\"text\":\"7.14.2.1 Camera and image output 7.14.3 Constants 7.14.4 Command to build required files 7.14.5 Processing all .scad files in a folder 7.14.6 Makefile example 7.14.6.1 Automatic targets 7.14.7 Windows notes 7.14.8 MacOS notes 8 Chapter 3 -- Commented Example Projects 8.1 Dodecahedron 8.2 Icosahedron 8.3 Half-pyramid 8.4 Bounding Box 8.5 Linear Extrude extended use examples 8.5.1 Linear Extrude with Scale as an interpolated function 8.5.2 Linear Extrude with Twist as an interpolated function 8.5.3 Linear Extrude with Twist and Scale as interpolated functions 8.6 Rocket 8.7 Horns 8.8 Strandbeest 8.9 Previous 8.10 Next 9 Chapter 4 -- Export 9.1 Export 9.2 STL Export 9.3 Linear Extrude 9.4 Rotate Extrude 9.5 Getting Inkscape to work 9.6 Previous 9.7 Next 9.7.1 PS/EPS 9.7.2 SVG 9.7.3 Makefile automation 9.7.4 AI (Adobe Illustrator) 9.8 Previous 9.9 Next 10 Chapter 5 -- Using an external Editor with OpenSCAD 10.1 Why use an external editor 10.2 How to use an external editor 10.3 Support of external editors 10.4 Additional benefits 11 Chapter 6 -- Using OpenSCAD in a command line environment 11.1 Command line usage 11.2 Export options 11.2.1 Camera and image output 11.3 Constants 11.4 Command to build required files 11.5 Processing all .scad files in a folder 11.6 Makefile example 11.6.1 Automatic targets 11.7 Windows notes 11.8 MacOS notes 12 Chapter 7 -- Path locations 12.1 Env variables 12.2 Per platform roots 12.3 Read-only Resources 12.4 User Resources 12.5 Misc Resources 12.6 Reference 13 Chapter 8 -- Building OpenSCAD from Sources 13.1 Prebuilt binary packages\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"52ce2ac8-b143-4c20-bdbc-2bfec2ba18c6":{"__data__":"{\"id_\":\"52ce2ac8-b143-4c20-bdbc-2bfec2ba18c6\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"1eca59ef-18ec-4640-a441-24f9c0411829\",\"metadata\":{},\"hash\":\"9MUaUdA1JvHT5RQlF+jiHcaBEOZSbY/YEyJ7D+o99uU=\"},\"NEXT\":{\"nodeId\":\"38064d01-3554-4b18-ad06-a4b52d388685\",\"metadata\":{},\"hash\":\"Mg7gKA91EP8qAa35P86pcxbEFRB2DNQLRf/2E3BHHOs=\"}},\"hash\":\"y8693m7QWYZjiKjJtFuKcNfPh/5KMPEzsUoZHB6QCBE=\",\"text\":\"13 Chapter 8 -- Building OpenSCAD from Sources 13.1 Prebuilt binary packages 13.1.1 generic linux binary package 13.1.2 nightly builds 13.1.3 chrysn's Ubuntu packages 13.2 Building OpenSCAD yourself 13.2.1 Installing dependencies 13.2.1.1 Prepackaged dependencies 13.2.1.2 Verifying dependencies 13.2.2 Building the dependencies yourself 13.2.3 Build the OpenSCAD binary 13.2.4 Experimental 13.3 Compiling the test suite 13.4 Troubleshooting 13.4.1 Errors about incompatible library versions 13.4.2 OpenCSG didn't automatically build 13.4.3 CGAL didn't automatically build 13.4.4 Compiling fails with an Internal compiler error from GCC or GAS 13.4.5 Compiling is horribly slow and/or grinds the disk 13.4.6 BSD issues 13.4.7 Sun / Solaris / IllumOS / AIX / IRIX / Minix / etc 13.4.8 Test suite problems 13.4.9 I moved the dependencies I built and now openscad won't run 13.5 Tricks and tips 13.5.1 Reduce space of dependency build 13.5.2 Preferences 13.5.3 Setup environment to start developing OpenSCAD in Ubuntu 11.04 13.5.4 The Clang Compiler 13.6 Setup 13.7 Requirements 13.8 Build OpenSCAD 13.9 Downloads 13.10 Installing 13.11 Compiling Dependencies 13.11.1 Qt 13.11.2 CGAL 13.11.3 OpenCSG 13.11.4 OpenSCAD 13.12 Building an installer 13.13 Compiling the regression tests 13.14 Troubleshooting 13.14.1 CGAL 13.14.2 References 14 Chapter 9 -- Frequently Asked Questions 15 General 15.1 How is OpenSCAD pronounced? 15.2 Using OpenSCAD for Windows in VM's or via Remote desktop (Windows RDP or Linux XfreeRDP etc) 16 Display 16.1 Preview doesn't appear to work at all 16.2 What are those strange flickering artifacts in the preview?\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"38064d01-3554-4b18-ad06-a4b52d388685":{"__data__":"{\"id_\":\"38064d01-3554-4b18-ad06-a4b52d388685\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"52ce2ac8-b143-4c20-bdbc-2bfec2ba18c6\",\"metadata\":{},\"hash\":\"y8693m7QWYZjiKjJtFuKcNfPh/5KMPEzsUoZHB6QCBE=\"},\"NEXT\":{\"nodeId\":\"6663bd34-6ae2-4146-b906-f73fadfc9887\",\"metadata\":{},\"hash\":\"SG4/aZu5u7rD06b1at3DyjWw0zh6sdW958EYQJJXsIg=\"}},\"hash\":\"Mg7gKA91EP8qAa35P86pcxbEFRB2DNQLRf/2E3BHHOs=\",\"text\":\"16.2 What are those strange flickering artifacts in the preview? 16.3 Why are some parts (e.g. holes) of the model not rendered correctly? 16.4 Why is my model appearing with F5 but not F6? 16.5 Why is the preview so slow? 17 Import 17.1 Why is my imported STL file appearing with F5 but not F6? 17.2 I'm getting \\\"Unsupported DXF Entity\\\" warnings when importing DXF files. What does that mean? 18 Export 18.1 How can I export multiple parts from one script? 18.2 How can I export screenshots with higher resolution than the current window 19 Language 19.1 Why am I getting an error when writing a = a + 1? 20 User Interface 20.1 OpenSCAD isn't adhering to my GTK desktop theme 20.2 I'm not getting any menubar when running OpenSCAD in Ubuntu, how can I get it back? 20.3 Why are the error line numbers wrong? 20.4 I don't like the editor, can I use my favourite editor instead? 21 Errors / Problems 21.1 Why am I getting \\\"no top level geometry to render\\\"? 21.2 OpenSCAD crashed/was killed, are my unsaved changes lost? 21.3 OpenSCAD crashes when clicking \\\"New\\\" or loading a file on Windows 21.4 OpenSCAD fails to run refering to EVR.dll, MF.dll or MFPlat.dll on Windows 22 Reporting bugs, Requesting features 22.1 How do I report bugs? 22.2 How do I request new features? 22.3 How do I report bugs that are related to the Operating System I use? 22.3.1 Windows 22.3.2 Mac OSX 22.3.3 Linux 23 Chapter 10 -- Libraries 24 Library Locations 24.1 Setting OPENSCADPATH 25 MCAD 26 Other Libraries 26.1 Other OpenSCAD tutorials and documentation 27 Chapter 11 -- Command Glossary 27.1 Mathematical Operators 27.2 Mathematical Functions 27.3 String Functions 27.4 Primitive Solids 27.5 Transformations 27.6 Conditional and Iterator Functions 27.7 CSG Modelling 27.8 Modifier Characters 27.9 Modules 27.10 Include Statement\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"6663bd34-6ae2-4146-b906-f73fadfc9887":{"__data__":"{\"id_\":\"6663bd34-6ae2-4146-b906-f73fadfc9887\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"38064d01-3554-4b18-ad06-a4b52d388685\",\"metadata\":{},\"hash\":\"Mg7gKA91EP8qAa35P86pcxbEFRB2DNQLRf/2E3BHHOs=\"},\"NEXT\":{\"nodeId\":\"5abd24ba-bfac-44bc-9caf-4f54d980d1e9\",\"metadata\":{},\"hash\":\"oTPMFxS+w4Pg6NGlrK+AFTiTk8B+neg52TkKrvbc7Bk=\"}},\"hash\":\"SG4/aZu5u7rD06b1at3DyjWw0zh6sdW958EYQJJXsIg=\",\"text\":\"27.8 Modifier Characters 27.9 Modules 27.10 Include Statement 27.11 Other Language Features 27.12 2D Primitives 27.13 3D to 2D Projection 27.14 2D to 3D Extrusion 27.15 DXF Extrusion 27.16 STL Import Introduction OpenSCAD is a software for creating solid 3D CAD objects. It is free software and available for GNU/Linux, Microsoft Windows and Mac OS X. Unlike most free software for creating 3D models (such as the well-known application Blender), OpenSCAD does not focus on the artistic aspects of 3D modelling, but instead focuses on the CAD aspects. So it might be the application you are looking for when you are planning to create 3D models of machine parts, but probably is not what you are looking for when you are more interested in creating computer-animated movies or organic life-like models. OpenSCAD, unlike many CAD products, is not an interactive modeler. Instead it is something like a 2D/3D-compiler that reads in a program file that describes the object and renders the model from this file. This gives you (the designer) full control over the modelling process. This enables you to easily change any step in the modelling process and make designs that are defined by configurable parameters. OpenSCAD has two main operating modes, Preview and Render. Preview is relatively fast using 3D graphics and the computer's GPU, but is an approximation of the model and can produce artifacts; Preview uses OpenCSG and OpenGL. Render generates exact geometry and a fully tessellated mesh. It is not an approximation and as such it is often a lengthy process, taking minutes or hours for larger designs. Render uses CGAL as its geometry engine. OpenSCAD provides two types of 3D modelling: Constructive Solid Geometry (CSG) extrusion of 2D primitives into 3D space. Autocad DXF files are used as the data exchange format for 2D outlines. In addition to 2D paths for extrusion it is also possible to read design parameters from DXF files. Besides DXF files, OpenSCAD can read and create 3D models in the STL and OFF file formats.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"5abd24ba-bfac-44bc-9caf-4f54d980d1e9":{"__data__":"{\"id_\":\"5abd24ba-bfac-44bc-9caf-4f54d980d1e9\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"6663bd34-6ae2-4146-b906-f73fadfc9887\",\"metadata\":{},\"hash\":\"SG4/aZu5u7rD06b1at3DyjWw0zh6sdW958EYQJJXsIg=\"},\"NEXT\":{\"nodeId\":\"c0f5aac2-7ce8-4bc3-97fd-9c3ab866e4d2\",\"metadata\":{},\"hash\":\"m/iIYZrjqVGHPs5wlP8ZP6LYrIYRddjJInhurLpnziM=\"}},\"hash\":\"oTPMFxS+w4Pg6NGlrK+AFTiTk8B+neg52TkKrvbc7Bk=\",\"text\":\"OpenSCAD can be downloaded from https://www.openscad.org/. More information is available on the mailing list. Additional Resources A clear guided introduction to using OpenSCAD and to the OpenSCAD language is available in the OpenSCAD Tutorial. For Teachers: a basic 25-slide presentation from 2014 is available under GNUFDL to walk your students through the process of using OpenSCAD here. Fablab Lannion (France) edited a nice French-language interactive tutorial that you might appreciate. A \\\"cheat sheet\\\" is a useful quick reference for the OpenSCAD language, with each item linking back to this Wikibook. History Periodically the two manuals below get cleaned up or have major transitions. Consider archiving the manuals prior to starting a major update. This can be done for the two 'printable version' links below to the Internet Archive 2018-04-25 The OpenSCAD User Manual - Print Version & The OpenSCAD Language - Print Version 2019-07-22 The OpenSCAD User Manual Which includes links to the archives of the above two printed versions (as of this date). The Wayback Machine no longer has a free user requested site archive, so below is just the two 'printable version' manuals 2020-12-11 The OpenSCAD User Manual - Print Version & The OpenSCAD Language - Print Version The OpenSCAD User Manual 1. Introduction 2. First Steps 3. The OpenSCAD User Interface 4. Input Devices 5. Customizer 6. Import - STL, 3MF, OFF, AMF, DXF, SVG, CSG 1. SVG Import 7. Export - STL, 3MF, OFF, AMF, DXF, SVG, CSG, PNG 1. STL Export 2. CSG Export 3. DXF Extrusion 4. Other 2D formats 8. Example Projects 1. Strandbeest 9. Paths 10. Using an external Editor with OpenSCAD 11. Integration with other applications 12. Using OpenSCAD in a command line environment 13. Building OpenSCAD from Sources 1. Building on Linux/UNIX 2. Cross-compiling for Windows on Linux or Mac OS X 3.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"c0f5aac2-7ce8-4bc3-97fd-9c3ab866e4d2":{"__data__":"{\"id_\":\"c0f5aac2-7ce8-4bc3-97fd-9c3ab866e4d2\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"5abd24ba-bfac-44bc-9caf-4f54d980d1e9\",\"metadata\":{},\"hash\":\"oTPMFxS+w4Pg6NGlrK+AFTiTk8B+neg52TkKrvbc7Bk=\"},\"NEXT\":{\"nodeId\":\"8ea1a15e-49ff-4b39-b90c-3ea3a16e239a\",\"metadata\":{},\"hash\":\"i36iI8Dco2SCfrn1AYtowSWRnXelaJHDkQel5b+Eprc=\"}},\"hash\":\"m/iIYZrjqVGHPs5wlP8ZP6LYrIYRddjJInhurLpnziM=\",\"text\":\"2. Cross-compiling for Windows on Linux or Mac OS X 3. Building on Windows (Outdated) 4. Building on Windows (New) 5. Building on Mac OS X 6. Submitting patches 14. Frequently Asked Questions 15. Libraries 16. Tips and Tricks 17. Command Glossary - Very short name and syntax reference The OpenSCAD Language Reference 1. The OpenSCAD Language 1. General - READ THIS FIRST - comments, values and data types, variables, vectors, getting input 2. 3D objects - 1. 3D Primitive Solids - cube, sphere, cylinder, polyhedron 2. 3D to 2D Projection 3. 2D Objects 1. 2D Primitives - square, circle, polygon 2. Text - Generate text using installed or user supplied font files. 3. 2D to 3D - linear_extrude, rotate_extrude 4. Transform 1. color 2. rotate, translate, mirror, multmatrix 3. scale, resize 4. offset, minkowski, hull 5. Combining transformations 5. Boolean combination 1. union, difference, intersection, render 6. Other Functions and Operators 1. Conditional and Iterator Functions - for, intersection_for, if, conditional ? :, assign 2. Mathematical Operators - General, Vectors, Matrix multiplication 3. Mathematical Functions 1. Trigonometric (cos sin tan acos asin atan atan2) 2. Other (abs ceil concat cross exp floor ln len let log lookup max min norm pow rands round sign sqrt) 4. String Functions - str, chr, ord 5. Type Test Functions - is_undef, is_bool, is_num, is_string, is_list 6. List Comprehensions 7. Other Language Features - Special '$' variables, echo, render, surface, search , version(), version_num(), parent_module(n) and $parent_modules, assert 7. User-Defined Functions and Modules - Functions, Modules, Children 8. Debugging aids -  % # ! * echo 9. External libraries and code files 1. include - SCAD, CSG\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"8ea1a15e-49ff-4b39-b90c-3ea3a16e239a":{"__data__":"{\"id_\":\"8ea1a15e-49ff-4b39-b90c-3ea3a16e239a\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"c0f5aac2-7ce8-4bc3-97fd-9c3ab866e4d2\",\"metadata\":{},\"hash\":\"m/iIYZrjqVGHPs5wlP8ZP6LYrIYRddjJInhurLpnziM=\"},\"NEXT\":{\"nodeId\":\"ba850f09-7b04-491e-bb4a-2b62173f40f8\",\"metadata\":{},\"hash\":\"r2xLAp5vIOXPtkfMxjthvHPYEEytCFQhv8Eddap0DpI=\"}},\"hash\":\"i36iI8Dco2SCfrn1AYtowSWRnXelaJHDkQel5b+Eprc=\",\"text\":\"9. External libraries and code files 1. include - SCAD, CSG 2. use - SCAD 3. import - STL, OFF, DXF 1. import_dxf - Deprecated 2. import_stl - Deprecated 4. export - STL, OFF, AMF, 3MF, DXF, SVG, PNG, CSG 5. surface - PNG Work in progress This section contains documentation about ongoing work which is available as experimental features in snapshot versions of OpenSCAD or not yet integrated at all and pending in a branch or pull-request at the OpenSCAD github repository. Work in progress - Overview Inputdriver Offset Extrude Please add {{alphabetical}} only to book title pages. Contents OpenSCAD User Manual without The OpenSCAD Language Reference 1. First Steps 2. The OpenSCAD User Interface 3. Commented Example Projects 4. Export 5. Using an external Editor with OpenSCAD 6. Using OpenSCAD in a command line environment 7. Path locations 8. Building OpenSCAD from Sources 1. Building on Linux/UNIX 2. Cross-compiling for Windows on Linux or Mac OS X 3. Building on Windows 4. Building on Mac OS X 9. Frequently Asked Questions 10. Libraries 11. Glossary OpenSCAD Simple Cuboid OpenSCAD after starting OpenSCAD after pasting the example code and pressing F5 Chapter 1 -- First Steps OpenSCAD User Manual For our first model, we create a simple 2×3×4 cuboid. To get started, launch OpenSCAD. You should have a preview window, toolbar, console and editor windows open. If one is hidden you can turn it on by going to the View menu and unselect the hidden items. To create our cuboid we use the openSCAD editor window to type a one-line command: Usage example 1 - simple cuboid: cube([2,3,4]); Compiling and rendering our first model The cuboid can now be compiled and rendered by pressing F5 or F6 Function key on your keyboard while the OpenSCAD editor has focus. You should now see your object in the preview window as\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"ba850f09-7b04-491e-bb4a-2b62173f40f8":{"__data__":"{\"id_\":\"ba850f09-7b04-491e-bb4a-2b62173f40f8\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"8ea1a15e-49ff-4b39-b90c-3ea3a16e239a\",\"metadata\":{},\"hash\":\"i36iI8Dco2SCfrn1AYtowSWRnXelaJHDkQel5b+Eprc=\"},\"NEXT\":{\"nodeId\":\"9f3f6f11-cdda-482b-b087-420e0c94c026\",\"metadata\":{},\"hash\":\"/GpNOM7sV+2msuL+AMeWZ6k8o1f9AClhuxi63pwPkGQ=\"}},\"hash\":\"r2xLAp5vIOXPtkfMxjthvHPYEEytCFQhv8Eddap0DpI=\",\"text\":\"You should now see your object in the preview window as shown above. See also Next: Positioning an object Open one of the many examples that come with OpenSCAD (File, Examples). Or you can copy and paste this simple example into the OpenSCAD window: Usage example 1 difference() { cube(30, center=true); sphere(20); } translate([0, 0, 30]) { cylinder(h=40, r=10); } Then press F5 to get a graphical preview of what you typed (or press F6 to get a graphical view). You get three types of movement in the preview frame: 1. Drag with left mouse button to rotate the view. The bottom line changes the rotate values. 2. Drag with any other mouse button (or control-drag under OSX) to translate (move) the view. The bottom line changes translate values. 3. Use the mouse scroll to zoom in and out. Alternatively you can use the + and - keys, or right- drag with the mouse while pressing a shift key (or control-shift-drag under OSX). The Viewport line at the bottom of the window shows a change in the distance value. See also Previous: Model views Next: [[../../The OpenSCAD User Interface/]] We have already seen how to create a simple cuboid. Our next task is to attempt to use the translate positioning command to place an identical cuboid next to the existing cuboid. Type the data as shown below. There are a total of 4 lines of code. Press F5 or F6 function key when done to see the preview. Usage example 1 - positioning an object: cube([2,3,4]); translate([3,0,0]) { cube([2,3,4]); } There is no semicolon following the translate command OpenSCAD positioning an object OpenSCAD changing the color of an object Notice that there is no semicolon following the translate command. This is because the translate command relates to the following object. If the semicolon was in place, then the effect of the position translation would end, and the second cuboid would be placed at the same position as the first cuboid. See Also Previous: Creating a simple model\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"9f3f6f11-cdda-482b-b087-420e0c94c026":{"__data__":"{\"id_\":\"9f3f6f11-cdda-482b-b087-420e0c94c026\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"ba850f09-7b04-491e-bb4a-2b62173f40f8\",\"metadata\":{},\"hash\":\"r2xLAp5vIOXPtkfMxjthvHPYEEytCFQhv8Eddap0DpI=\"},\"NEXT\":{\"nodeId\":\"d3341176-2cc5-464b-b842-26dc04dcba50\",\"metadata\":{},\"hash\":\"Ai7yuGslH62YO9G2YfuFJ9HDychiB/+qq8XgEudPJkM=\"}},\"hash\":\"/GpNOM7sV+2msuL+AMeWZ6k8o1f9AClhuxi63pwPkGQ=\",\"text\":\"See Also Previous: Creating a simple model Next: Changing the color of an object We can change the color of an object by giving it RGB values. Instead of the traditional RGB values from 0 to 255 floating point values are used from 0.0 to 1.0. Note: changing the colors works only in Preview mode (F5); render mode (F6) does not currently support color. Usage example 1 - changing the color of an object: color([1,0,0]) cube([2,3,4]); translate([3,0,0]) color([0,1,0]) cube([2,3,4]); translate([6,0,0]) color([0,0,1]) cube([2,3,4]); Color names can be used in the 2011.12 version (and newer). The names are the same used for Web colors. For example: color(\\\"red\\\") cube(); If you think of the entire command as a sentence, then color() is an \\\"adjective\\\" that describes the \\\"object\\\" of the sentence (which is a \\\"noun\\\"). In this case, the object is the cube() to be created. The adjective is placed before the noun in the sentence, like so: color() cube();. In the same way, translate() can be thought of as a \\\"verb\\\" that acts upon the object, and is placed like this: translate() color() cube();. The following code produces the same result: translate([6,0,0]) { color([0,0,1])    // notice that there is NO semicolon cube([2,3,4]);    // notice the semicolon is at the end of all related commands } See Also Previous: Positioning an object Next: Model views The \\\"View\\\" menu at the top of the OpenSCAD application window provides a variety of view options in the OpenSCAD model view window. CGAL surfaces The surface view is the initial model view that appears when the model code is first rendered. You can get back to this view by choosing \\\"View >> CGAL Surfaces\\\". CGAL grid only Designers often choose \\\"View >> CGAL Grid Only\\\" when working with a particularly complex 3D model.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d3341176-2cc5-464b-b842-26dc04dcba50":{"__data__":"{\"id_\":\"d3341176-2cc5-464b-b842-26dc04dcba50\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"9f3f6f11-cdda-482b-b087-420e0c94c026\",\"metadata\":{},\"hash\":\"/GpNOM7sV+2msuL+AMeWZ6k8o1f9AClhuxi63pwPkGQ=\"},\"NEXT\":{\"nodeId\":\"f3903400-d470-47b2-afbf-3d0b146f0cba\",\"metadata\":{},\"hash\":\"t1O2qX+Q6C/DbDzrTdqlGtkUBYBw0s0Xf9fymgREW1U=\"}},\"hash\":\"Ai7yuGslH62YO9G2YfuFJ9HDychiB/+qq8XgEudPJkM=\",\"text\":\"The Grid Only view presents only the \\\"scaffolding\\\" beneath the surface, also known as a wireframe. Think of the Eiffel Tower. A wireframe is a visual presentation of a three dimensional or physical object. This method of modelling consists only of lines, points and curves defining the edges of an object. Using a wireframe model allows visualization of the underlying design structure of a 3D model. Since wireframe renderings are relatively simple and fast to calculate, they are often used in cases where a higher screen frame rate is needed (for instance, when working with a particularly complex 3D model, or in real-time systems that model exterior phenomena). When greater graphical detail is desired, surface textures can be added automatically after completion of the initial rendering of the wireframe. This allows the designer to quickly review changes or rotate the object to new desired views without long delays associated with more realistic rendering. The wireframe format is also well suited and widely used in programming tool paths for DNC (Direct Numerical Control) machine tools. Wireframe models are also used as the input for CAM (computer-Aided Manufacturing). Wireframe is the most abstract and least realistic of the three main CAD views. [1] The OpenCSG view Choosing \\\"View >> OpenCSG\\\" uses the open constructive solid geometry library to generate the model view utilizing OpenGL. If the OpenCSG library is not available or the video card or drivers do not support OpenGL, then this view does not produce visible output. The Thrown Together View Choosing \\\"View >> Thrown Together\\\" overlays all the previous views together on the same screen. Importantly, objects subtracted by the difference() command are rendered as solid objects in green (by default). See also Previous: Changing the color of an object Next: Opening an existing example model References 1. ↑ \\\"Wire-frame model\\\". Wikipedia. http://en.wikipedia.org/wiki/Wire-frame_model. Main Window of OpenSCAD with a small program generating the OpenSCAD-Logo. Chapter 2 -- The OpenSCAD User Interface OpenSCAD User Manual User Interface The user interface of OpenSCAD has three parts The viewing area The console window The text editor Viewing area Preview and rendering output goes into the viewing area. Using the Show Axes menu entry an\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f3903400-d470-47b2-afbf-3d0b146f0cba":{"__data__":"{\"id_\":\"f3903400-d470-47b2-afbf-3d0b146f0cba\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"d3341176-2cc5-464b-b842-26dc04dcba50\",\"metadata\":{},\"hash\":\"Ai7yuGslH62YO9G2YfuFJ9HDychiB/+qq8XgEudPJkM=\"},\"NEXT\":{\"nodeId\":\"bc444b8a-c271-4e26-85ca-b6672447cf87\",\"metadata\":{},\"hash\":\"QHSMRk12KJ2Hsoeh9BTfrJrIpb/1TDjmYq+8lcOTeGc=\"}},\"hash\":\"t1O2qX+Q6C/DbDzrTdqlGtkUBYBw0s0Xf9fymgREW1U=\",\"text\":\"Preview and rendering output goes into the viewing area. Using the Show Axes menu entry an indicator for the coordinate axes can be enabled. Console window Status information, warnings and errors are displayed in the console window. During a render a progress-bar is displayed at the bottom of the console. It includes a Cancel button to stop the render. Text editor The built-in text editor provides basic editing features like text search & replace and also supports syntax highlighting. There are predefined color schemes that can be selected in the Preferences dialog. OpenSCAD Editor with Find / Replace functionality. Interactive modification of the numerical value It is possible to change a numeric value in the source code and observe the result in real time. Placing the cursor after a digit and pressing Alt+ up arrow or Alt + down arrow will increment or decrement the chosen digit. The object is re- rendered and displayed in preview mode after each change of the selected number in the source code. The cursor is moved after the next digit by Alt + right arrow, the further decimal digits are added when needed by moving the cursor after the last digit on the right side. The cursor is moved left behind the most significant digits of the number by Alt + left arrow. Key Description Alt + Up Arrow Increment the numeric value to the left of the cursor and preview the object. Alt + Down Arrow Decrement the numeric value to the left of the cursor and preview the object. Alt + Left Arrow Move the cursor left to more significant digit. Alt + Right Arrow Move the cursor right to less significant digit, eventually add one more decimal digit. View navigation The difference between the CGAL and OpenCSG The viewing area is navigated primarily using the mouse: Action Icons Description rotating the view  Dragging with the left mouse button rotates the view along the axes of the viewing area. It preserves the vertical axis' direction. Double-click the left button to set the point of rotation. ⇧ Shift +  Dragging with the left mouse button when the shift key is pressed rotates the view along the vertical axis and the axis pointing towards the user. moving the viewing area  Dragging with the right mouse button moves the viewing area. zooming  Using the scroll wheel  Dragging with the middle mouse button ⇧ Shift +  Dragging with the right or middle mouse button and the shift key\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"bc444b8a-c271-4e26-85ca-b6672447cf87":{"__data__":"{\"id_\":\"bc444b8a-c271-4e26-85ca-b6672447cf87\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"f3903400-d470-47b2-afbf-3d0b146f0cba\",\"metadata\":{},\"hash\":\"t1O2qX+Q6C/DbDzrTdqlGtkUBYBw0s0Xf9fymgREW1U=\"},\"NEXT\":{\"nodeId\":\"d9940351-d285-4e99-ad0a-a950f42004e4\",\"metadata\":{},\"hash\":\"xz1IokNsWwByncYmCA6oFttML48E7vAP4/U/g2ks4bk=\"}},\"hash\":\"QHSMRk12KJ2Hsoeh9BTfrJrIpb/1TDjmYq+8lcOTeGc=\",\"text\":\"pressed ⇧ Shift +  + and - The keys + and - rotation reset Ctrl+0 Rotation can be reset using the shortcut Ctrl+0. translation reset Ctrl+⇧ Shift+0 Translation can be reset using the shortcut Ctrl+⇧ Shift+0. View setup The viewing area can be configured to use different rendering methods and other options using the View menu. Most of the options described here are available using shortcuts as well. Render modes OpenCSG (F9) This method produces instantaneous results, but has low frame rates when working with highly nonconvex objects. Selecting the OpenCSG mode using F9 switches to the last generated OpenCSG view, but does not re-evaluate the source code. You may want to use the Compile function (F5, found in the Design menu) to re-evaluate the source code, build the OpenCSG objects and then switch to OpenCSG view. Implementation Details In OpenCSG mode, the OpenCSG library is used for generating the visible model. This library uses advanced OpenGL features (2.0) like the Z buffer and does not require an explicit description of the resulting mesh – instead, it tracks how objects are to be combined. For example, when rendering a spherical dent in a cube, it first renders the cube on the graphics card and then render the sphere, but instead of using the Z buffer to hide the parts of the sphere that are covered by the cube, it renders only those parts of the sphere, visually resulting in a cube with a spherical dent. CGAL (Surfaces and Grid, F10 and F11) This method might need some time when first used with a new program, but then has higher frame rates. As before with OpenCSG, F10 and F11 enable only CGAL display mode and don't update the underlying objects; for that, use the Compile and Render function (F6, found in the Design menu). To combine the benefits of those two display methods, you can selectively wrap parts of your program in a render function and force them to be baken into a mesh even with OpenCSG mode enabled. Implementation Details The acronym CGAL refers to The Open Source Computational Geometry Algorithms Library. In CGAL mode, the CGAL library is used to compute the mesh of the root object, which is then displayed using simple OpenGL.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d9940351-d285-4e99-ad0a-a950f42004e4":{"__data__":"{\"id_\":\"d9940351-d285-4e99-ad0a-a950f42004e4\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"bc444b8a-c271-4e26-85ca-b6672447cf87\",\"metadata\":{},\"hash\":\"QHSMRk12KJ2Hsoeh9BTfrJrIpb/1TDjmYq+8lcOTeGc=\"},\"NEXT\":{\"nodeId\":\"55d662d5-faac-4eae-90e1-404982f0636b\",\"metadata\":{},\"hash\":\"/AMqPmRNNb2CfPkMcqif3WQZc360e34RwHcmRi0hJSk=\"}},\"hash\":\"xz1IokNsWwByncYmCA6oFttML48E7vAP4/U/g2ks4bk=\",\"text\":\"View options Show Edges (Ctrl+1) If Show Edges is enabled, both OpenCSG and CGAL mode render edges as well as faces; CGAL even shows vertices. In CGAL grid mode, this option has no effect. Enabling this option shows the difference between OpenCSG and CGAL quite clearly: While in CGAL mode you see an edge drawn everywhere it \\\"belongs\\\", OpenCSG does not show edges resulting from boolean operations – this is because they were never explicitly calculated but are just where one object's Z clipping begins or ends. Show Axes (Ctrl+2) If Show Axes is enabled, the origin of the global coordinate system is indicated by an orthogonal axes indicator. Additionally, a smaller axes indicator with axes names are approaches can be seen at edges created by boolean operations. shown in the lower left corner of the viewing area. The smaller axes indicator is marked x, y, z and coloured red, green, blue respectively. Show Crosshairs (Ctrl+3) If Show Crosshairs is enabled, the center of the viewport is indicated by four lines pointing in the room diagonal directions of the global coordinate system. This is useful when aligning the viewing area to a particular point in the model to keep it centered on screen during rotation. Animation The Animate option adds an animation bar to the lower edge of the screen. As soon as FPS and Steps are set (reasonable values to begin with are 10 and 100, respectively), the current Time is incremented by 1/Steps, FPS times per second, until it reaches 1, when it wraps back to 0. Every time Time is changed, the program is re-evaluated with the variable $t set to the current time. Read more about how $t is used in section Other_Language_Features. View alignment The menu items Top, Bottom, ..., Diagonal and Center (Ctrl+4, Ctrl+5, ..., Ctrl+0, Ctrl+Shift+0) align the view to the global coordinate system. Top, Bottom, Left, Right, Front and Back align it in parallel to the axes, the Diagonal option aligns it diagonally as it is aligned when OpenSCAD starts. The Center option puts the coordinate center in the middle of the screen (but not rotate the view).\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"55d662d5-faac-4eae-90e1-404982f0636b":{"__data__":"{\"id_\":\"55d662d5-faac-4eae-90e1-404982f0636b\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"d9940351-d285-4e99-ad0a-a950f42004e4\",\"metadata\":{},\"hash\":\"xz1IokNsWwByncYmCA6oFttML48E7vAP4/U/g2ks4bk=\"},\"NEXT\":{\"nodeId\":\"89d07e0a-5112-4485-b225-93874b8e3dcf\",\"metadata\":{},\"hash\":\"baaIsq57Zv4q0EADqOV+WULxxfcd+b2zi4FA9YjCnDM=\"}},\"hash\":\"/AMqPmRNNb2CfPkMcqif3WQZc360e34RwHcmRi0hJSk=\",\"text\":\"The Center option puts the coordinate center in the middle of the screen (but not rotate the view). By default, the view is in Perspective mode, meaning that distances far away from the viewer appear shorter, as seen in the real world eyes or cameras. When the view mode is changed to Orthogonal, visible distances do not depend on the camera distance (the view simulates a camera at an infinite distance with an infinite focal length). This is especially useful in combination with the Top etc. options described above, as these orthogonal views result in a 2D images similar to what one would see in an engineering drawing. Dodecahedron //create a dodecahedron by intersecting 6 boxes module dodecahedron(height) { scale([height,height,height]) //scale by height parameter { intersection(){ //make a cube cube([2,2,1], center = true); intersection_for(i=[0:4]) //loop i from 0 to 4, and intersect results { //make a cube, rotate it 116.565 degrees around the X axis, //then 72*i around the Z axis rotate([0,0,72*i]) rotate([116.565,0,0]) cube([2,2,1], center = true); } } } } //create 3 stacked dodecahedra //call the module with a height of 1 and move up 2 translate([0,0,2])dodecahedron(1); //call the module with a height of 2 dodecahedron(2); //call the module with a height of 4 and move down 4 translate([0,0,-4])dodecahedron(4); Icosahedron An icosahedron can be created from three orthogonal golden-ratio rectangles inside a hull() operation, where the golden ratio is . The Dodecahedron as rendered from the example. The icosahedron and its internal structure as rendered from the example. The half-pyramid as rendered from the example. phi=0.5*(sqrt(5)+1); // golden ratio // create an icosahedron by intersecting 3 orthogonal golden-ratio rectangles\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"89d07e0a-5112-4485-b225-93874b8e3dcf":{"__data__":"{\"id_\":\"89d07e0a-5112-4485-b225-93874b8e3dcf\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"55d662d5-faac-4eae-90e1-404982f0636b\",\"metadata\":{},\"hash\":\"/AMqPmRNNb2CfPkMcqif3WQZc360e34RwHcmRi0hJSk=\"},\"NEXT\":{\"nodeId\":\"057806a7-d3f0-4f28-96e4-170c1e843d9e\",\"metadata\":{},\"hash\":\"Eut7p5EfiolZcyPsyXhwGgsYwoPdkHdH1keaWhjmB7g=\"}},\"hash\":\"baaIsq57Zv4q0EADqOV+WULxxfcd+b2zi4FA9YjCnDM=\",\"text\":\"// create an icosahedron by intersecting 3 orthogonal golden-ratio rectangles module icosahedron(edge_length) { st=0.0001;  // microscopic sheet thickness hull() { cube([edge_length*phi, edge_length, st], true); rotate([90,90,0]) cube([edge_length*phi, edge_length, st], true); rotate([90,0,90]) cube([edge_length*phi, edge_length, st], true); } } // display the 3 internal sheets alongside the icosahedron edge=10; translate([-20,0,0]) union() { cube([edge*phi, edge, 0.01], true); rotate([90,90,0]) cube([edge*phi, edge, 0.01], true); rotate([90,0,90]) cube([edge*phi, edge, 0.01], true); } icosahedron(edge); This icosahedron renders in an edge-up orientation. Rotating this icosahedron by about the Y-axis results in a vertex-up orientation. Rotating by  about the X-axis results in a face-up orientation. The edge length  is related to the inner diameter (distance between opposite faces) by . Half-pyramid An upside-down half-pyramid is a useful shape for 3D printing a support for an overhang protruding from a vertical wall. With sloping sides no steeper than 45°, no removable support structure needs to be printed. While a half-pyramid can be made with a 4-sided cone (using the cylinder primitive) and subtracting a cube from half of it, the shape can be easily made in one operation by a scaled linear extrude of a rectangle having the middle of one edge on the origin. // Create a half-pyramid from a single linear extrusion module halfpyramid(base, height) { linear_extrude(height, scale=0.01) translate([-base/2, 0, 0]) square([base, base/2]); } halfpyramid(20, 10); Bounding Box Bounding Box applied to an Ellipsoid // Rather kludgy module for determining bounding box from intersecting projections\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"057806a7-d3f0-4f28-96e4-170c1e843d9e":{"__data__":"{\"id_\":\"057806a7-d3f0-4f28-96e4-170c1e843d9e\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"89d07e0a-5112-4485-b225-93874b8e3dcf\",\"metadata\":{},\"hash\":\"baaIsq57Zv4q0EADqOV+WULxxfcd+b2zi4FA9YjCnDM=\"},\"NEXT\":{\"nodeId\":\"9a95cfa2-2a96-4372-bb7d-adfa683e8178\",\"metadata\":{},\"hash\":\"lIp7CJYuKAWAPDN4uKrUBnAiuCDMo9pYwG0Az1b/LUA=\"}},\"hash\":\"Eut7p5EfiolZcyPsyXhwGgsYwoPdkHdH1keaWhjmB7g=\",\"text\":\"// Rather kludgy module for determining bounding box from intersecting projections module BoundingBox() { intersection() { translate([0,0,0]) linear_extrude(height = 1000, center = true, convexity = 10, twist = 0) projection(cut=false) intersection() { rotate([0,90,0]) linear_extrude(height = 1000, center = true, convexity = 10, twist = 0) projection(cut=false) rotate([0,-90,0]) children(0); rotate([90,0,0]) linear_extrude(height = 1000, center = true, convexity = 10, twist = 0) projection(cut=false) rotate([-90,0,0]) children(0); } rotate([90,0,0]) linear_extrude(height = 1000, center = true, convexity = 10, twist = 0) projection(cut=false) rotate([-90,0,0]) intersection() { rotate([0,90,0]) linear_extrude(height = 1000, center = true, convexity = 10, twist = 0) projection(cut=false) rotate([0,-90,0]) children(0); rotate([0,0,0]) linear_extrude(height = 1000, center = true, convexity = 10, twist = 0) projection(cut=false) rotate([0,0,0]) children(0); } } } // Test module on ellipsoid translate([0,0,40]) scale([1,2,3]) sphere(r=5); BoundingBox() scale([1,2,3]) sphere(r=5); Linear Extrude extended use examples Linear Extrude with Scale as an interpolated function Example Linear Extrude of a rectangle with scale following part of a sine curve function //Linear Extrude with Scale as an interpolated function // This module does not need to be modified, // - unless default parameters want to be changed // - or additional parameters want to be forwarded (e.g. slices,...) module linear_extrude_fs(height=1,isteps=20,twist=0){\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"9a95cfa2-2a96-4372-bb7d-adfa683e8178":{"__data__":"{\"id_\":\"9a95cfa2-2a96-4372-bb7d-adfa683e8178\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"057806a7-d3f0-4f28-96e4-170c1e843d9e\",\"metadata\":{},\"hash\":\"Eut7p5EfiolZcyPsyXhwGgsYwoPdkHdH1keaWhjmB7g=\"},\"NEXT\":{\"nodeId\":\"8c1bb3e6-42c6-4204-a6d4-4b2c544940ef\",\"metadata\":{},\"hash\":\"miY83ApRS5cwhspg11KM2waIAx4pxv/GC+jecqkE2M0=\"}},\"hash\":\"lIp7CJYuKAWAPDN4uKrUBnAiuCDMo9pYwG0Az1b/LUA=\",\"text\":\"module linear_extrude_fs(height=1,isteps=20,twist=0){ //union of piecewise generated extrudes union(){ for(i = [ 0: 1: isteps-1]){ //each new piece needs to be adjusted for height translate([0,0,i*height/isteps]) linear_extrude( height=height/isteps, twist=twist/isteps, scale=f_lefs((i+1)/isteps)/f_lefs(i/isteps) ) // if a twist constant is defined it is split into pieces rotate([0,0,-(i/isteps)*twist]) // each new piece starts where the last ended scale(f_lefs(i/isteps)) obj2D_lefs(); } } } // This function defines the scale function // - Function name must not be modified // - Modify the contents/return value to define the function function f_lefs(x) = let(span=150,start=20,normpos=45) sin(x*span+start)/sin(normpos); // This module defines the base 2D object to be extruded // - Function name must not be modified // - Modify the contents to define the base 2D object module obj2D_lefs(){ translate([-4,-3]) square([9,12]); } //Top rendered object demonstrating the interpolation steps translate([0,0,25]) linear_extrude_fs(height=20,isteps=4); linear_extrude_fs(height=20); //Bottom rendered object demonstrating the inclusion of a twist translate([0,0,-25]) linear_extrude_fs(height=20,twist=90,isteps=30); Linear Extrude with Twist as an interpolated function Example Linear Extrude of a rectangle with twist following part of a sine curve function //Linear Extrude with Twist as an interpolated function // This module does not need to be modified, // - unless default parameters want to be changed // - or additional parameters want to be forwarded (e.g. slices,...) module linear_extrude_ft(height=1,isteps=20,scale=1){ //union of piecewise generated extrudes union(){\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"8c1bb3e6-42c6-4204-a6d4-4b2c544940ef":{"__data__":"{\"id_\":\"8c1bb3e6-42c6-4204-a6d4-4b2c544940ef\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"9a95cfa2-2a96-4372-bb7d-adfa683e8178\",\"metadata\":{},\"hash\":\"lIp7CJYuKAWAPDN4uKrUBnAiuCDMo9pYwG0Az1b/LUA=\"},\"NEXT\":{\"nodeId\":\"868ee473-c4c8-43b7-b78f-f05e0c7d18a9\",\"metadata\":{},\"hash\":\"CHRLCoxWfoTgRMPn7S3PEMXASa0wyAU9QqEZePQrbYQ=\"}},\"hash\":\"miY83ApRS5cwhspg11KM2waIAx4pxv/GC+jecqkE2M0=\",\"text\":\"//union of piecewise generated extrudes union(){ for(i = [ 0: 1: isteps-1]){ //each new piece needs to be adjusted for height translate([0,0,i*height/isteps]) linear_extrude( height=height/isteps, twist=f_left((i+1)/isteps)-f_left((i)/isteps), scale=(1-(1-scale)*(i+1)/isteps)/(1-(1-scale)*i/isteps) ) //Rotate to next start point rotate([0,0,-f_left(i/isteps)]) //Scale to end of last piece size scale(1-(1-scale)*(i/isteps)) obj2D_left(); } } } // This function defines the twist function // - Function name must not be modified // - Modify the contents/return value to define the function function f_left(x) = let(twist=90,span=180,start=0) twist*sin(x*span+start); // This module defines the base 2D object to be extruded // - Function name must not be modified // - Modify the contents to define the base 2D object module obj2D_left(){ translate([-4,-3]) square([12,9]); } //Left rendered object demonstrating the interpolation steps translate([-20,0]) linear_extrude_ft(height=30,isteps=5); linear_extrude_ft(height=30); //Right rendered object demonstrating the scale inclusion translate([25,0]) linear_extrude_ft(height=30,scale=3); Linear Extrude with Twist and Scale as interpolated functions //Linear Extrude with Twist and Scale as interpolated functions // This module does not need to be modified, // - unless default parameters want to be changed // - or additional parameters want to be forwarded module linear_extrude_ftfs(height=1,isteps=20,slices=0){ //union of piecewise generated extrudes union(){ for(i=[0:1:isteps-1]){ translate([0,0,i*height/isteps]) linear_extrude( height=height/isteps,\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"868ee473-c4c8-43b7-b78f-f05e0c7d18a9":{"__data__":"{\"id_\":\"868ee473-c4c8-43b7-b78f-f05e0c7d18a9\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"8c1bb3e6-42c6-4204-a6d4-4b2c544940ef\",\"metadata\":{},\"hash\":\"miY83ApRS5cwhspg11KM2waIAx4pxv/GC+jecqkE2M0=\"},\"NEXT\":{\"nodeId\":\"668b71d6-30be-4f9e-9ba7-8446d36ab896\",\"metadata\":{},\"hash\":\"3JezCG9Bjk6nsOYlUL27RP7qPA71rf2Cm5uPIVwQCi0=\"}},\"hash\":\"CHRLCoxWfoTgRMPn7S3PEMXASa0wyAU9QqEZePQrbYQ=\",\"text\":\"linear_extrude( height=height/isteps, twist=leftfs_ftw((i+1)/isteps)-leftfs_ftw(i/isteps), scale=leftfs_fsc((i+1)/isteps)/leftfs_fsc(i/isteps), slices=slices ) rotate([0,0,-leftfs_ftw(i/isteps)]) scale(leftfs_fsc(i/isteps)) obj2D_leftfs(); } } } // This function defines the scale function // - Function name must not be modified // - Modify the contents/return value to define the function function leftfs_fsc(x)= let(scale=3,span=140,start=20) scale*sin(x*span+start); // This function defines the twist function // - Function name must not be modified // - Modify the contents/return value to define the function function leftfs_ftw(x)= let(twist=30,span=360,start=0) twist*sin(x*span+start); // This module defines the base 2D object to be extruded // - Function name must not be modified // - Modify the contents to define the base 2D object module obj2D_leftfs(){ square([12,9]); } //Left rendered objects demonstrating the steps effect translate([0,-50,-60]) rotate([0,0,90]) linear_extrude_ftfs(height=50,isteps=3); translate([0,-50,0]) linear_extrude_ftfs(height=50,isteps=3); //Center rendered objects demonstrating the slices effect translate([0,0,-60]) rotate([0,0,90]) linear_extrude_ftfs(height=50,isteps=3,slices=20); linear_extrude_ftfs(height=50,isteps=3,slices=20); //Right rendered objects with default parameters translate([0,50,-60]) rotate([0,0,90]) linear_extrude_ftfs(height=50); translate([0,50,0]) linear_extrude_ftfs(height=50); Rocket Example Linear Extrude of a rectangle with twist and scale following part of a sine curve function A rocket using rotate_extrude()\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"668b71d6-30be-4f9e-9ba7-8446d36ab896":{"__data__":"{\"id_\":\"668b71d6-30be-4f9e-9ba7-8446d36ab896\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"868ee473-c4c8-43b7-b78f-f05e0c7d18a9\",\"metadata\":{},\"hash\":\"CHRLCoxWfoTgRMPn7S3PEMXASa0wyAU9QqEZePQrbYQ=\"},\"NEXT\":{\"nodeId\":\"a657f7b9-75d5-4a73-aca2-8666848dc248\",\"metadata\":{},\"hash\":\"k58Ce0o55e6REiKfkl+OICZEqTl5UqLvh5Fxrz5+TPc=\"}},\"hash\":\"3JezCG9Bjk6nsOYlUL27RP7qPA71rf2Cm5uPIVwQCi0=\",\"text\":\"sine curve function A rocket using rotate_extrude() Horns, by translation and twisting. // increase the visual detail $fn = 100; // the main body : // a cylinder rocket_d = 30;                 // 3 cm wide rocket_r = rocket_d / 2; rocket_h = 100;             // 10 cm tall cylinder(d = rocket_d, h = rocket_h); // the head : // a cone head_d = 40;                  // 4 cm wide head_r = head_d / 2; head_h = 40;                  // 4 cm tall // prepare a triangle tri_base = head_r; tri_height = head_h; tri_points = [[0,             0], [tri_base,     0], [0,    tri_height]]; // rotation around X-axis and then 360° around Z-axis // put it on top of rocket's body translate([0,0,rocket_h]) rotate_extrude(angle = 360) polygon(tri_points); // the wings : // 3x triangles wing_w = 2;                    // 2 mm thick many = 3;                    // 3x wings wing_l = 40;                // length wing_h = 40;                // height wing_points = [[0,0],[wing_l,0],[0,wing_h]]; module wing() { // let it a bit inside the main body in_by = 1;                // 1 mm // set it up on the rocket's perimeter translate([rocket_r - in_by,0,0]) // set it upright by rotating around X-axis rotate([90,0,0]) // set some width and center it linear_extrude(height = wing_w,center = true) // make a triangle polygon(wing_points); } for (i = [0: many - 1]) rotate([0, 0, 360 / many * i]) wing(); Horns // The idea is to twist a translated circle: // - /* linear_extrude(height = 10, twist = 360, scale = 0) translate([1,0]) circle(r = 1); */\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"a657f7b9-75d5-4a73-aca2-8666848dc248":{"__data__":"{\"id_\":\"a657f7b9-75d5-4a73-aca2-8666848dc248\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"668b71d6-30be-4f9e-9ba7-8446d36ab896\",\"metadata\":{},\"hash\":\"3JezCG9Bjk6nsOYlUL27RP7qPA71rf2Cm5uPIVwQCi0=\"},\"NEXT\":{\"nodeId\":\"5685a9d7-bff4-4f14-b6b1-3a189685504d\",\"metadata\":{},\"hash\":\"ttcqv4cOE9LoNv+2DJ/d0wQ/AOUrUUo440nQTh0NtO8=\"}},\"hash\":\"k58Ce0o55e6REiKfkl+OICZEqTl5UqLvh5Fxrz5+TPc=\",\"text\":\"translate([1,0]) circle(r = 1); */ module horn(height = 10, radius = 3, twist = 720, $fn = 50) { // A centered circle translated by 1xR and // twisted by 360° degrees, covers a 2x(2xR) space. // - radius = radius/4; // De-translate. // - translate([-radius,0]) // The actual code. // - linear_extrude(height = height, twist = twist, scale=0, $fn = $fn) translate([radius,0]) circle(r=radius); } translate([3,0]) mirror() horn(); translate([-3,0]) horn(); Strandbeest See the Strandbeest example here. Previous Other 2D formats Next Paths Command line usage OpenSCAD can not only be used as a GUI, but also handles command line arguments. Its usage line says: OpenSCAD 2019.05 has these options: Usage: openscad [options] file.scad Allowed options: -o [ --o ] arg               output specified file instead of running the GUI, the file extension specifies the type: stl, off, amf, 3mf, csg, dxf, svg, png, echo, ast, term, nef3, nefdbg  -D [ --D ] arg               var=val -pre-define variables -p [ --p ] arg               customizer parameter file -P [ --P ] arg               customizer parameter set -h [ --help ]                print this help message and exit -v [ --version ]             print the version --info                       print information about the build process  --camera arg                 camera parameters when exporting png: =translate_x,y,z,rot_x,y,z,dist or =eye_x,y,z,center_x,y,z --autocenter                 adjust camera to look at object's center --viewall                    adjust camera to fit object --imgsize arg                =width,height of exported png --render arg                 for full geometry evaluation when exporting png --preview arg                [=throwntogether] -for ThrownTogether preview png --view arg                   =view options: axes | crosshairs | edges |\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"5685a9d7-bff4-4f14-b6b1-3a189685504d":{"__data__":"{\"id_\":\"5685a9d7-bff4-4f14-b6b1-3a189685504d\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"a657f7b9-75d5-4a73-aca2-8666848dc248\",\"metadata\":{},\"hash\":\"k58Ce0o55e6REiKfkl+OICZEqTl5UqLvh5Fxrz5+TPc=\"},\"NEXT\":{\"nodeId\":\"559a2d33-0593-4621-bab8-9be5c7b4430b\",\"metadata\":{},\"hash\":\"aCtP1TZCCNJDDygF83gKpqhC+tA5qb2PZBhyYkrTAoc=\"}},\"hash\":\"ttcqv4cOE9LoNv+2DJ/d0wQ/AOUrUUo440nQTh0NtO8=\",\"text\":\"png --view arg                   =view options: axes | crosshairs | edges | scales | wireframe --projection arg             =(o)rtho or (p)erspective when exporting png --csglimit arg               =n -stop rendering at n CSG elements when exporting png --colorscheme arg            =colorscheme: *Cornfield | Metallic | Sunset | Starnight | BeforeDawn | Nature | DeepOcean | Solarized | Tomorrow | Tomorrow 2 | Tomorrow Night | Monotone  -d [ --d ] arg               deps_file -generate a dependency file for make -m [ --m ] arg               make_cmd -runs make_cmd file if file is missing -q [ --quiet ]               quiet mode (don't print anything *except* errors) --hardwarnings               Stop on the first warning --check-parameters arg       =true/false, configure the parameter check for user modules and functions --check-parameter-ranges arg =true/false, configure the parameter range check for builtin modules --debug arg                  special debug info -s [ --s ] arg               stl_file deprecated, use -o -x [ --x ] arg               dxf_file deprecated, use -o OpenSCAD 2015.03-1 has these options: openscad     [ -o output_file [ -d deps_file ] ]\\\\ [ -m make_command ] [ -D var=val [..] ] \\\\ [ --help ] print this help message and exit \\\\ [ --version ] [ --info ] \\\\ [ --camera=translatex,y,z,rotx,y,z,dist | \\\\ --camera=eyex,y,z,centerx,y,z ] \\\\ [ --autocenter ] \\\\ [ --viewall ] \\\\ [ --imgsize=width,height ] [ --projection=(o)rtho|(p)ersp] \\\\ [ --render | --preview[=throwntogether] ] \\\\ [ --colorscheme=[Cornfield|Sunset|Metallic|Starnight|BeforeDawn|Nature|DeepOcean] ] \\\\ [ --csglimit=num ]\\\\ filename OpenSCAD 2014.03+ has these options: openscad     [ -o output_file [ -d deps_file ] ]\\\\ [ -m make_command ] [ -D var=val [..] ] \\\\\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"559a2d33-0593-4621-bab8-9be5c7b4430b":{"__data__":"{\"id_\":\"559a2d33-0593-4621-bab8-9be5c7b4430b\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"5685a9d7-bff4-4f14-b6b1-3a189685504d\",\"metadata\":{},\"hash\":\"ttcqv4cOE9LoNv+2DJ/d0wQ/AOUrUUo440nQTh0NtO8=\"},\"NEXT\":{\"nodeId\":\"ffed19da-edca-4848-8ed5-c9709e97d141\",\"metadata\":{},\"hash\":\"byNdBlFYuXFYOaJTjm8v6+OsydzRBC3g/nr24VXTclY=\"}},\"hash\":\"aCtP1TZCCNJDDygF83gKpqhC+tA5qb2PZBhyYkrTAoc=\",\"text\":\"[ -m make_command ] [ -D var=val [..] ] \\\\ [ --version ] [ --info ] \\\\ [ --camera=translatex,y,z,rotx,y,z,dist | \\\\ --camera=eyex,y,z,centerx,y,z ] \\\\ [ --imgsize=width,height ] [ --projection=(o)rtho|(p)ersp] \\\\ [ --render | --preview[=throwntogether] ] \\\\ [ --csglimit=num ] \\\\ filename Openscad 2013.05 had these options: openscad     [ -o output_file [ -d deps_file ] ]\\\\ [ -m make_command ] [ -D var=val [..] ] [ --render ] \\\\ [ --camera=translatex,y,z,rotx,y,z,dist | \\\\ --camera=eyex,y,z,centerx,y,z ] \\\\ [ --imgsize=width,height ] [ --projection=(o)rtho|(p)ersp] \\\\ filename Earlier releases had only these: openscad [ -o output_file [ -d deps_file ] ] \\\\ [ -m make_command ] [ -D var=val [..] ] filename The usage on OpenSCAD version 2011.09.30 (now deprecated) was: openscad [ { -s stl_file | -o off_file | -x dxf_file } [ -d deps_file ] ]\\\\ [ -m make_command ] [ -D var=val [..] ] filename Export options When called with the -o option, OpenSCAD does not start the GUI, but executes the given file and exports to the output_file in a format depending on the extension (.stl / .off / .dxf, .csg). Some versions use -s/-d/-o to determine the output file format instead; check with \\\"openscad --help\\\". If the option -d is given in addition to an export command, all files accessed while building the mesh are written in the argument of -d in the syntax of a Makefile. For at least 2015.03-2+, specifying the extension .echo causes openscad to produce a text file containing error messages and the output of all echo() calls in filename as they would appear in the console window visible in the GUI.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"ffed19da-edca-4848-8ed5-c9709e97d141":{"__data__":"{\"id_\":\"ffed19da-edca-4848-8ed5-c9709e97d141\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"559a2d33-0593-4621-bab8-9be5c7b4430b\",\"metadata\":{},\"hash\":\"aCtP1TZCCNJDDygF83gKpqhC+tA5qb2PZBhyYkrTAoc=\"},\"NEXT\":{\"nodeId\":\"2d2bbf15-621b-4ced-b7db-affec964805e\",\"metadata\":{},\"hash\":\"q4nGkIpysxvCSDjpQbZEMDnY+hhWeWCvnBlBlJkqMok=\"}},\"hash\":\"byNdBlFYuXFYOaJTjm8v6+OsydzRBC3g/nr24VXTclY=\",\"text\":\"all echo() calls in filename as they would appear in the console window visible in the GUI. Multiple output files are not supported, so using this option you cannot also obtain the model that would have normally been generated. Camera and image output For 2013.05+, the option to output a .png image was added. There are two types of cameras available for the generation of images. The first camera type is a 'gimbal' camera that uses Euler angles, translation, and a camera distance, like OpenSCAD's GUI viewport display at the bottom of the OpenSCAD window. The second camera type is a 'vector' camera, with an 'eye' camera location vector and a 'lookat' center vector. --imgsize x,y chooses the .png dimensions and --projection chooses orthogonal or perspective, as in the GUI. By default, cmdline .png output uses Preview mode (f5) with OpenCSG. For some situations it may be desirable to output the full render, with CGAL. This is done by adding '--render' as an option. Constants In order to pre-define variables, use the -D option. It can be given repeatedly. Each occurrence of -D must be followed by an assignment. Unlike normal OpenSCAD assignments, these assignments don't define variables, but constants, which cannot be changed inside the program, and can thus be used to overwrite values defined in the program at export time. If you want to assign the -D variable to another variable, the -D variable MUST be initialized in the main .scad program param1=17;       // must be initialized val=param1;      // param1 passed via -D on cmd-line echo(val,param1); // outputs 17,17 without the first line, val would be undefined. The right hand sides can be arbitrary OpenSCAD expressions, including mathematical operations and strings. Be aware that your shell (bash, cmd, etc.) parses the arguments before passing them to openscad, therefore you need to properly quote or escape arguments with special characters like spaces or quotation marks. For example to assign a string production to a quality parameter one has to ensure the \\\" characters OpenSCAD expects aren't stripped by the shell. In bash one could write:\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2d2bbf15-621b-4ced-b7db-affec964805e":{"__data__":"{\"id_\":\"2d2bbf15-621b-4ced-b7db-affec964805e\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"ffed19da-edca-4848-8ed5-c9709e97d141\",\"metadata\":{},\"hash\":\"byNdBlFYuXFYOaJTjm8v6+OsydzRBC3g/nr24VXTclY=\"},\"NEXT\":{\"nodeId\":\"d0623ae5-7f04-4d35-8e28-0ca7becf1a19\",\"metadata\":{},\"hash\":\"ivaQ4+XUHfTcJpkmmBXqbjvzkCmIgFIUYwRQR90bjTg=\"}},\"hash\":\"q4nGkIpysxvCSDjpQbZEMDnY+hhWeWCvnBlBlJkqMok=\",\"text\":\"In bash one could write: openscad -o my_model_production.stl -D 'quality=\\\"production\\\"' my_model.scad or from the Windows prompt: openscad.com -o my_model_production.stl -D \\\"quality=\\\"\\\"production\\\"\\\"\\\" my_model.scad or you may need to escape the inner quotes instead: openscad -o my_model_production.stl -D \\\"quality=\\\\\\\"production\\\\\\\"\\\" my_model.scad Note that this sort of double-escaping isn't necessary when executing OpenSCAD from another process that isn't using a shell, because each argument is passed separately. For example a Java application might start a process like so: pb = new ProcessBuilder(\\\"/usr/bin/openscad\\\", \\\"-o\\\", \\\"my_model_production.stl\\\", \\\"-D\\\", \\\"quality=\\\\\\\"production\\\\\\\"\\\", \\\"my_model.scad\\\"); Command to build required files In a complex build process, some missing files required by an OpenSCAD file can be generated if they are defined in a Makefile. If OpenSCAD is given the option -m make, it starts make file the first time it tries to access a missing file. Processing all .scad files in a folder Example to convert all the .scad in a folder into .stl: In a folder with .scad files, make a .bat file with text: FOR %%f in (*.scad)  DO openscad -o \\\"%%~nf.stl\\\" \\\"%%f\\\" If it closes without processing, check to set the PATH by adding openscad directory to: Start - Settings - Control Panel - System - Advanced tab - Environment Variables - System Variables, select Path, then click Edit. Add the openscad directory to the list Makefile example The -d and -m options only make sense together. (-m without -d would not consider modified dependencies when building exports, -d without -m would require the files to be already built for the first run that generates the dependencies.) Here is an example of a basic Makefile that creates an .stl file from an .scad file of the same name: # explicit wildcard expansion suppresses errors when no files are found include $(wildcard *.deps) %.stl: %.scad openscad -m make -o $@ -d $@.deps $<\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d0623ae5-7f04-4d35-8e28-0ca7becf1a19":{"__data__":"{\"id_\":\"d0623ae5-7f04-4d35-8e28-0ca7becf1a19\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"2d2bbf15-621b-4ced-b7db-affec964805e\",\"metadata\":{},\"hash\":\"q4nGkIpysxvCSDjpQbZEMDnY+hhWeWCvnBlBlJkqMok=\"},\"NEXT\":{\"nodeId\":\"7391a281-eb31-4fc7-ad19-8e26035f5c21\",\"metadata\":{},\"hash\":\"VkIlfkwdstiMOa0pNqA5E0pC6A7dBAP3ooFec80bXTw=\"}},\"hash\":\"ivaQ4+XUHfTcJpkmmBXqbjvzkCmIgFIUYwRQR90bjTg=\",\"text\":\"openscad -m make -o $@ -d $@.deps $< When make my_example.stl is run for the first time, it finds no .deps files, and must depend on my_example.scad. Because my_example.stl is not yet preset, it gets created unconditionally. If OpenSCAD finds missing files, it calls make to build them, and it lists all used files in my_example.stl.deps. When make my_example.stl is called subsequently, it finds and includes my_example.stl.deps and check if any of the files listed there, including my_example.scad, changed since my_example.stl was built, based on their time stamps. Only if that is the case, it builds my_example.stl again. Automatic targets When building similar .stl files from a single .scad file, there is a way to automate that too: # match \\\"module foobar() { // `make` me\\\" TARGETS=$(shell sed '/^module [a-z0-9_-]*().*make..\\\\?me.*$$/!d;s/module //;s/().*/.stl/' base.scad) all: ${TARGETS} # auto-generated .scad files with .deps make make re-build always. keeping the # scad files solves this problem. (explanations are welcome.) .SECONDARY: $(shell echo \\\"${TARGETS}\\\" | sed 's/\\\\.stl/.scad/g') # explicit wildcard expansion suppresses errors when no files are found include $(wildcard *.deps) %.scad: echo -ne 'use <base.scad>\\\\n$*();' > $@ %.stl: %.scad openscad -m make -o $@ -d $@.deps $< All objects that are supposed to be exported automatically have to be defined in base.scad in an own module with their future file name (without the \\\".stl\\\"), and have a comment like \\\"// make me\\\" in the line of the module definition. The \\\"TARGETS=\\\" line picks these out of the base file and creates the file names. These are built when make all (or make, for short) is called.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"7391a281-eb31-4fc7-ad19-8e26035f5c21":{"__data__":"{\"id_\":\"7391a281-eb31-4fc7-ad19-8e26035f5c21\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"d0623ae5-7f04-4d35-8e28-0ca7becf1a19\",\"metadata\":{},\"hash\":\"ivaQ4+XUHfTcJpkmmBXqbjvzkCmIgFIUYwRQR90bjTg=\"},\"NEXT\":{\"nodeId\":\"b96da8f0-0cc1-4acd-86fe-2fa1964a9c2a\",\"metadata\":{},\"hash\":\"J6EnRvVbz7Dum9o8vvQBK7iqiC2Ry6cfZmyMucotOqQ=\"}},\"hash\":\"VkIlfkwdstiMOa0pNqA5E0pC6A7dBAP3ooFec80bXTw=\",\"text\":\"These are built when make all (or make, for short) is called. As the convention from the last example is to create the .stl files from .scad files of the same base name, for each of these files, an .scad file must be generated. This is done in the \\\"%.scad:\\\" paragraph; my_example.scad is a simple OpenSCAD file: use <base.scad> my_example(); The \\\".SECONDARY\\\" line is there to keep make from deleting the generated .scad files. Its presence helps determine which files no longer need to be rebuilt; please post ideas about what exactly goes wrong there (or how to fix it better) on the talk page! Windows notes On Windows, openscad.com should be called from the command line as a wrapper for openscad.exe. This is because Openscad uses the 'devenv' solution to the Command-Line/GUI output issue. Typing 'openscad' at the cmd.exe prompt calls the .com program wrapper by default. MacOS notes On MacOS the binary is normally hidden inside the App folder. If OpenSCAD is installed in the global Applications folder, it can be called from command line like in the following example that just shows the OpenSCAD version: macbook:/$ /Applications/OpenSCAD.app/Contents/MacOS/OpenSCAD -v OpenSCAD version 2013.06 Alternatively, you may create a symbolic link to the binary to make calls from the command line easier: macbook:/$ sudo ln -sf /Applications/OpenSCAD.app/Contents/MacOS/OpenSCAD /usr/local/bin/openscad Now you can call openscad directly without having to type in the full path. macbook:/$ openscad -v OpenSCAD version 2015.03-3 On some versions of MacOS, you might get the following error when attempting to run openscad via that link: This application failed to start because it could not find or load the Qt platform plugin \\\"cocoa\\\". Reinstalling the application may fix this problem. Abort trap: 6 You can fix this by creating a wrapper script to invoke the executable directly: sudo rm -f /usr/local/bin/openscad echo '#!/bin/sh' > test echo '/Applications/OpenSCAD.app/Contents/MacOS/OpenSCAD $*' >> test\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b96da8f0-0cc1-4acd-86fe-2fa1964a9c2a":{"__data__":"{\"id_\":\"b96da8f0-0cc1-4acd-86fe-2fa1964a9c2a\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"7391a281-eb31-4fc7-ad19-8e26035f5c21\",\"metadata\":{},\"hash\":\"VkIlfkwdstiMOa0pNqA5E0pC6A7dBAP3ooFec80bXTw=\"},\"NEXT\":{\"nodeId\":\"4eaee97a-e302-4f0c-9224-07c7949fe129\",\"metadata\":{},\"hash\":\"JVtdF8ise2wM0gvVU3L6OQelhHGoZLTYDsnyt9RblkM=\"}},\"hash\":\"J6EnRvVbz7Dum9o8vvQBK7iqiC2Ry6cfZmyMucotOqQ=\",\"text\":\"echo '/Applications/OpenSCAD.app/Contents/MacOS/OpenSCAD $*' >> test chmod +x test ; sudo mv test /usr/local/bin/openscad The Dodecahedron as rendered from the example. Chapter 3 -- Commented Example Projects OpenSCAD User Manual Dodecahedron //create a dodecahedron by intersecting 6 boxes module dodecahedron(height) { scale([height,height,height]) //scale by height parameter { intersection(){ //make a cube cube([2,2,1], center = true); intersection_for(i=[0:4]) //loop i from 0 to 4, and intersect results { //make a cube, rotate it 116.565 degrees around the X axis, //then 72*i around the Z axis rotate([0,0,72*i]) rotate([116.565,0,0]) cube([2,2,1], center = true); } } } } //create 3 stacked dodecahedra //call the module with a height of 1 and move up 2 translate([0,0,2])dodecahedron(1); //call the module with a height of 2 dodecahedron(2); //call the module with a height of 4 and move down 4 translate([0,0,-4])dodecahedron(4); Icosahedron An icosahedron can be created from three orthogonal golden-ratio rectangles inside a hull() operation, where the golden ratio is . phi=0.5*(sqrt(5)+1); // golden ratio // create an icosahedron by intersecting 3 orthogonal golden-ratio rectangles module icosahedron(edge_length) { st=0.0001;  // microscopic sheet thickness hull() { cube([edge_length*phi, edge_length, st], true); rotate([90,90,0]) cube([edge_length*phi, edge_length, st], true); rotate([90,0,90]) cube([edge_length*phi, edge_length, st], true); } } // display the 3 internal sheets alongside the icosahedron edge=10;\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"4eaee97a-e302-4f0c-9224-07c7949fe129":{"__data__":"{\"id_\":\"4eaee97a-e302-4f0c-9224-07c7949fe129\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"b96da8f0-0cc1-4acd-86fe-2fa1964a9c2a\",\"metadata\":{},\"hash\":\"J6EnRvVbz7Dum9o8vvQBK7iqiC2Ry6cfZmyMucotOqQ=\"},\"NEXT\":{\"nodeId\":\"2b2ec95b-6b3d-4d1d-9fea-badbdcdecaa5\",\"metadata\":{},\"hash\":\"8l0NHu4fTXN4uPN30mnvzpRL5dSyzlhDDJXPcCBaDC4=\"}},\"hash\":\"JVtdF8ise2wM0gvVU3L6OQelhHGoZLTYDsnyt9RblkM=\",\"text\":\"// display the 3 internal sheets alongside the icosahedron edge=10; translate([-20,0,0]) union() { cube([edge*phi, edge, 0.01], true); rotate([90,90,0]) cube([edge*phi, edge, 0.01], true); rotate([90,0,90]) cube([edge*phi, edge, 0.01], true); } icosahedron(edge); The icosahedron and its internal structure as rendered from the example. The half-pyramid as rendered from the example. This icosahedron renders in an edge-up orientation. Rotating this icosahedron by  about the Y-axis results in a vertex-up orientation. Rotating by  about the X-axis results in a face-up orientation. The edge length  is related to the inner diameter  (distance between opposite faces) by . Half-pyramid An upside-down half-pyramid is a useful shape for 3D printing a support for an overhang protruding from a vertical wall. With sloping sides no steeper than 45°, no removable support structure needs to be printed. While a half-pyramid can be made with a 4-sided cone (using the cylinder primitive) and subtracting a cube from half of it, the shape can be easily made in one operation by a scaled linear extrude of a rectangle having the middle of one edge on the origin. // Create a half-pyramid from a single linear extrusion module halfpyramid(base, height) { linear_extrude(height, scale=0.01) translate([-base/2, 0, 0]) square([base, base/2]); } halfpyramid(20, 10); Bounding Box Bounding Box applied to an Ellipsoid // Rather kludgy module for determining bounding box from intersecting projections module BoundingBox() { intersection() { translate([0,0,0]) linear_extrude(height = 1000, center = true, convexity = 10, twist = 0) projection(cut=false) intersection() { rotate([0,90,0])\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2b2ec95b-6b3d-4d1d-9fea-badbdcdecaa5":{"__data__":"{\"id_\":\"2b2ec95b-6b3d-4d1d-9fea-badbdcdecaa5\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"4eaee97a-e302-4f0c-9224-07c7949fe129\",\"metadata\":{},\"hash\":\"JVtdF8ise2wM0gvVU3L6OQelhHGoZLTYDsnyt9RblkM=\"},\"NEXT\":{\"nodeId\":\"58c21190-526b-4428-97d4-c6271cf97a96\",\"metadata\":{},\"hash\":\"HsTeYpOB3KNDqlDR6FTMcL6KsBG+XduVBYQEnXQYVwo=\"}},\"hash\":\"8l0NHu4fTXN4uPN30mnvzpRL5dSyzlhDDJXPcCBaDC4=\",\"text\":\"projection(cut=false) intersection() { rotate([0,90,0]) linear_extrude(height = 1000, center = true, convexity = 10, twist = 0) projection(cut=false) rotate([0,-90,0]) children(0); rotate([90,0,0]) linear_extrude(height = 1000, center = true, convexity = 10, twist = 0) projection(cut=false) rotate([-90,0,0]) children(0); } rotate([90,0,0]) linear_extrude(height = 1000, center = true, convexity = 10, twist = 0) projection(cut=false) rotate([-90,0,0]) intersection() { rotate([0,90,0]) linear_extrude(height = 1000, center = true, convexity = 10, twist = 0) projection(cut=false) rotate([0,-90,0]) children(0); rotate([0,0,0]) linear_extrude(height = 1000, center = true, convexity = 10, twist = 0) projection(cut=false) rotate([0,0,0]) children(0); } } } // Test module on ellipsoid translate([0,0,40]) scale([1,2,3]) sphere(r=5); BoundingBox() scale([1,2,3]) sphere(r=5); Linear Extrude extended use examples Linear Extrude with Scale as an interpolated function Example Linear Extrude of a rectangle with scale following part of a sine curve function //Linear Extrude with Scale as an interpolated function // This module does not need to be modified, // - unless default parameters want to be changed // - or additional parameters want to be forwarded (e.g. slices,...) module linear_extrude_fs(height=1,isteps=20,twist=0){ //union of piecewise generated extrudes union(){ for(i = [ 0: 1: isteps-1]){ //each new piece needs to be adjusted for height translate([0,0,i*height/isteps]) linear_extrude( height=height/isteps,\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"58c21190-526b-4428-97d4-c6271cf97a96":{"__data__":"{\"id_\":\"58c21190-526b-4428-97d4-c6271cf97a96\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"2b2ec95b-6b3d-4d1d-9fea-badbdcdecaa5\",\"metadata\":{},\"hash\":\"8l0NHu4fTXN4uPN30mnvzpRL5dSyzlhDDJXPcCBaDC4=\"},\"NEXT\":{\"nodeId\":\"84c31354-45a3-4ab6-8a0a-0e028ae547c7\",\"metadata\":{},\"hash\":\"rypGY0sOUht1yDN38b9opHbOn0jP493zHDCsmC2LuZk=\"}},\"hash\":\"HsTeYpOB3KNDqlDR6FTMcL6KsBG+XduVBYQEnXQYVwo=\",\"text\":\"linear_extrude( height=height/isteps, twist=twist/isteps, scale=f_lefs((i+1)/isteps)/f_lefs(i/isteps) ) // if a twist constant is defined it is split into pieces rotate([0,0,-(i/isteps)*twist]) // each new piece starts where the last ended scale(f_lefs(i/isteps)) obj2D_lefs(); } } } // This function defines the scale function // - Function name must not be modified // - Modify the contents/return value to define the function function f_lefs(x) = let(span=150,start=20,normpos=45) sin(x*span+start)/sin(normpos); // This module defines the base 2D object to be extruded // - Function name must not be modified // - Modify the contents to define the base 2D object module obj2D_lefs(){ translate([-4,-3]) square([9,12]); } //Top rendered object demonstrating the interpolation steps translate([0,0,25]) linear_extrude_fs(height=20,isteps=4); linear_extrude_fs(height=20); //Bottom rendered object demonstrating the inclusion of a twist translate([0,0,-25]) linear_extrude_fs(height=20,twist=90,isteps=30); Linear Extrude with Twist as an interpolated function Example Linear Extrude of a rectangle with twist following part of a sine curve function //Linear Extrude with Twist as an interpolated function // This module does not need to be modified, // - unless default parameters want to be changed // - or additional parameters want to be forwarded (e.g. slices,...) module linear_extrude_ft(height=1,isteps=20,scale=1){ //union of piecewise generated extrudes union(){ for(i = [ 0: 1: isteps-1]){ //each new piece needs to be adjusted for height translate([0,0,i*height/isteps]) linear_extrude( height=height/isteps, twist=f_left((i+1)/isteps)-f_left((i)/isteps),\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"84c31354-45a3-4ab6-8a0a-0e028ae547c7":{"__data__":"{\"id_\":\"84c31354-45a3-4ab6-8a0a-0e028ae547c7\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"58c21190-526b-4428-97d4-c6271cf97a96\",\"metadata\":{},\"hash\":\"HsTeYpOB3KNDqlDR6FTMcL6KsBG+XduVBYQEnXQYVwo=\"},\"NEXT\":{\"nodeId\":\"9db81337-f230-45ea-b603-145a55b0d137\",\"metadata\":{},\"hash\":\"I6GNZZOHAOBDLVE/yuwikz7/UfpFvuQNpOViywcF2zo=\"}},\"hash\":\"rypGY0sOUht1yDN38b9opHbOn0jP493zHDCsmC2LuZk=\",\"text\":\"twist=f_left((i+1)/isteps)-f_left((i)/isteps), scale=(1-(1-scale)*(i+1)/isteps)/(1-(1-scale)*i/isteps) ) //Rotate to next start point rotate([0,0,-f_left(i/isteps)]) //Scale to end of last piece size scale(1-(1-scale)*(i/isteps)) obj2D_left(); } } } // This function defines the twist function // - Function name must not be modified // - Modify the contents/return value to define the function function f_left(x) = let(twist=90,span=180,start=0) twist*sin(x*span+start); // This module defines the base 2D object to be extruded // - Function name must not be modified // - Modify the contents to define the base 2D object module obj2D_left(){ translate([-4,-3]) square([12,9]); } //Left rendered object demonstrating the interpolation steps translate([-20,0]) linear_extrude_ft(height=30,isteps=5); linear_extrude_ft(height=30); //Right rendered object demonstrating the scale inclusion translate([25,0]) linear_extrude_ft(height=30,scale=3); Linear Extrude with Twist and Scale as interpolated functions //Linear Extrude with Twist and Scale as interpolated functions // This module does not need to be modified, // - unless default parameters want to be changed // - or additional parameters want to be forwarded module linear_extrude_ftfs(height=1,isteps=20,slices=0){ //union of piecewise generated extrudes union(){ for(i=[0:1:isteps-1]){ translate([0,0,i*height/isteps]) linear_extrude( height=height/isteps, twist=leftfs_ftw((i+1)/isteps)-leftfs_ftw(i/isteps), scale=leftfs_fsc((i+1)/isteps)/leftfs_fsc(i/isteps), slices=slices ) rotate([0,0,-leftfs_ftw(i/isteps)]) scale(leftfs_fsc(i/isteps))\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"9db81337-f230-45ea-b603-145a55b0d137":{"__data__":"{\"id_\":\"9db81337-f230-45ea-b603-145a55b0d137\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"84c31354-45a3-4ab6-8a0a-0e028ae547c7\",\"metadata\":{},\"hash\":\"rypGY0sOUht1yDN38b9opHbOn0jP493zHDCsmC2LuZk=\"},\"NEXT\":{\"nodeId\":\"a071a378-591e-4136-9ded-42aed969c4ef\",\"metadata\":{},\"hash\":\"fTRFcEGRT7hY3kdAbhK5ezQqpc99zdmvy8jxaxrTBF0=\"}},\"hash\":\"I6GNZZOHAOBDLVE/yuwikz7/UfpFvuQNpOViywcF2zo=\",\"text\":\"scale(leftfs_fsc(i/isteps)) obj2D_leftfs(); } } } // This function defines the scale function // - Function name must not be modified // - Modify the contents/return value to define the function function leftfs_fsc(x)= let(scale=3,span=140,start=20) scale*sin(x*span+start); // This function defines the twist function // - Function name must not be modified // - Modify the contents/return value to define the function function leftfs_ftw(x)= let(twist=30,span=360,start=0) twist*sin(x*span+start); // This module defines the base 2D object to be extruded // - Function name must not be modified // - Modify the contents to define the base 2D object module obj2D_leftfs(){ square([12,9]); } //Left rendered objects demonstrating the steps effect translate([0,-50,-60]) rotate([0,0,90]) linear_extrude_ftfs(height=50,isteps=3); translate([0,-50,0]) linear_extrude_ftfs(height=50,isteps=3); //Center rendered objects demonstrating the slices effect translate([0,0,-60]) rotate([0,0,90]) linear_extrude_ftfs(height=50,isteps=3,slices=20); linear_extrude_ftfs(height=50,isteps=3,slices=20); //Right rendered objects with default parameters translate([0,50,-60]) rotate([0,0,90]) linear_extrude_ftfs(height=50); translate([0,50,0]) linear_extrude_ftfs(height=50); Rocket Example Linear Extrude of a rectangle with twist and scale following part of a sine curve function A rocket using rotate_extrude() Horns, by translation and twisting. // increase the visual detail $fn = 100; // the main body : // a cylinder rocket_d = 30;                 // 3 cm wide rocket_r = rocket_d / 2; rocket_h = 100;             // 10 cm tall cylinder(d = rocket_d, h = rocket_h); // the head :\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"a071a378-591e-4136-9ded-42aed969c4ef":{"__data__":"{\"id_\":\"a071a378-591e-4136-9ded-42aed969c4ef\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"9db81337-f230-45ea-b603-145a55b0d137\",\"metadata\":{},\"hash\":\"I6GNZZOHAOBDLVE/yuwikz7/UfpFvuQNpOViywcF2zo=\"},\"NEXT\":{\"nodeId\":\"003f9202-4a78-4ca0-b666-5c5bd725d507\",\"metadata\":{},\"hash\":\"gHp1uo/ED/oC6cdJt5J7XfNT4UlLJiNNty33wPG+SsQ=\"}},\"hash\":\"fTRFcEGRT7hY3kdAbhK5ezQqpc99zdmvy8jxaxrTBF0=\",\"text\":\"cylinder(d = rocket_d, h = rocket_h); // the head : // a cone head_d = 40;                  // 4 cm wide head_r = head_d / 2; head_h = 40;                  // 4 cm tall // prepare a triangle tri_base = head_r; tri_height = head_h; tri_points = [[0,             0], [tri_base,     0], [0,    tri_height]]; // rotation around X-axis and then 360° around Z-axis // put it on top of rocket's body translate([0,0,rocket_h]) rotate_extrude(angle = 360) polygon(tri_points); // the wings : // 3x triangles wing_w = 2;                    // 2 mm thick many = 3;                    // 3x wings wing_l = 40;                // length wing_h = 40;                // height wing_points = [[0,0],[wing_l,0],[0,wing_h]]; module wing() { // let it a bit inside the main body in_by = 1;                // 1 mm // set it up on the rocket's perimeter translate([rocket_r - in_by,0,0]) // set it upright by rotating around X-axis rotate([90,0,0]) // set some width and center it linear_extrude(height = wing_w,center = true) // make a triangle polygon(wing_points); } for (i = [0: many - 1]) rotate([0, 0, 360 / many * i]) wing(); Horns // The idea is to twist a translated circle: // - /* linear_extrude(height = 10, twist = 360, scale = 0) translate([1,0]) circle(r = 1); */ module horn(height = 10, radius = 3, twist = 720, $fn = 50) { // A centered circle translated by 1xR and // twisted by 360° degrees, covers a 2x(2xR) space. // - radius = radius/4; // De-translate. // - translate([-radius,0]) // The actual code.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"003f9202-4a78-4ca0-b666-5c5bd725d507":{"__data__":"{\"id_\":\"003f9202-4a78-4ca0-b666-5c5bd725d507\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"a071a378-591e-4136-9ded-42aed969c4ef\",\"metadata\":{},\"hash\":\"fTRFcEGRT7hY3kdAbhK5ezQqpc99zdmvy8jxaxrTBF0=\"},\"NEXT\":{\"nodeId\":\"047bf994-93f8-40f5-ab01-88ca1b469764\",\"metadata\":{},\"hash\":\"M9/1IIryrkB4f4uaBv/MnRNp0dH+0F/GTNZmXWdffv0=\"}},\"hash\":\"gHp1uo/ED/oC6cdJt5J7XfNT4UlLJiNNty33wPG+SsQ=\",\"text\":\"// De-translate. // - translate([-radius,0]) // The actual code. // - linear_extrude(height = height, twist = twist, scale=0, $fn = $fn) translate([radius,0]) circle(r=radius); } translate([3,0]) mirror() horn(); translate([-3,0]) horn(); Strandbeest See the Strandbeest example here. Previous Other 2D formats Next Paths Chapter 4 -- Export OpenSCAD User Manual Export After rendering with F6, the \\\"File --> Export\\\" menu can be used to export as STL, OFF, AMF, DXF, SVG, CSG OR PNG (image). Be sure to check the console window for error messages. STL, OFF and DXF are imported using import() CSG can be imported using include<> or loaded like an SCAD file PNG can be imported using surface() There are open pull requests for SVG and AMF, which require a bit more work/testing The file suffix is used to determine type STL Export To export your design, select \\\"Export as STL...\\\" from the \\\"File --> Export\\\" menu, then enter a filename in the ensuing dialog box. Don't forget to add the \\\".stl\\\" extension. Trouble shooting: After compile and render CGAL (F6), you may see that your design is simple: no. That's bad news. See line 8 in the following output from OpenSCAD 2010.02: Parsing design (AST generation)... Compiling design (CSG Tree generation)... Compilation finished. Rendering Polygon Mesh using CGAL... Number of vertices currently in CGAL cache: 732 Number of objects currently in CGAL cache: 12 Top level object is a 3D object: Simple:         no                <***************** Valid:         yes Vertices:       22 Halfedges:      70 Edges:          35 Halffacets:     32 Facets:         16 Volumes:         2 Total rendering time: 0 hours, 0 minutes, 0 seconds Rendering finished. When you try to export this to .STL, this message appears: Object isn't a valid 2-manifold!\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"047bf994-93f8-40f5-ab01-88ca1b469764":{"__data__":"{\"id_\":\"047bf994-93f8-40f5-ab01-88ca1b469764\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"003f9202-4a78-4ca0-b666-5c5bd725d507\",\"metadata\":{},\"hash\":\"gHp1uo/ED/oC6cdJt5J7XfNT4UlLJiNNty33wPG+SsQ=\"},\"NEXT\":{\"nodeId\":\"8424c1cd-cdb8-4b71-863e-4cb31241897c\",\"metadata\":{},\"hash\":\"rRlYAgO7bAy7VwWyVMCU+qlQoG1id/HS2FDeon1VT2M=\"}},\"hash\":\"M9/1IIryrkB4f4uaBv/MnRNp0dH+0F/GTNZmXWdffv0=\",\"text\":\"Object isn't a valid 2-manifold! Modify your design.. \\\"Manifold\\\" means that it is \\\"water tight\\\" and that there are no holes in the geometry. In a valid 2-manifold each edge must connect exactly two facets. That means that the program must be able to connect a face with an object. E.g. if you use a cube of height 10 to carve out something from a wider cube of height 10, it is not clear to which cube the top or the bottom belongs. So make the small extracting cube a bit \\\"longer\\\" (or \\\"shorter\\\"): difference() { // original cube (size = [2,2,2]); // object that carves out # translate ([0.5,0.5,-0.5]) { cube (size = [1,1,3]); } } Correct use of difference Here is a more tricky little example taken from the OpenSCAD Forum (retrieved 15:13, 22 March 2010 (UTC)): module example1() { cube([20, 20, 20]); translate([-20, -20, 0]) cube([20, 20, 20]); cube([50, 50, 5], center = true); } module example2() { cube([20.1, 20.1, 20]); translate([-20, -20, 0]) cube([20.1, 20.1, 20]); cube([50, 50, 5], center = true); } Example1 would render like this: A not valid 2-manifold cube (simple = no) The example1 module is not a valid 2-manifold because both cubes are sharing one edge. They touch each other but do not intersect. Example2 is a valid 2-manifold because there is an intersection. Now the construct meets the 2-manifold constraint stipulating that each edge must connect exactly two facets. Pieces you are subtracting must extend past the original part. (OpenSCAD Tip: Manifold Space and Time, retrieved 18:40, 22 March 2010 (UTC)).\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"8424c1cd-cdb8-4b71-863e-4cb31241897c":{"__data__":"{\"id_\":\"8424c1cd-cdb8-4b71-863e-4cb31241897c\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"047bf994-93f8-40f5-ab01-88ca1b469764\",\"metadata\":{},\"hash\":\"M9/1IIryrkB4f4uaBv/MnRNp0dH+0F/GTNZmXWdffv0=\"},\"NEXT\":{\"nodeId\":\"901920e2-7363-471e-bf2d-95aa93270e75\",\"metadata\":{},\"hash\":\"xOMz1i8eS/vtTpwVXO6KMEU5h0HdKatIQ4x5Vb9G6bc=\"}},\"hash\":\"rRlYAgO7bAy7VwWyVMCU+qlQoG1id/HS2FDeon1VT2M=\",\"text\":\"(UTC)). For reference, another situation that causes the design to be non-exportable is when two faces that are each the result of a subtraction touch. Then the error message comes up. difference () { cube ([20,10,10]); translate ([10,0,0]) cube (10); } difference () { cube ([20,10,10]); cube (10); } simply touching surfaces is correctly handled. translate ([10,0,0]) cube (10); cube (10); - STL, OFF, AMF, DXF, SVG, CSG, PNG With the import() and extrusion modules it is possible to convert 2D objects read from DXF files to 3D objects. See also 2D to 3D Extrusion. Linear Extrude Example of linear extrusion of a 2D object imported from a DXF file. linear_extrude(height = fanwidth, center = true, convexity = 10) import (file = \\\"example009.dxf\\\", layer = \\\"fan_top\\\"); Rotate Extrude Example of rotational extrusion of a 2D object imported from a DXF file. rotate_extrude(convexity = 10) import (file = \\\"example009.dxf\\\", layer = \\\"fan_side\\\", origin = fan_side_center); Getting Inkscape to work Inkscape is an open source drawing program. Tutorials for transferring 2d DXF drawings from Inkscape to OpenSCAD are available here: http://repraprip.blogspot.com/2011/05/inkscape-to-openscad-dxf-tutorial.html (Very simple, needs path segments to be straight lines) http://tonybuser.com/?tag=inkscape (More complicated, involves conversion to Postscript) http://bobcookdev.com/inkscape/inkscape-dxf.html (Better DXF Export, native support for bezier curves) http://www.bigbluesaw.com/saw/big-blue-saw-blog/general-updates/big-blue-saws-dxf-export-for-inkscape.html (even better support, works as of 10/29/2014, see link below registration window. Note: As of 6/17/15 only works with version 0.48.5 or earlier of inkscape, due\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"901920e2-7363-471e-bf2d-95aa93270e75":{"__data__":"{\"id_\":\"901920e2-7363-471e-bf2d-95aa93270e75\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"8424c1cd-cdb8-4b71-863e-4cb31241897c\",\"metadata\":{},\"hash\":\"rRlYAgO7bAy7VwWyVMCU+qlQoG1id/HS2FDeon1VT2M=\"},\"NEXT\":{\"nodeId\":\"adbd612f-3f9c-43c9-8dd0-a1293694463b\",\"metadata\":{},\"hash\":\"0UE3S2iJJzAd0eiTRHBzx9esZ2uz1WGTu9/8ykc8DK8=\"}},\"hash\":\"xOMz1i8eS/vtTpwVXO6KMEU5h0HdKatIQ4x5Vb9G6bc=\",\"text\":\"to a breaking change made in 0.91.) http://www.instructables.com/id/Convert-any-2D-image-to-a-3D-object-using-OpenSCAD/ (Convert any 2D image to a 3D object using OpenSCAD) http://carrefour-numerique.cite-sciences.fr/fablab/wiki/doku.php?id=projets:de_inkscape_a_openscad (French, directly exports OpenSCAD file) Previous CSG Export Next Other 2D formats Currently, OpenSCAD supports DXF only as a graphics format for 2D graphics. Other common formats are PS/EPS, SVG and AI. PS/EPS The pstoedit program can convert between various vector graphics formats. OpenSCAD needs the -polyaslines option passed to the dxf output plugin to understand the file. The -mm option sets one mm to be one unit in the dxf; include this if you use one unit in OpenSCAD as equal to one millimeter. The -dt options instructs pstoedit to render texts, which is usually what you want if you include text. (If the rendered text's resolution in terms of polygon count is too low, the easiest solution is to scale up the eps before converting; if you know a more elegant solution, please add it to the example.) pstoedit -dt -f \\\"dxf: -polyaslines -mm\\\" infile.eps outfile.dxf SVG Inkscape can convert SVG to EPS. Then pstoedit can convert the EPS to DXF. inkscape -E intermediate.eps infile.svg pstoedit -dt -f dxf:-polyaslines\\\\ -mm intermediate.eps outfile.dxf Makefile automation The conversion can be automated using the make system; put the following lines in your Makefile: all: my_first_file.dxf my_second_file.dxf another_file.dxf  %.eps: %.svg inkscape -E $@ $<  %.dxf: %.eps pstoedit -dt -f dxf:-polyaslines\\\\ -mm $< $@ The first line specifies which dxf files are to be generated when make is called in the current directory. The second paragraph specifies how\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"adbd612f-3f9c-43c9-8dd0-a1293694463b":{"__data__":"{\"id_\":\"adbd612f-3f9c-43c9-8dd0-a1293694463b\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"901920e2-7363-471e-bf2d-95aa93270e75\",\"metadata\":{},\"hash\":\"xOMz1i8eS/vtTpwVXO6KMEU5h0HdKatIQ4x5Vb9G6bc=\"},\"NEXT\":{\"nodeId\":\"b87db35d-b938-4432-a5ac-71a0b46627c7\",\"metadata\":{},\"hash\":\"R69S2O4iSU7t0Dak0dJ4VNZs6kz+6ydNgE/W1wrqu+U=\"}},\"hash\":\"0UE3S2iJJzAd0eiTRHBzx9esZ2uz1WGTu9/8ykc8DK8=\",\"text\":\"The second paragraph specifies how to convert a file ending in .svg to a file ending in .eps, and the third from .eps to .dxf. A more complete makefile could autogenerate dxf files from the any svg in the folder. In which case, put the following lines into your Makefile: SVG := $(wildcard *.svg) DXF := $(SVG:%.svg=%.dxf) EPS := $(SVG:%.svg=%.eps) .PHONY: all clean clean-eps clean-dxf all: $(DXF) %.eps: %.svg inkscape -E $*.eps $*.svg  %.dxf: %.eps pstoedit -dt -f \\\"dxf: -polyaslines -mm\\\" $*.eps $*.dxf clean: clean-dxf clean-eps clean-dxf: rm -f $(DXF) clean-eps: rm -f $(EPS) It's still possible to call make filename.dxf to build a particular file, but this code also allows for (re)building of all dxf files in a folder just by calling make or make all. This code is also universal enough that it's possible to put the code in a single file and symlink every makefile in any directory that has svg files for dxf conversion by running: ln -s /path/to/this/svg_to_dxf_makefile makefile in each respective directory. AI (Adobe Illustrator) Although Adobe Illustrator CC/CC.2014 allows you to export illustrations as DXF (and select DXF format versions as early as 12), it uses DXF entities that are not supported by OpenSCAD, such as POLYLINE and SPLINE. Since pstoedit does not natively support Adobe Illustrator files, one alternative is to use EXDXF, which is an Adobe Illustrator plug-in (30 free trial exports and then you have to pay $90 to register the plugin). Before exporting, it is recommended that you ensure that your Artboard is the same dimensions as the component you are exporting. Although EXDXF provides you with numerous options when exporting to DXF the most important option for OpenSCAD compliance is to set Line Conversion to Line and Arc. OpenSCAD doesn't always provide information about the issues it encountered with a DXF import.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b87db35d-b938-4432-a5ac-71a0b46627c7":{"__data__":"{\"id_\":\"b87db35d-b938-4432-a5ac-71a0b46627c7\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"adbd612f-3f9c-43c9-8dd0-a1293694463b\",\"metadata\":{},\"hash\":\"0UE3S2iJJzAd0eiTRHBzx9esZ2uz1WGTu9/8ykc8DK8=\"},\"NEXT\":{\"nodeId\":\"0ddc8ccb-c883-4aa2-8050-fff221a3a5ea\",\"metadata\":{},\"hash\":\"f0YIT/Ud9+5w+BAiZPlQ2302BT5pddqEiY4rCx4tARc=\"}},\"hash\":\"R69S2O4iSU7t0Dak0dJ4VNZs6kz+6ydNgE/W1wrqu+U=\",\"text\":\"OpenSCAD doesn't always provide information about the issues it encountered with a DXF import. If this happens, select Design | Flush Caches and then Design | Reload and Compile. Previous DXF Extrusion Next Short and Commented Example Projects OpenSCAD session using emacs as an external editor Chapter 5 -- Using an external Editor with OpenSCAD OpenSCAD User Manual Why use an external editor Many people prefer to use a certain editor. They are used to the feature set and know the keybindings. OpenSCADs editor is functional and simple but might lack features people know from other editors. Moreover, external editor allows to use different monitors for editing and preview. How to use an external editor OpenSCAD is able to check for changes of files and automatically recompile if a file change occurs. To use this feature enable \\\"Design->Automatic Reload and Preview\\\" Once the feature is activated, just load the scad file within OpenSCAD as usual (\\\"File->Open..\\\"). After that, open the scad file in your favorite editor too. Edit and work on the scad file within the external editor. Whenever the file is saved to disk (from within the external editor), OpenSCAD recognizes the file change and automatically recompiles accordingly. The internal editor can be hidden by minimizing the frame with the mouse or by selecting \\\"View->Hide editor\\\". Support of external editors In principle all editors can be used. Some even have extensions/modes to provide features for OpenSCAD. Atom: There is a Language OpenSCAD package for Atom that provides highlighting and snippets. Emacs: OpenSCAD provides an emacs mode for OpenSCAD files. Use the link or install via emacs package management (ELPA) with the MELPA repository. Geany: cobra18t provides a Geany syntax file for OpenSCAD. See Instructions tab in Thingiverse to install it. Gedit: Andy Turner provides a Gedit syntax file for OpenSCAD. IntelliJ: has an 'OpenSCAD Language Support' plugin. Kate: nerd256 provides a kate syntax file for OpenSCAD. See Instructions tab in Thingiverse to install it. You could create also a kate External tool to open OpenSCAD with the current file with script openscad %directory/%filename\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"0ddc8ccb-c883-4aa2-8050-fff221a3a5ea":{"__data__":"{\"id_\":\"0ddc8ccb-c883-4aa2-8050-fff221a3a5ea\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"b87db35d-b938-4432-a5ac-71a0b46627c7\",\"metadata\":{},\"hash\":\"R69S2O4iSU7t0Dak0dJ4VNZs6kz+6ydNgE/W1wrqu+U=\"},\"NEXT\":{\"nodeId\":\"453f6722-6f6a-41ba-9e02-f8a6313b2562\",\"metadata\":{},\"hash\":\"ttcqv4cOE9LoNv+2DJ/d0wQ/AOUrUUo440nQTh0NtO8=\"}},\"hash\":\"f0YIT/Ud9+5w+BAiZPlQ2302BT5pddqEiY4rCx4tARc=\",\"text\":\"External tool to open OpenSCAD with the current file with script openscad %directory/%filename Notepad++: TheHeadlessSourceMan provides a Notepad++ syntax file for OpenSCAD. See Instructions tab in Thingiverse to install it. OpenSCADitor: OpenSCAD-dedicated editor Sublime: Syntax highlighting and Customizer support Textmate: Syntax highlighting and Customizer support VIM: vim.org provides a VIM syntax file for OpenSCAD. Visual Studio Code: Free, open-source code editor Install the scad extension for syntax highlighting Additional benefits Besides using your editor of choice, these solutions enable the flexible usage of multi-monitor set-ups. One can have one monitor set up to depict the 3D object on the entire screen and a second monitor for the editor and other tools. Chapter 6 -- Using OpenSCAD in a command line environment OpenSCAD User Manual Command line usage OpenSCAD can not only be used as a GUI, but also handles command line arguments. Its usage line says: OpenSCAD 2019.05 has these options: Usage: openscad [options] file.scad Allowed options: -o [ --o ] arg               output specified file instead of running the GUI, the file extension specifies the type: stl, off, amf, 3mf, csg, dxf, svg, png, echo, ast, term, nef3, nefdbg  -D [ --D ] arg               var=val -pre-define variables -p [ --p ] arg               customizer parameter file -P [ --P ] arg               customizer parameter set -h [ --help ]                print this help message and exit -v [ --version ]             print the version --info                       print information about the build process  --camera arg                 camera parameters when exporting png: =translate_x,y,z,rot_x,y,z,dist or =eye_x,y,z,center_x,y,z --autocenter                 adjust camera to look at object's center --viewall                    adjust camera to fit object --imgsize arg                =width,height of exported png --render arg                 for full geometry evaluation when exporting png --preview arg                [=throwntogether] -for ThrownTogether preview png --view arg                   =view options: axes | crosshairs | edges |\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"453f6722-6f6a-41ba-9e02-f8a6313b2562":{"__data__":"{\"id_\":\"453f6722-6f6a-41ba-9e02-f8a6313b2562\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"0ddc8ccb-c883-4aa2-8050-fff221a3a5ea\",\"metadata\":{},\"hash\":\"f0YIT/Ud9+5w+BAiZPlQ2302BT5pddqEiY4rCx4tARc=\"},\"NEXT\":{\"nodeId\":\"4f857178-85e7-403a-97d7-a73b93d3e156\",\"metadata\":{},\"hash\":\"aCtP1TZCCNJDDygF83gKpqhC+tA5qb2PZBhyYkrTAoc=\"}},\"hash\":\"ttcqv4cOE9LoNv+2DJ/d0wQ/AOUrUUo440nQTh0NtO8=\",\"text\":\"png --view arg                   =view options: axes | crosshairs | edges | scales | wireframe --projection arg             =(o)rtho or (p)erspective when exporting png --csglimit arg               =n -stop rendering at n CSG elements when exporting png --colorscheme arg            =colorscheme: *Cornfield | Metallic | Sunset | Starnight | BeforeDawn | Nature | DeepOcean | Solarized | Tomorrow | Tomorrow 2 | Tomorrow Night | Monotone  -d [ --d ] arg               deps_file -generate a dependency file for make -m [ --m ] arg               make_cmd -runs make_cmd file if file is missing -q [ --quiet ]               quiet mode (don't print anything *except* errors) --hardwarnings               Stop on the first warning --check-parameters arg       =true/false, configure the parameter check for user modules and functions --check-parameter-ranges arg =true/false, configure the parameter range check for builtin modules --debug arg                  special debug info -s [ --s ] arg               stl_file deprecated, use -o -x [ --x ] arg               dxf_file deprecated, use -o OpenSCAD 2015.03-1 has these options: openscad     [ -o output_file [ -d deps_file ] ]\\\\ [ -m make_command ] [ -D var=val [..] ] \\\\ [ --help ] print this help message and exit \\\\ [ --version ] [ --info ] \\\\ [ --camera=translatex,y,z,rotx,y,z,dist | \\\\ --camera=eyex,y,z,centerx,y,z ] \\\\ [ --autocenter ] \\\\ [ --viewall ] \\\\ [ --imgsize=width,height ] [ --projection=(o)rtho|(p)ersp] \\\\ [ --render | --preview[=throwntogether] ] \\\\ [ --colorscheme=[Cornfield|Sunset|Metallic|Starnight|BeforeDawn|Nature|DeepOcean] ] \\\\ [ --csglimit=num ]\\\\ filename OpenSCAD 2014.03+ has these options: openscad     [ -o output_file [ -d deps_file ] ]\\\\ [ -m make_command ] [ -D var=val [..] ] \\\\\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"4f857178-85e7-403a-97d7-a73b93d3e156":{"__data__":"{\"id_\":\"4f857178-85e7-403a-97d7-a73b93d3e156\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"453f6722-6f6a-41ba-9e02-f8a6313b2562\",\"metadata\":{},\"hash\":\"ttcqv4cOE9LoNv+2DJ/d0wQ/AOUrUUo440nQTh0NtO8=\"},\"NEXT\":{\"nodeId\":\"ec481e4f-3d93-4d23-aa91-1178bdabf825\",\"metadata\":{},\"hash\":\"byNdBlFYuXFYOaJTjm8v6+OsydzRBC3g/nr24VXTclY=\"}},\"hash\":\"aCtP1TZCCNJDDygF83gKpqhC+tA5qb2PZBhyYkrTAoc=\",\"text\":\"[ -m make_command ] [ -D var=val [..] ] \\\\ [ --version ] [ --info ] \\\\ [ --camera=translatex,y,z,rotx,y,z,dist | \\\\ --camera=eyex,y,z,centerx,y,z ] \\\\ [ --imgsize=width,height ] [ --projection=(o)rtho|(p)ersp] \\\\ [ --render | --preview[=throwntogether] ] \\\\ [ --csglimit=num ] \\\\ filename Openscad 2013.05 had these options: openscad     [ -o output_file [ -d deps_file ] ]\\\\ [ -m make_command ] [ -D var=val [..] ] [ --render ] \\\\ [ --camera=translatex,y,z,rotx,y,z,dist | \\\\ --camera=eyex,y,z,centerx,y,z ] \\\\ [ --imgsize=width,height ] [ --projection=(o)rtho|(p)ersp] \\\\ filename Earlier releases had only these: openscad [ -o output_file [ -d deps_file ] ] \\\\ [ -m make_command ] [ -D var=val [..] ] filename The usage on OpenSCAD version 2011.09.30 (now deprecated) was: openscad [ { -s stl_file | -o off_file | -x dxf_file } [ -d deps_file ] ]\\\\ [ -m make_command ] [ -D var=val [..] ] filename Export options When called with the -o option, OpenSCAD does not start the GUI, but executes the given file and exports to the output_file in a format depending on the extension (.stl / .off / .dxf, .csg). Some versions use -s/-d/-o to determine the output file format instead; check with \\\"openscad --help\\\". If the option -d is given in addition to an export command, all files accessed while building the mesh are written in the argument of -d in the syntax of a Makefile. For at least 2015.03-2+, specifying the extension .echo causes openscad to produce a text file containing error messages and the output of all echo() calls in filename as they would appear in the console window visible in the GUI.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"ec481e4f-3d93-4d23-aa91-1178bdabf825":{"__data__":"{\"id_\":\"ec481e4f-3d93-4d23-aa91-1178bdabf825\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"4f857178-85e7-403a-97d7-a73b93d3e156\",\"metadata\":{},\"hash\":\"aCtP1TZCCNJDDygF83gKpqhC+tA5qb2PZBhyYkrTAoc=\"},\"NEXT\":{\"nodeId\":\"1bbbc8de-9f65-469b-894c-3606e2474cf2\",\"metadata\":{},\"hash\":\"q4nGkIpysxvCSDjpQbZEMDnY+hhWeWCvnBlBlJkqMok=\"}},\"hash\":\"byNdBlFYuXFYOaJTjm8v6+OsydzRBC3g/nr24VXTclY=\",\"text\":\"all echo() calls in filename as they would appear in the console window visible in the GUI. Multiple output files are not supported, so using this option you cannot also obtain the model that would have normally been generated. Camera and image output For 2013.05+, the option to output a .png image was added. There are two types of cameras available for the generation of images. The first camera type is a 'gimbal' camera that uses Euler angles, translation, and a camera distance, like OpenSCAD's GUI viewport display at the bottom of the OpenSCAD window. The second camera type is a 'vector' camera, with an 'eye' camera location vector and a 'lookat' center vector. --imgsize x,y chooses the .png dimensions and --projection chooses orthogonal or perspective, as in the GUI. By default, cmdline .png output uses Preview mode (f5) with OpenCSG. For some situations it may be desirable to output the full render, with CGAL. This is done by adding '--render' as an option. Constants In order to pre-define variables, use the -D option. It can be given repeatedly. Each occurrence of -D must be followed by an assignment. Unlike normal OpenSCAD assignments, these assignments don't define variables, but constants, which cannot be changed inside the program, and can thus be used to overwrite values defined in the program at export time. If you want to assign the -D variable to another variable, the -D variable MUST be initialized in the main .scad program param1=17;       // must be initialized val=param1;      // param1 passed via -D on cmd-line echo(val,param1); // outputs 17,17 without the first line, val would be undefined. The right hand sides can be arbitrary OpenSCAD expressions, including mathematical operations and strings. Be aware that your shell (bash, cmd, etc.) parses the arguments before passing them to openscad, therefore you need to properly quote or escape arguments with special characters like spaces or quotation marks. For example to assign a string production to a quality parameter one has to ensure the \\\" characters OpenSCAD expects aren't stripped by the shell. In bash one could write:\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1bbbc8de-9f65-469b-894c-3606e2474cf2":{"__data__":"{\"id_\":\"1bbbc8de-9f65-469b-894c-3606e2474cf2\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"ec481e4f-3d93-4d23-aa91-1178bdabf825\",\"metadata\":{},\"hash\":\"byNdBlFYuXFYOaJTjm8v6+OsydzRBC3g/nr24VXTclY=\"},\"NEXT\":{\"nodeId\":\"1a0c91c7-4ad0-49cf-9a7f-c93aa3598959\",\"metadata\":{},\"hash\":\"ivaQ4+XUHfTcJpkmmBXqbjvzkCmIgFIUYwRQR90bjTg=\"}},\"hash\":\"q4nGkIpysxvCSDjpQbZEMDnY+hhWeWCvnBlBlJkqMok=\",\"text\":\"In bash one could write: openscad -o my_model_production.stl -D 'quality=\\\"production\\\"' my_model.scad or from the Windows prompt: openscad.com -o my_model_production.stl -D \\\"quality=\\\"\\\"production\\\"\\\"\\\" my_model.scad or you may need to escape the inner quotes instead: openscad -o my_model_production.stl -D \\\"quality=\\\\\\\"production\\\\\\\"\\\" my_model.scad Note that this sort of double-escaping isn't necessary when executing OpenSCAD from another process that isn't using a shell, because each argument is passed separately. For example a Java application might start a process like so: pb = new ProcessBuilder(\\\"/usr/bin/openscad\\\", \\\"-o\\\", \\\"my_model_production.stl\\\", \\\"-D\\\", \\\"quality=\\\\\\\"production\\\\\\\"\\\", \\\"my_model.scad\\\"); Command to build required files In a complex build process, some missing files required by an OpenSCAD file can be generated if they are defined in a Makefile. If OpenSCAD is given the option -m make, it starts make file the first time it tries to access a missing file. Processing all .scad files in a folder Example to convert all the .scad in a folder into .stl: In a folder with .scad files, make a .bat file with text: FOR %%f in (*.scad)  DO openscad -o \\\"%%~nf.stl\\\" \\\"%%f\\\" If it closes without processing, check to set the PATH by adding openscad directory to: Start - Settings - Control Panel - System - Advanced tab - Environment Variables - System Variables, select Path, then click Edit. Add the openscad directory to the list Makefile example The -d and -m options only make sense together. (-m without -d would not consider modified dependencies when building exports, -d without -m would require the files to be already built for the first run that generates the dependencies.) Here is an example of a basic Makefile that creates an .stl file from an .scad file of the same name: # explicit wildcard expansion suppresses errors when no files are found include $(wildcard *.deps) %.stl: %.scad openscad -m make -o $@ -d $@.deps $<\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1a0c91c7-4ad0-49cf-9a7f-c93aa3598959":{"__data__":"{\"id_\":\"1a0c91c7-4ad0-49cf-9a7f-c93aa3598959\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"1bbbc8de-9f65-469b-894c-3606e2474cf2\",\"metadata\":{},\"hash\":\"q4nGkIpysxvCSDjpQbZEMDnY+hhWeWCvnBlBlJkqMok=\"},\"NEXT\":{\"nodeId\":\"dcea0ced-5760-47ad-9e2a-548689dbfef9\",\"metadata\":{},\"hash\":\"VkIlfkwdstiMOa0pNqA5E0pC6A7dBAP3ooFec80bXTw=\"}},\"hash\":\"ivaQ4+XUHfTcJpkmmBXqbjvzkCmIgFIUYwRQR90bjTg=\",\"text\":\"openscad -m make -o $@ -d $@.deps $< When make my_example.stl is run for the first time, it finds no .deps files, and must depend on my_example.scad. Because my_example.stl is not yet preset, it gets created unconditionally. If OpenSCAD finds missing files, it calls make to build them, and it lists all used files in my_example.stl.deps. When make my_example.stl is called subsequently, it finds and includes my_example.stl.deps and check if any of the files listed there, including my_example.scad, changed since my_example.stl was built, based on their time stamps. Only if that is the case, it builds my_example.stl again. Automatic targets When building similar .stl files from a single .scad file, there is a way to automate that too: # match \\\"module foobar() { // `make` me\\\" TARGETS=$(shell sed '/^module [a-z0-9_-]*().*make..\\\\?me.*$$/!d;s/module //;s/().*/.stl/' base.scad) all: ${TARGETS} # auto-generated .scad files with .deps make make re-build always. keeping the # scad files solves this problem. (explanations are welcome.) .SECONDARY: $(shell echo \\\"${TARGETS}\\\" | sed 's/\\\\.stl/.scad/g') # explicit wildcard expansion suppresses errors when no files are found include $(wildcard *.deps) %.scad: echo -ne 'use <base.scad>\\\\n$*();' > $@ %.stl: %.scad openscad -m make -o $@ -d $@.deps $< All objects that are supposed to be exported automatically have to be defined in base.scad in an own module with their future file name (without the \\\".stl\\\"), and have a comment like \\\"// make me\\\" in the line of the module definition. The \\\"TARGETS=\\\" line picks these out of the base file and creates the file names. These are built when make all (or make, for short) is called.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"dcea0ced-5760-47ad-9e2a-548689dbfef9":{"__data__":"{\"id_\":\"dcea0ced-5760-47ad-9e2a-548689dbfef9\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"1a0c91c7-4ad0-49cf-9a7f-c93aa3598959\",\"metadata\":{},\"hash\":\"ivaQ4+XUHfTcJpkmmBXqbjvzkCmIgFIUYwRQR90bjTg=\"},\"NEXT\":{\"nodeId\":\"3b11dcd4-8ecb-4f1d-a4ec-66a00bcda284\",\"metadata\":{},\"hash\":\"9WDaMqfUqmukowD8syiFkT71k2Hja4P7+FYvwzj6JgA=\"}},\"hash\":\"VkIlfkwdstiMOa0pNqA5E0pC6A7dBAP3ooFec80bXTw=\",\"text\":\"These are built when make all (or make, for short) is called. As the convention from the last example is to create the .stl files from .scad files of the same base name, for each of these files, an .scad file must be generated. This is done in the \\\"%.scad:\\\" paragraph; my_example.scad is a simple OpenSCAD file: use <base.scad> my_example(); The \\\".SECONDARY\\\" line is there to keep make from deleting the generated .scad files. Its presence helps determine which files no longer need to be rebuilt; please post ideas about what exactly goes wrong there (or how to fix it better) on the talk page! Windows notes On Windows, openscad.com should be called from the command line as a wrapper for openscad.exe. This is because Openscad uses the 'devenv' solution to the Command-Line/GUI output issue. Typing 'openscad' at the cmd.exe prompt calls the .com program wrapper by default. MacOS notes On MacOS the binary is normally hidden inside the App folder. If OpenSCAD is installed in the global Applications folder, it can be called from command line like in the following example that just shows the OpenSCAD version: macbook:/$ /Applications/OpenSCAD.app/Contents/MacOS/OpenSCAD -v OpenSCAD version 2013.06 Alternatively, you may create a symbolic link to the binary to make calls from the command line easier: macbook:/$ sudo ln -sf /Applications/OpenSCAD.app/Contents/MacOS/OpenSCAD /usr/local/bin/openscad Now you can call openscad directly without having to type in the full path. macbook:/$ openscad -v OpenSCAD version 2015.03-3 On some versions of MacOS, you might get the following error when attempting to run openscad via that link: This application failed to start because it could not find or load the Qt platform plugin \\\"cocoa\\\". Reinstalling the application may fix this problem. Abort trap: 6 You can fix this by creating a wrapper script to invoke the executable directly: sudo rm -f /usr/local/bin/openscad echo '#!/bin/sh' > test echo '/Applications/OpenSCAD.app/Contents/MacOS/OpenSCAD $*' >> test\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"3b11dcd4-8ecb-4f1d-a4ec-66a00bcda284":{"__data__":"{\"id_\":\"3b11dcd4-8ecb-4f1d-a4ec-66a00bcda284\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"dcea0ced-5760-47ad-9e2a-548689dbfef9\",\"metadata\":{},\"hash\":\"VkIlfkwdstiMOa0pNqA5E0pC6A7dBAP3ooFec80bXTw=\"},\"NEXT\":{\"nodeId\":\"9eee2fa8-e601-4645-ac1a-97cba8f4d479\",\"metadata\":{},\"hash\":\"mh3aODJmS7q8jcbZ8o32xNW4pZ5SYZc2FQTidiik3vQ=\"}},\"hash\":\"9WDaMqfUqmukowD8syiFkT71k2Hja4P7+FYvwzj6JgA=\",\"text\":\"echo '/Applications/OpenSCAD.app/Contents/MacOS/OpenSCAD $*' >> test chmod +x test ; sudo mv test /usr/local/bin/openscad Chapter 7 -- Path locations OpenSCAD User Manual OpenSCAD looks for and saves resources to various paths. This is an overview. Env variables HOME XDG_CONFIG_HOME OPENSCAD_FONT_PATH OPENSCADPATH Per platform roots ResourcesPath Posix: Mac OS X: OpenSCAD.app/Contents/Resources Windows: DocumentsPath Posix: $HOME/.local/share Mac OS X: [NSDocumentDirectory], typically $HOME/Documents Windows XP: [CSIDL_PERSONAL], typically C:\\\\documents and settings\\\\username\\\\my documents Windows Vista->: [CSIDL_PERSONAL], typically C:\\\\users\\\\username\\\\documents UserConfigPath Posix: $XDG_CONFIG_HOME/OpenSCAD or $HOME/.config/OpenSCAD Mac: [NSApplicationSupportDirectory], typically $HOME/Library/Application Support/OpenSCAD Windows: [CSIDL_LOCAL_APPDATA], typically C:\\\\Documents and Settings\\\\username\\\\Local Settings\\\\Application Data Read-only Resources libraries: [ResourcesPath]/libraries fonts: [ResourcesPath]/fonts render color schemes: [ResourcesPath]/color-schemes/render editor color schemes: [ResourcesPath]/color-schemes/editor User Resources libraries: $OPENSCADPATH, [DocumentsPath]/OpenSCAD/libraries fonts * $HOME/.fonts render color schemes: [UserConfigPath]/color-schemes/render editor color schemes: [UserConfigPath]/color-schemes/editor Misc Resources GUI preferences (Uses QSettings): * Posix: $HOME/.config/OpenSCAD.conf * Windows: Registry * Mac OS X: $HOME/Library/Preferences/org.openscad.OpenSCAD.plist backups: [DocumentsPath]/OpenSCAD/backups Reference this chapter is based on https://github.com/openscad/openscad/wiki/Path-locations written by the developer kintel Chapter 8 -- Building OpenSCAD from Sources OpenSCAD User Manual Prebuilt binary packages If you are lucky, you won't have to build it. Many Linux and BSD systems have pre-built OpenSCAD packages including Debian, Ubuntu, Fedora, Arch, NetBSD and OpenBSD. Check your system's package manager for details.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"9eee2fa8-e601-4645-ac1a-97cba8f4d479":{"__data__":"{\"id_\":\"9eee2fa8-e601-4645-ac1a-97cba8f4d479\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"3b11dcd4-8ecb-4f1d-a4ec-66a00bcda284\",\"metadata\":{},\"hash\":\"9WDaMqfUqmukowD8syiFkT71k2Hja4P7+FYvwzj6JgA=\"},\"NEXT\":{\"nodeId\":\"1880b1e5-a468-481b-b94d-40568f53e273\",\"metadata\":{},\"hash\":\"HiGJT3xwg93hQC50ivMwWrd8X7KY+TtQs4f5Cg1+cwY=\"}},\"hash\":\"mh3aODJmS7q8jcbZ8o32xNW4pZ5SYZc2FQTidiik3vQ=\",\"text\":\"Check your system's package manager for details. generic linux binary package There is also a generic linux binary package at http://www.openscad.org that can be unpacked and run from within most linux systems. It is self contained and includes the required libraries. nightly builds see https://build.opensuse.org/package/show/home:t-paul/OpenSCAD chrysn's Ubuntu packages For Ubuntu systems you can also try chrysn's Ubuntu packages at his launchpad PPA, or you can just copy/paste the following onto the command line: sudo add-apt-repository ppa:chrysn/openscad sudo apt-get update sudo apt-get install openscad His repositories for OpenSCAD and OpenCSG are here and here. Building OpenSCAD yourself If you wish to build OpenSCAD for yourself, start by installing git on your system using your package manager. Git is sometimes packaged under the name 'scmgit' or 'git-core'. Then, use git to download the OpenSCAD source code cd ~/ git clone https://github.com/openscad/openscad.git cd openscad Then get the MCAD library, which is now included with OpenSCAD binary distributions git submodule init git submodule update Installing dependencies OpenSCAD uses a large number of third-party libraries and tools. These are called dependencies. An up to date list of dependencies can usually be found in the README.md in openscad's main directory, here: https://github.com/openscad/openscad/ A brief list follows: Eigen, GCC or Clang, Bison, Flex, CGAL, Qt, GMP, MPFR, boost, cmake, OpenCSG, GLEW, QScintilla, glib2, harfbuzz, freetype2, pkg- config, fontconfig Prepackaged dependencies Most systems are set up to install pre-built dependencies using a 'package manager', such as apt on ubuntu or pacman on Arch Linux. OpenSCAD comes with a 'helper script' that attempts to automatically run your package manager for you and download and install these pre- built packages if they exist. Note you must be running as root and/or using sudo to try this. Note that these scripts are likely to fail on Sun,\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1880b1e5-a468-481b-b94d-40568f53e273":{"__data__":"{\"id_\":\"1880b1e5-a468-481b-b94d-40568f53e273\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"9eee2fa8-e601-4645-ac1a-97cba8f4d479\",\"metadata\":{},\"hash\":\"mh3aODJmS7q8jcbZ8o32xNW4pZ5SYZc2FQTidiik3vQ=\"},\"NEXT\":{\"nodeId\":\"4f81d409-cd04-47a5-93fe-2e955c43a9b1\",\"metadata\":{},\"hash\":\"TZYJZ4V4UfciVBsnxyOa9FHWWPc9AcDzfvUey1GONaw=\"}},\"hash\":\"HiGJT3xwg93hQC50ivMwWrd8X7KY+TtQs4f5Cg1+cwY=\",\"text\":\"Note that these scripts are likely to fail on Sun, Solaris, AIX, IRIX, etc (skip to the 'building dependencies' section below). ./scripts/uni-get-dependencies.sh Verifying dependencies After attempting to install dependencies, you should double check them. Exit any shells and perhaps reboot. Now verify that the version numbers are up to those listed in openscad/README.md file. Also verify that no packages were accidentally missed. For example open a shell and run 'flex --version' or 'gcc --version'. These are good sanity checks to make sure your environment is proper. OpenSCAD comes with another helper script that attempts to automate this process on many Linux and BSD systems (Again, it won't work on Sun/Solaris/Irix/AIX/etc). ./scripts/check-dependencies.sh If you cannot verify that your dependencies are installed properly and of a sufficient version, then you may have to install some 'by hand' (see the section below on building your own dependencies). If your system has all the proper versions of dependencies, then continue to the 'Building OpenSCAD' section. Building the dependencies yourself On systems that lack updated dependency libraries or tools, you must to download each and build it and install it by hand. You can do this by downloading and following installation instructions for each package separately. However OpenSCAD comes with scripts that attempt to automate this process on Linux and BSD systems, by installing everything into a folder created under $HOME/openscad_deps. This script does not build typical development dependencies like X11, Qt4, gcc, bash etc. But it attempts things like OpenCSG, CGAL, boost, etc. To run the automated script, first set up the environment variables (if you don't use bash, replace \\\"source\\\" with a single \\\".\\\") source scripts/setenv-unibuild.sh Then, run a second script to download and build. ./scripts/uni-build-dependencies.sh (If you only need CGAL or OpenCSG, you can just run ' ./scripts/uni-build-dependencies.sh cgal' or opencsg and it builds only a single library.) The complete download and build process can take several hours, depending on your network connection speed and system speed. It is\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"4f81d409-cd04-47a5-93fe-2e955c43a9b1":{"__data__":"{\"id_\":\"4f81d409-cd04-47a5-93fe-2e955c43a9b1\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"1880b1e5-a468-481b-b94d-40568f53e273\",\"metadata\":{},\"hash\":\"HiGJT3xwg93hQC50ivMwWrd8X7KY+TtQs4f5Cg1+cwY=\"},\"NEXT\":{\"nodeId\":\"4d49d26a-03c0-430d-b56b-824e1ee302f0\",\"metadata\":{},\"hash\":\"nibCJ0IhwEsbVCMKOGZAxZX9XQcirQUemhLtfIpqLgs=\"}},\"hash\":\"TZYJZ4V4UfciVBsnxyOa9FHWWPc9AcDzfvUey1GONaw=\",\"text\":\"It is recommended to have at least 2 Gigabyte of free disk space to do the full dependency build. Each time you log into a new shell and wish to re-compile OpenSCAD you need to re-run the 'source scripts/setenv-unibuild.sh' script. After completion, return to the section above on 'verifying dependencies' to see if they installed correctly. Build the OpenSCAD binary Once you have installed your dependencies, you can build OpenSCAD. qmake       # or qmake-qt4, depending on your distribution make You can also install OpenSCAD to /usr/local/ if you wish. The 'openscad' binary is put under /usr/local/bin, the libraries and examples reside under something like /usr/local/share/openscad possibly depending on your system. Note that if you have previously installed a binary linux package of openscad, you should take care to delete /usr/local/lib/openscad and /usr/local/share/openscad because they are not the same paths as what the standard qmake-built 'install' target uses. sudo make install Note: on Debian-based systems create a package and install OpenSCAD using: sudo checkinstall -D make install OpenSCAD 2017-01-06 experimental- build, all experimental features enabled If you prefer not to install you can run \\\"./openscad\\\" directly whilst still in the ~/openscad directory. Experimental To enable the experimental features, remake the project with CONFIG+=experimental: qmake CONFIG+=experimental make -B The -B is only required once (when you have changed the config). The experimental features are disabled by default, even when explicitly build as experimental build. When you successfully build, you find a \\\"features\\\" tab in the preferences, where you can enable individual experimental features. Alternatively, you may add CONFIG+=experimental as the first line of openscad.pro. Compiling the test suite OpenSCAD comes with over 740 regression tests. To build and run them, it is recommended to first build the GUI version of OpenSCAD by following the steps above, including the downloading of MCAD. Then, from the same login, run these commands: cd tests mkdir build && cd build cmake .. make ctest -C All\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"4d49d26a-03c0-430d-b56b-824e1ee302f0":{"__data__":"{\"id_\":\"4d49d26a-03c0-430d-b56b-824e1ee302f0\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"4f81d409-cd04-47a5-93fe-2e955c43a9b1\",\"metadata\":{},\"hash\":\"TZYJZ4V4UfciVBsnxyOa9FHWWPc9AcDzfvUey1GONaw=\"},\"NEXT\":{\"nodeId\":\"4de34dfd-4e02-475b-855d-b29b205b153a\",\"metadata\":{},\"hash\":\"3zX7Omn8/1hJ+oMIKKYAApXBvR3rfsmtoWvI67sye+k=\"}},\"hash\":\"nibCJ0IhwEsbVCMKOGZAxZX9XQcirQUemhLtfIpqLgs=\",\"text\":\"cd tests mkdir build && cd build cmake .. make ctest -C All The file 'openscad/doc/testing.txt' has more information. Full test logs are under tests/build/Testing/Temporary. A pretty-printed index.html web view of the tests can be found under a machine-specific subdirectory thereof and opened with a browser. Troubleshooting If you encounter any errors when building, please file an issue report at https://github.com/openscad/openscad/issues/ . Errors about incompatible library versions This may be caused by old libraries living in /usr/local/lib like boost, CGAL, OpenCSG, etc, (often left over from previous experiments with OpenSCAD). You are advised to remove them. To remove, for example, CGAL, run rm -rf /usr/local/include/CGAL && rm -rf /usr/local/lib/*CGAL*. Then erase $HOME/openscad_deps, remove your openscad source tree, and restart fresh. As of 2013 OpenSCAD's build process does not advise nor require anything to be installed in /usr/local/lib nor /usr/local/include. Note that CGAL depends on Boost and OpenCSG depends on GLEW - interdependencies like this can really cause issues if there are stray libraries in unusual places. Another source of confusion can come from running from within an 'unclean shell'. Make sure that you don't have LD_LIBRARY_PATH set to point to any old libraries in any strange places. Also don't mix a Mingw windows cross build with your linux build process - they use different environment variables and may conflict. OpenCSG didn't automatically build If for some reason the recommended build process above fails to work with OpenCSG, please file an issue on the OpenSCAD github. In the meantime, you can try building it yourself. wget http://www.opencsg.org/OpenCSG-1.3.2.tar.gz sudo apt-get purge libopencsg-dev libopencsg1 # or your system's equivalent tar -xvf OpenCSG-1.3.2.tar.gz cd OpenCSG-1.3.2 # edit the Makefile and remove 'example' make sudo cp -d lib/lib* $HOME/openscad_deps/lib/\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"4de34dfd-4e02-475b-855d-b29b205b153a":{"__data__":"{\"id_\":\"4de34dfd-4e02-475b-855d-b29b205b153a\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"4d49d26a-03c0-430d-b56b-824e1ee302f0\",\"metadata\":{},\"hash\":\"nibCJ0IhwEsbVCMKOGZAxZX9XQcirQUemhLtfIpqLgs=\"},\"NEXT\":{\"nodeId\":\"c7bd2269-5585-4a24-b7a9-3d3afcfa5e41\",\"metadata\":{},\"hash\":\"75wYMFlGY3lY4FLkmGN7+Z9ajDB3Sa2lZjN5tYAWcW4=\"}},\"hash\":\"3zX7Omn8/1hJ+oMIKKYAApXBvR3rfsmtoWvI67sye+k=\",\"text\":\"make sudo cp -d lib/lib* $HOME/openscad_deps/lib/ sudo cp include/opencsg.h $HOME/openscad_deps/include/ Note: on Debian-based systems (such as Ubuntu), you can add the 'install' target to the OpenCSG Makefile, and then use checkinstall to create a clean .deb package for install/removal/upgrade. Add this target to Makefile: install: # !! THESE LINES PREFIXED WITH ONE TAB, NOT SPACES !! cp -d lib/lib* /usr/local/lib/ cp include/opencsg.h /usr/local/include/ ldconfig Then: sudo checkinstall -D make install .. to create and install a clean package. CGAL didn't automatically build If this happens, you can try to compile CGAL yourself. It is recommended to install to $HOME/openscad_deps and otherwise follow the build process as outlined above. Compiling fails with an Internal compiler error from GCC or GAS This can happen if you run out of virtual memory, which means all of physical RAM as well as virtual swap space from the disk. See below under \\\"horribly slow\\\" for reasons. If you are non-root, there are a few things you can try. The first is to use the 'clang' compiler, as it uses much less RAM than gcc. The second thing is to edit the Makefile and remove the '-g' and '-pipe' flags from the compiler flags section. If, on the other hand, you are root, then you can expand your swap space. On Linux this is pretty standard procedure and easily found in a web search. Basically you do these steps (after verifying you have no file named /swapfile already): sudo dd if=/dev/zero of=/swapfile bs=1M count=2000  # create a roughly 2 gig swapfile sudo chmod 0600 /swapfile # set proper permissions for security sudo mkswap /swapfile  # format as a swapfile sudo swapon /swapfile  # turn on swap For permanent swap setup in /etc/fstab, instructions are easily found through web search. If you are building on an SSD (solid state drive) machine the speed of a swapfile allows a reasonable build time. Compiling is horribly slow and/or grinds the disk\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"c7bd2269-5585-4a24-b7a9-3d3afcfa5e41":{"__data__":"{\"id_\":\"c7bd2269-5585-4a24-b7a9-3d3afcfa5e41\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"4de34dfd-4e02-475b-855d-b29b205b153a\",\"metadata\":{},\"hash\":\"3zX7Omn8/1hJ+oMIKKYAApXBvR3rfsmtoWvI67sye+k=\"},\"NEXT\":{\"nodeId\":\"5a41cd06-ea52-4689-957d-8fc61b886f8b\",\"metadata\":{},\"hash\":\"uEP/i+yFb7rScX30ywNkWXSnSphJxABJ+hPF+UQV9AE=\"}},\"hash\":\"75wYMFlGY3lY4FLkmGN7+Z9ajDB3Sa2lZjN5tYAWcW4=\",\"text\":\"Compiling is horribly slow and/or grinds the disk It is recommended to have at least 1.5 Gbyte of RAM to compile OpenSCAD. There are a few workarounds in case you don't. The first is to use the experimental support for the Clang Compiler (described below) as Clang uses much less RAM than GCC. Another workaround is to edit the Makefile generated by qmake and search/replace the optimization flags (-O2) with -O1 or blank, and to remove any '-g' debug flags from the compiler line, as well as '-pipe'. If you have plenty of RAM and just want to speed up the build, you can try a paralell multicore build with make -jx Where 'x' is the number of cores you want to use. Remember you need x times the amount of RAM to avoid possible disk thrashing. The reason the build is slow is because OpenSCAD uses template libraries like CGAL, Boost, and Eigen, which use large amounts of RAM to compile - especially CGAL. GCC may take up 1.5 Gigabytes of RAM on some systems during the build of certain CGAL modules. There is more information at StackOverflow.com. BSD issues The build instructions above are designed to work unchanged on FreeBSD and NetBSD. However the BSDs typically require special environment variables set up to build any QT project - you can set them up automatically by running source ./scripts/setenv-unibuild.sh NetBSD 5.x, requires a patched version of CGAL. It is recommended to upgrade to NetBSD 6 instead as it has all dependencies available from pkgin. NetBSD also requires the X Sets to be installed when the system was created (or added later). On OpenBSD it may fail to build after running out of RAM. OpenSCAD requires at least 1 Gigabyte to build with GCC. You may have need to be a user with 'staff' level access or otherwise alter required system parameters. The 'dependency build' sequence has also not been ported to OpenBSD so you must rely on the standard OpenBSD system package tools (in other words you have to have root). Sun / Solaris / IllumOS / AIX / IRIX / Minix / etc\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"5a41cd06-ea52-4689-957d-8fc61b886f8b":{"__data__":"{\"id_\":\"5a41cd06-ea52-4689-957d-8fc61b886f8b\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"c7bd2269-5585-4a24-b7a9-3d3afcfa5e41\",\"metadata\":{},\"hash\":\"75wYMFlGY3lY4FLkmGN7+Z9ajDB3Sa2lZjN5tYAWcW4=\"},\"NEXT\":{\"nodeId\":\"826f583d-b27c-446a-84d5-9cda36f0994b\",\"metadata\":{},\"hash\":\"Af4x4eHvj+FJp6F7mBEsdInScuQfZrizzDvpWWl13u4=\"}},\"hash\":\"uEP/i+yFb7rScX30ywNkWXSnSphJxABJ+hPF+UQV9AE=\",\"text\":\"Sun / Solaris / IllumOS / AIX / IRIX / Minix / etc The OpenSCAD dependency builds have been mainly focused on Linux and BSD systems like Debian or FreeBSD. The 'helper scripts' are likely to fail on other types of Un*x. Furthermore the OpenSCAD build system files (qmake .pro files for the GUI, cmake CMakeFiles.txt for the test suite) have not been tested thoroughly on non-Linux non-BSD systems. Extensive work may be required to get a working build on such systems. Test suite problems Headless server The test suite tries to automatically detect if you have an X11 DISPLAY environment variable set. If not, it tries to automatically start Xvfb or Xvnc (virtual X framebuffers) if they are available. If you want to run these servers manually, you can attempt the following: $ Xvfb :5 -screen 0 800x600x24 & $ DISPLAY=:5 ctest Alternatively: $ xvfb-run --server-args='-screen 0 800x600x24' ctest There are some cases where Xvfb/Xvnc won't work. Some older versions of Xvfb may fail and crash without warning. Sometimes Xvfb/Xvnc have been built without GLX (OpenGL) support and OpenSCAD won't be able to generate any images. Image-based tests takes a long time, they fail, and the log says 'return -11' Imagemagick may have crashed while comparing the expected images to the test-run generated (actual) images. You can try using the alternate ImageMagick comparison method by by erasing CMakeCache, and re-running cmake with -DCOMPARATOR=ncc. This enables the Normalized Cross Comparison method which is more stable, but possibly less accurate and may give false positives or negatives. Testing images fails with 'morphology not found\\\" for ImageMagick in the log Your version of imagemagick is old. Upgrade imagemagick, or pass -DCOMPARATOR=old to cmake, otherwise the comparison reliability is reduced. I moved the dependencies I built and now openscad won't run It isn't advised to move them because the build is using RPATH hard coded into the openscad binary. You may try to workaround by setting\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"826f583d-b27c-446a-84d5-9cda36f0994b":{"__data__":"{\"id_\":\"826f583d-b27c-446a-84d5-9cda36f0994b\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"5a41cd06-ea52-4689-957d-8fc61b886f8b\",\"metadata\":{},\"hash\":\"uEP/i+yFb7rScX30ywNkWXSnSphJxABJ+hPF+UQV9AE=\"},\"NEXT\":{\"nodeId\":\"93bb886a-96b8-43ae-bd40-8a20fb52ba41\",\"metadata\":{},\"hash\":\"Hzm9G35jZw4yjv7Tfhl/HhPLLzqOqzhZLGYQSunvKIw=\"}},\"hash\":\"Af4x4eHvj+FJp6F7mBEsdInScuQfZrizzDvpWWl13u4=\",\"text\":\"You may try to workaround by setting the LD_LIBRARY_PATH environment variable to place yourpath/lib first in the list of paths it searches. If all else fails, you can re-run the entire dependency build process but export the BASEDIR environment variable to your desired location, before you run the script to set environment variables. Tricks and tips Reduce space of dependency build After you have built the dependencies you can free up space by removing the $BASEDIR/src directory - where $BASEDIR defaults to $HOME/openscad_deps. Preferences OpenSCAD's config file is kept in ~/.config/OpenSCAD/OpenSCAD.conf. Setup environment to start developing OpenSCAD in Ubuntu 11.04 The following paragraph describes an easy way to setup a development environment for OpenSCAD in Ubuntu 11.04. After executing the following steps QT Creator can be used to graphically start developing/debugging OpenSCAD. Add required PPA repositories: # sudo add-apt-repository ppa:chrysn/openscad Update and install required packages: # sudo apt-get update # sudo apt-get install git build-essential qtcreator libglew1.5-dev libopencsg-dev libcgal-dev libeigen2-dev bison flex Get the OpenSCAD sources: # mkdir ~/src # cd ~/src # git clone https://github.com/openscad/openscad.git Build OpenSCAD using the command line: # cd ~/src/openscad # qmake # make Build OpenSCAD using QT Creator: Just open the project file openscad.pro (CTRL+O) in QT Creator and hit the build all (CTRL+SHIFT+B) and run button (CTRL+R). The Clang Compiler There is experimental support for building with the Clang compiler under linux. Clang is faster, uses less RAM, and has different error messages than GCC. To use it, first of all you need CGAL of at least version 4.0.2, as prior versions have a bug that makes clang unusable. Then, run this script before you build OpenSCAD. source scripts/setenv-unibuild.sh clang Clang support depends on your system's QT installation having a clang enabled qmake.conf file. For example, on Ubuntu, this is under\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"93bb886a-96b8-43ae-bd40-8a20fb52ba41":{"__data__":"{\"id_\":\"93bb886a-96b8-43ae-bd40-8a20fb52ba41\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"826f583d-b27c-446a-84d5-9cda36f0994b\",\"metadata\":{},\"hash\":\"Af4x4eHvj+FJp6F7mBEsdInScuQfZrizzDvpWWl13u4=\"},\"NEXT\":{\"nodeId\":\"5f23515b-bfe4-4519-8ce5-401ad26335bd\",\"metadata\":{},\"hash\":\"p+BFkkPljy5jseNQRD4QnNuRfiUTt5J5zhS06OWbaF4=\"}},\"hash\":\"Hzm9G35jZw4yjv7Tfhl/HhPLLzqOqzhZLGYQSunvKIw=\",\"text\":\"For example, on Ubuntu, this is under /usr/share/qt4/mkspecs/unsupported/linux-clang/qmake.conf. BSD clang-building may require a good deal of fiddling and is untested, although eventually it is planned to move in this direction as the BSDs (not to mention OSX) are moving towards favoring clang as their main compiler. OpenSCAD includes convenience scripts to cross-build Windows installer binaries using the MXE system (http://mxe.cc). If you wish to use them, you can first install the MXE Requirements such as cmake, perl, scons, using your system's package manager (click to view a complete list of requirements). Then you can perform the following commands to download OpenSCAD source and build a windows installer: git clone https://github.com/openscad/openscad.git cd openscad source ./scripts/setenv-mingw-xbuild.sh ./scripts/mingw-x-build-dependencies.sh ./scripts/release-common.sh mingw32 The x-build-dependencies process takes several hours, mostly to cross-build QT. It also requires several gigabytes of disk space. If you have multiple CPUs you can speed up things by running export NUMCPU=x before running the dependency build script. By default it builds the dependencies in $HOME/openscad_deps/mxe. You can override the mxe installation path by setting the BASEDIR environment variable before running the scripts. The OpenSCAD binaries are built into a separate build path, openscad/mingw32. Note that if you want to then build linux binaries, you should log out of your shell, and log back in. The 'setenv' scripts, as of early 2013, required a 'clean' shell environment to work. If you wish to cross-build manually, please follow the steps below and/or consult the release-common.sh source code. Setup The easiest way to cross-compile OpenSCAD for Windows on Linux or Mac is to use mxe (M cross environment). You must install git to get it. Once you have git, navigate to where you want to keep the mxe files in a terminal window and run: git clone git://github.com/mxe/mxe.git Add the following line to your ~/.bashrc file: export PATH=/<where mxe is installed>/usr/bin:$PATH\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"5f23515b-bfe4-4519-8ce5-401ad26335bd":{"__data__":"{\"id_\":\"5f23515b-bfe4-4519-8ce5-401ad26335bd\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"93bb886a-96b8-43ae-bd40-8a20fb52ba41\",\"metadata\":{},\"hash\":\"Hzm9G35jZw4yjv7Tfhl/HhPLLzqOqzhZLGYQSunvKIw=\"},\"NEXT\":{\"nodeId\":\"834e2a70-6460-4e29-86f7-d3cf32652c49\",\"metadata\":{},\"hash\":\"Rkm/qO77xum2+m/KMPz6mZ2YHIGvk0eNkQdZacZH6OQ=\"}},\"hash\":\"p+BFkkPljy5jseNQRD4QnNuRfiUTt5J5zhS06OWbaF4=\",\"text\":\"export PATH=/<where mxe is installed>/usr/bin:$PATH replacing <where mxe is installed> with the appropriate path. Requirements The requirements to cross-compile for Windows are just the requirements of mxe. They are listed, along with a command for installing them here. You don't need to type 'make'; this makes everything and take up >10 GB of diskspace. You can instead follow the next step to compile only what's needed for openscad. Now that you have the requirements for mxe installed, you can build OpenSCAD's dependencies (CGAL, Opencsg, MPFR, and Eigen2). Just open a terminal window, navigate to your mxe installation and run: make mpfr eigen opencsg cgal qt This can take a few hours, because it has to build things like gcc, qt, and boost. Just go calibrate your printer or something while you wait. To speed things up, you might want do something like \\\"make -j 4 JOBS=2\\\" for parallel building. See the mxe tutorial for more details. Optional: If you want to build an installer, you need to install the nullsoft installer system. It should be in your package manager, called \\\"nsis\\\". Build OpenSCAD Now that all the requirements have been met, all that remains is to build OpenSCAD itself. Open a terminal window and enter: git clone git://github.com/openscad/openscad.git cd openscad Then get MCAD: git submodule init git submodule update You need to create a symbolic link here for the build system to find the libraries: ln -s /<where mxe is installed>/usr/i686-pc-mingw32/ mingw-cross-env again replacing <where mxe is installed> with the appropriate path Now to build OpenSCAD run: i686-pc-mingw32-qmake CONFIG+=mingw-cross-env openscad.pro make This creates openscad.exe in ./release and you can build an installer with it as described in the instructions for building with Microsoft Visual C++, described here. The difference is that instead of right-clicking on the *.nsi file you run: makensis installer.nsis\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"834e2a70-6460-4e29-86f7-d3cf32652c49":{"__data__":"{\"id_\":\"834e2a70-6460-4e29-86f7-d3cf32652c49\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"5f23515b-bfe4-4519-8ce5-401ad26335bd\",\"metadata\":{},\"hash\":\"p+BFkkPljy5jseNQRD4QnNuRfiUTt5J5zhS06OWbaF4=\"},\"NEXT\":{\"nodeId\":\"7491d9d6-81c1-49df-9d61-84e244bb956c\",\"metadata\":{},\"hash\":\"tuXoJsw3r6QMXlJZIEl0qhc8ka5ww3Td7c2/5e4lHs8=\"}},\"hash\":\"Rkm/qO77xum2+m/KMPz6mZ2YHIGvk0eNkQdZacZH6OQ=\",\"text\":\"makensis installer.nsis Note that as of early 2013, OpenSCAD's 'scripts/release-common.sh' automatically uses the version of nsis that comes with the MXE cross build system, so you may wish to investigate the release-common.sh source code to see how it works, if you have troubles. This is a set of instructions for building OpenSCAD with the Microsoft Visual C++ compilers. It has not been used since circa 2012 and is unlikely to work properly. It is maintained here for historical reference purposes. A newer build is being attempted with the Msys2 system, please see http://en.wikibooks.org/wiki/OpenSCAD_User_Manual/Building_on_Microsoft_Windows --- This MSVC build is as static as reasonable, with no external DLL dependencies that are not shipped with Windows Note: It was last tested on the Dec 2011 build. Newer checkouts of OpenSCAD may not build correctly or require extensive modification to compile under MSVC. OpenSCAD releases of 2012 were typically cross-compiled from linux using the Mingw & MXE system. See Cross- compiling for Windows on Linux or Mac OS X. Downloads start by downloading: Visual Studio Express http://download.microsoft.com/download/E/8/E/E8EEB394-7F42-4963-A2D8- 29559B738298/VS2008ExpressWithSP1ENUX1504728.iso QT (for vs2008) http://get.qt.nokia.com/qt/source/qt-win-opensource-4.7.2-vs2008.exe git http://msysgit.googlecode.com/files/Git-1.7.4-preview20110204.exe glew https://sourceforge.net/projects/glew/files/glew/1.5.8/glew-1.5.8-win32.zip/download cmake http://www.cmake.org/files/v2.8/cmake-2.8.4-win32-x86.exe boost http://www.boostpro.com/download/boost_1_46_1_setup.exe cgal https://gforge.inria.fr/frs/download.php/27647/CGAL-3.7-Setup.exe OpenCSG http://www.opencsg.org/OpenCSG-1.3.2.tar.gz\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"7491d9d6-81c1-49df-9d61-84e244bb956c":{"__data__":"{\"id_\":\"7491d9d6-81c1-49df-9d61-84e244bb956c\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"834e2a70-6460-4e29-86f7-d3cf32652c49\",\"metadata\":{},\"hash\":\"Rkm/qO77xum2+m/KMPz6mZ2YHIGvk0eNkQdZacZH6OQ=\"},\"NEXT\":{\"nodeId\":\"6f140ea4-7b65-44c9-a992-e36505aa6292\",\"metadata\":{},\"hash\":\"irEK/C/VSB7LU7FbnnQ5hDGCpZy8U3Ps5Spq4ufdC1I=\"}},\"hash\":\"tuXoJsw3r6QMXlJZIEl0qhc8ka5ww3Td7c2/5e4lHs8=\",\"text\":\"eigen2 http://bitbucket.org/eigen/eigen/get/2.0.15.zip gmp/mpfr http://holoborodko.com/pavel/downloads/win32_gmp_mpfr.zip MinGW http://netcologne.dl.sourceforge.net/project/mingw/Automated%20MinGW%20Installer/mingw-get-inst/mingw-get-inst- 20110316/mingw-get-inst-20110316.exe Installing Install Visual Studio No need for siverlight or mssql express You can use a virtual-CD program like MagicDisc to mount the ISO file and install without using a CD Install QT Install to default location C:\\\\Qt\\\\4.7.2\\\\ Install Git Click Run Git and included Unix tools from the Windows Command Prompt despite the big red letters warning you not to. Install Cmake Check the 'Add cmake to the system path for the current user' checkbox Install to default location C:\\\\Program Files\\\\CMake 2.8 Install Boost Select the VC++ 9.0 vs2008 radio Check the 'multithreaded static runtime' checkbox only Install into C:\\\\boost_1_46_1\\\\ Install CGAL Note - CGAL 3.9 fixes several bugs in earlier versions of CGAL, but CGAL 3.9 does not compile under MSVC without extensive patching. Please keep that in mind when compiling OpenSCAD with MSVC - there may be bugs due to the outdated version of CGAL required to use MSVC. Note its not a binary distribution, just an installer that installs the source. No need for CGAL Examples and Demos Make sure mpfr and gmp precompiled libs is checked The installer wants you to put this in C:\\\\Program Files\\\\CGAL-3.7\\\\ I used C:\\\\CGAL-3.7\\\\ Make sure CGAL_DIR environment checked. Install MinGW Make sure you select the MSYS Basic System under components Extract downloaded win32_gmp_mpfr.zip file to C:\\\\win32_gmp_mpfr\\\\ Replace the mpfr and gmp .h files in CGAL with the ones from win32_gmp_mpfr Delete, or move to a temp folder, all files in CGAL-3.7\\\\auxiliary\\\\gmp\\\\include folder\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"6f140ea4-7b65-44c9-a992-e36505aa6292":{"__data__":"{\"id_\":\"6f140ea4-7b65-44c9-a992-e36505aa6292\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"7491d9d6-81c1-49df-9d61-84e244bb956c\",\"metadata\":{},\"hash\":\"tuXoJsw3r6QMXlJZIEl0qhc8ka5ww3Td7c2/5e4lHs8=\"},\"NEXT\":{\"nodeId\":\"11ddb4d3-2a31-4f18-9390-82fb117347ed\",\"metadata\":{},\"hash\":\"r5wCtIf82ck0dmUmubFQ7lnqNhnREGFHzkaVQ5h/Lw0=\"}},\"hash\":\"irEK/C/VSB7LU7FbnnQ5hDGCpZy8U3Ps5Spq4ufdC1I=\",\"text\":\"Copy all the .h files in C:\\\\win32_gmp_mpfr\\\\gmp\\\\Win32\\\\Release to CGAL-3.7\\\\auxiliary\\\\gmp\\\\include Copy all the .h files in C:\\\\win32_gmp_mpfr\\\\mpfr\\\\Win32\\\\Release to CGAL-3.7\\\\auxiliary\\\\gmp\\\\include Replace the mpfr and gmp libs in CGAL with the ones from win32_gmp_mpfr Delete, or move to a temp folder, all (06/20/2011 libmpfr-4.lib is needed 7/19/11 - i didnt need it) files in CGAL-3.7\\\\auxiliary\\\\gmp\\\\lib folder. Copy C:\\\\win32_gmp_mpfr\\\\gmp\\\\Win32\\\\Release\\\\gmp.lib to CGAL-3.7\\\\auxiliary\\\\gmp\\\\lib Copy C:\\\\win32_gmp_mpfr\\\\mpfr\\\\Win32\\\\Release\\\\mpfr.lib to CGAL-3.7\\\\auxiliary\\\\gmp\\\\lib Go into CGAL-3.7\\\\auxiliary\\\\gmp\\\\lib and copy gmp.lib to gmp-vc90-mt-s.lib, and mpfr.lib to mpfr-vc90-mt-s.lib (so the linker can find them in the final link of openscad.exe) To get OpenSCAD source code: Open \\\"Git Bash\\\" (or MingW Shell) (the installer may have put a shortcut on your desktop). This launches a command line window. Type cd c: to change the current directory. Type git clone git://github.com/openscad/openscad.git This puts OpenSCAD source into C:\\\\openscad\\\\ Where to put other files: I put all the dependencies in C:\\\\ so for example, C:\\\\eigen2\\\\ C:\\\\glew-1.5.8\\\\ C:\\\\OpenCSG-1.3.2\\\\ .tgz can be extracted with tar -zxvf from the MingW shell, or Windows tools like 7-zip. Rename and move sub-directories if needed. I.e eigen- eigen-0938af7840b0 should become c:\\\\eigen2, with the files like COPYING and CMakeLists.txt directly under it. c:\\\\glew-1.5.8 should have\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"11ddb4d3-2a31-4f18-9390-82fb117347ed":{"__data__":"{\"id_\":\"11ddb4d3-2a31-4f18-9390-82fb117347ed\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"6f140ea4-7b65-44c9-a992-e36505aa6292\",\"metadata\":{},\"hash\":\"irEK/C/VSB7LU7FbnnQ5hDGCpZy8U3Ps5Spq4ufdC1I=\"},\"NEXT\":{\"nodeId\":\"4f28aec4-e6cc-42ed-86a0-a94ebc372899\",\"metadata\":{},\"hash\":\"2RY8Il1K8r2wzGlveWZI/LHozUWmP7FnOSdHzFXv5lc=\"}},\"hash\":\"r5wCtIf82ck0dmUmubFQ7lnqNhnREGFHzkaVQ5h/Lw0=\",\"text\":\"c:\\\\glew-1.5.8 should have 'include' and 'lib' directly under it. Compiling Dependencies For compilation I use the QT Development Command Prompt Start->Program Files->Qt by Nokia v4.7.2 (VS2008 OpenSource)->QT 4.7.2 Command Prompt Qt Qt needs to be recompiled to get a static C runtime build. To do so, open the command prompt and do: configure -static -platform win32-msvc2008 -no-webkit Configure takes several minutes to finish processing. After it is done, open up the file Qt\\\\4.7.2\\\\mkspecs\\\\win32-msvc2008\\\\qmake.conf and replace every instance of -MD with -MT. Then: nmake This takes a very, very long time. Have a nap. Get something to eat. On a Pentium 4, 2.8GHZ CPU with 1 Gigabyte RAM, Windows XP, it took more than 7 hours, (that was with -O2 turned off) CGAL cd C:\\\\CGAL-3.7\\\\ set BOOST_ROOT=C:\\\\boost_1_46_1\\\\ cmake . Now edit the CMakeCache.txt file. Replace every instance of /MD with /MT . Now, look for a line like this: CMAKE_BUILD_TYPE:STRING=Debug Change Debug to Release. Now re-run cmake cmake . It should scroll by, watch for lines saying \\\"--Building static libraries\\\" and \\\"--Build type: Release\\\" to confirm the proper settings. Also look for /MT in the CXXFLAGS line. When it's done, you can do the build: nmake You should now have a CGAL-vc90-mt-s.lib file under C:\\\\CGAL-3.7\\\\lib . If not, see Troubleshooting, below. OpenCSG Launch Visual Express. cd C:\\\\OpenCSG-1.3.2 vcexpress OpenCSG.sln Substitute devenv for vcexpress if you are not using the express version Manually step through project upgrade wizard Make sure the runtime library settings for all projects is for Release (not Debug) Click Build/Configuration Manager Select \\\"Release\\\" from \\\"Configuration:\\\" drop down menu\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"4f28aec4-e6cc-42ed-86a0-a94ebc372899":{"__data__":"{\"id_\":\"4f28aec4-e6cc-42ed-86a0-a94ebc372899\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"11ddb4d3-2a31-4f18-9390-82fb117347ed\",\"metadata\":{},\"hash\":\"r5wCtIf82ck0dmUmubFQ7lnqNhnREGFHzkaVQ5h/Lw0=\"},\"NEXT\":{\"nodeId\":\"40f6d154-be08-4eaf-819c-addc6c9ada6a\",\"metadata\":{},\"hash\":\"tBJCsiR/9/YysuCBvAU0z3//DHFA4cxk7FHTc/fbUFw=\"}},\"hash\":\"2RY8Il1K8r2wzGlveWZI/LHozUWmP7FnOSdHzFXv5lc=\",\"text\":\"Click Build/Configuration Manager Select \\\"Release\\\" from \\\"Configuration:\\\" drop down menu Hit Close Make sure the runtime library setting for OpenCSG project is set to multi-threaded static Open the OpenCSG project properties by clicking menu item \\\"Project->OpenCSG Properties\\\" (might be just \\\"Properties\\\") Make sure it says \\\"Active(Release)\\\" in the \\\"Configuration:\\\" drop down menu Click 'Configuration Properties -> C/C++ -> Code Generation' Make sure \\\"Runtime Library\\\" is set to \\\"Multi-threaded (/MT)\\\" Click hit OK Make sure the runtime library setting for glew_static project is set to multi-threaded static In \\\"Solution Explorer - OpenCSG\\\" pane click \\\"glew_static\\\" project Open the OpenCSG project properties by clicking menu item \\\"Project->OpenCSG Properties\\\" (might be just \\\"Properties\\\") Make sure it says \\\"Active(Release)\\\" in the \\\"Configuration:\\\" drop down menu Click C/C++ -> Code Generation Make sure \\\"Runtime Library\\\" is set to \\\"Multi-threaded (/MT)\\\" Click hit OK Close Visual Express saving changes Build OpenCSG library. You can use the GUI Build/Build menu (the Examples project might fail, but glew and OpenCSG should succeed). Alternatively you can use the command line: cmd /c vcexpress OpenCSG.sln /build Again, substitute devenv if you have the full visual studio The cmd /c bit is needed otherwise you return to the shell immediately and must wait for the build process to complete (there is no indication that this is happening apart from viewing in task manager). OpenSCAD Bison/Flex: Open the mingw shell and type mingw-get install msys-bison. Then do the same for flex: mingw-get install msys-flex Open the QT Shell, and copy/paste the following commands cd C:\\\\openscad set INCLUDE=%INCLUDE%C:\\\\CGAL-3.7\\\\include;C:\\\\CGAL-3.7\\\\auxiliary\\\\gmp\\\\include; set INCLUDE=%INCLUDE%C:\\\\boost_1_46_1;C:\\\\glew-1.5.8\\\\include;C:\\\\OpenCSG-1.3.2\\\\include;C:\\\\eigen2\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"40f6d154-be08-4eaf-819c-addc6c9ada6a":{"__data__":"{\"id_\":\"40f6d154-be08-4eaf-819c-addc6c9ada6a\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"4f28aec4-e6cc-42ed-86a0-a94ebc372899\",\"metadata\":{},\"hash\":\"2RY8Il1K8r2wzGlveWZI/LHozUWmP7FnOSdHzFXv5lc=\"},\"NEXT\":{\"nodeId\":\"ad35d9ea-9ec3-4f23-832c-28eef7b5e701\",\"metadata\":{},\"hash\":\"kWqTBebnTYDgQOGxF8rswMCpPMQz9bFlFzbBGEUmJk0=\"}},\"hash\":\"tBJCsiR/9/YysuCBvAU0z3//DHFA4cxk7FHTc/fbUFw=\",\"text\":\"set LIB=%LIB%C:\\\\CGAL-3.7\\\\lib;C:\\\\CGAL-3.7\\\\auxiliary\\\\gmp\\\\lib; set LIB=%LIB%C:\\\\boost_1_46_1\\\\lib;C:\\\\glew-1.5.8\\\\lib;C:\\\\OpenCSG-1.3.2\\\\lib qmake nmake -f Makefile.Release Wait for the nmake to end. There are usually a lot of non-fatal warnings about the linker. On success, an openscad.exe file appears in the release folder. Enjoy. Building an installer Download and install NSIS from http://nsis.sourceforge.net/Download Put the FileAssociation.nsh macro from http://nsis.sourceforge.net/File_Association in the NSIS Include directory, C:\\\\Program Files\\\\NSIS\\\\Include Run 'git submodule init' and 'git submodule update' to download the MCAD system (https://github.com/elmom/MCAD) into the openscad/libraries folder. Copy the OpenSCAD \\\"libraries\\\" and \\\"examples\\\" directory into the \\\"release\\\" directory Copy OpenSCAD's \\\"scripts/installer.nsi\\\" to the \\\"release\\\" directory. Right-click on the file and compile it with NSIS. It produces a nice, easy installer. Enjoy. Compiling the regression tests Follow all the above steps, build openscad, run it, and test that it basically works. Install Python 2.x (not 3.x) from http://www.python.org Install Imagemagick from http://www.imagemagick.org read openscad\\\\docs\\\\testing.txt Go into your QT shell set PATH=%PATH%;C:\\\\Python27 (or your version of python) cd c:\\\\openscad\\\\tests\\\\ cmake . -DCMAKE_BUILD_TYPE=Release Edit the CMakeCache.txt file, search/replace /MD to /MT cmake . nmake -f Makefile This should produce a number of test .exe files in your directory. Now run ctest If you have link problems, see Troubleshooting, below. Troubleshooting Linker errors If you have errors during linking, the first step is to improve debug logging, and redirect to a file. Open Openscad.pro and uncomment this line:\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"ad35d9ea-9ec3-4f23-832c-28eef7b5e701":{"__data__":"{\"id_\":\"ad35d9ea-9ec3-4f23-832c-28eef7b5e701\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"40f6d154-be08-4eaf-819c-addc6c9ada6a\",\"metadata\":{},\"hash\":\"tBJCsiR/9/YysuCBvAU0z3//DHFA4cxk7FHTc/fbUFw=\"},\"NEXT\":{\"nodeId\":\"7956c7b6-cd7e-4780-82d1-b9c0bbb1b26e\",\"metadata\":{},\"hash\":\"OK27eV2x/Bk/hRmARVsV+dz4y41QxsupFRM200Yv/qc=\"}},\"hash\":\"kWqTBebnTYDgQOGxF8rswMCpPMQz9bFlFzbBGEUmJk0=\",\"text\":\"Open Openscad.pro and uncomment this line: QMAKE_LFLAGS   += -VERBOSE Now rerun nmake -f Makefile.Release > log.txt You can use a program like 'less' (search with '/') or wordpad to review the log. To debug these errors, you must understand basics about Windows linking. Windows links to its standard C library with basic C functions like malloc(). But there are four different ways to do this, as follows: compiler switch - type - linked runtime C library /MT - Multithreaded static Release - link to LIBCMT.lib /MTd - Multithreaded static Debug - link to LIBCMTD.lib /MD - Multithreaded DLL Release - link to MSVCRT.lib (which itself helps link to the DLL) /MDd - Multithreaded DLL Debug - link to MSVCRTD.lib (which itself helps link to the DLL) All of the libraries that are link together in a final executable must be compiled with the same type of linking to the standard C library. Otherwise, you get link errors like, \\\"LNK2005 - XXX is already defined in YYY\\\". But how can you track down which library wasn't linked properly? 1. Look at the log, and 2. dumpbin.exe dumpbin.exe dumpbin.exe can help you determine what type of linking your .lib or .obj files were created with. For example, dumpbin.exe /all CGAL.lib | find /i \\\"DEFAULTLIB\\\" gives you a list of DEFAULTLIB symbols inside of CGAL.lib. Look for LIBCMT, LIBCMTD, MSVCRT, or MSVCRTD. That tells you, according to the above table, whether it was built Static Release, Static Debug, DLL Release, or DLL Debug. (DLL, of course means Dynamic Link Library in this conversation.) This can help you track down, for example, linker errors about conflicting symbols in LIBCMT and LIBCMTD. dumpbin.exe can also help you understand errors involving unresolved external symbols. For example, if you get an error about unresolved external symbol ___GLEW_NV_occlusion_query, but your VERBOSE error log says the program linked in glew32.lib, then you can\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"7956c7b6-cd7e-4780-82d1-b9c0bbb1b26e":{"__data__":"{\"id_\":\"7956c7b6-cd7e-4780-82d1-b9c0bbb1b26e\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"ad35d9ea-9ec3-4f23-832c-28eef7b5e701\",\"metadata\":{},\"hash\":\"kWqTBebnTYDgQOGxF8rswMCpPMQz9bFlFzbBGEUmJk0=\"},\"NEXT\":{\"nodeId\":\"4a7dcfbd-e215-478f-9db8-3cfcdd35eeb6\",\"metadata\":{},\"hash\":\"7rj4ss94rfOdXMsnD3CQI5qCpc68NkflfxYbGfF9pMM=\"}},\"hash\":\"OK27eV2x/Bk/hRmARVsV+dz4y41QxsupFRM200Yv/qc=\",\"text\":\"dumpbin.exe /all glew32.lib | find /i \\\"occlusion\\\" to see if the symbol is actually there. You may see a mangled symbol, with __impl, which gives you another clue with which you can google. In this particular example, glew32s.lib (s=static) should have been linked instead of glew32.lib. CGAL CGAL-vc90-mt-s.lib After compilation, it is possible that you might get a file named CGAL-vc90-mt.lib or CGAL-vc90-mt-gd.lib instead of CGAL-vc90-mt-s.lib. There are many possibilities: you accidentally built the wrong version, or you may have built the right version and VCExpress named it wrong. To double check, and fix the problem, you can do the following: cd C:\\\\CGAL-3.7\\\\lib dumpbin /all CGAL-vc90-mt.lib | find /i \\\"DEFAULTLIB\\\" (if you have mt-gd, use that name instead) If this shows lines referencing LIBCMTD, MSVCRT, or MSVCRTD then you accidentally built the debug and/or dynamic version, and you need to clean the build, and try to build again with proper settings to get the multi-threaded static release version. However, if it just says LIBCMT, then you are probably OK. Look for another line saying DEFAULTLIB:CGAL-vc90-mt-s. If it is there, then you can probably just rename the file and have it work. move CGAL-vc90-mt.lib CGAL-vc90-mt-s.lib Visual Studio build You can build CGAL using the GUI of visual studio, as an alternative to nmake. You have to use an alternate cmake syntax. Type 'cmake' by itself and it gives you a list of 'generators' that are valid for your machine; for example Visual Studio Express is cmake -G\\\"Visual Studio 9 2008\\\" .. That should get you a working .sln (solution) file. Then run this: vcexpress CGAL.sln Modify the build configure target to Release (not Debug) and change the properties of the projects to be '/MT' multithreaded static builds. This\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"4a7dcfbd-e215-478f-9db8-3cfcdd35eeb6":{"__data__":"{\"id_\":\"4a7dcfbd-e215-478f-9db8-3cfcdd35eeb6\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"7956c7b6-cd7e-4780-82d1-b9c0bbb1b26e\",\"metadata\":{},\"hash\":\"OK27eV2x/Bk/hRmARVsV+dz4y41QxsupFRM200Yv/qc=\"},\"NEXT\":{\"nodeId\":\"f379d5de-a624-43a8-9f83-4813fd258eaf\",\"metadata\":{},\"hash\":\"pc7yVFMMvofpsnrkmHhuEE/qL2TAxPIlfG5ch1ZvHTM=\"}},\"hash\":\"7rj4ss94rfOdXMsnD3CQI5qCpc68NkflfxYbGfF9pMM=\",\"text\":\"This is the similar procedure used to build OpenCSG, so refer to those instructions above for more detail. Note for Unix users The 'MingW Shell' (Start/Programs) provide tools like bash, sed, grep, vi, tar, &c. The C:\\\\ drive is under '/c/'. MingW has packages, for example: mingw-get install msys-unzip downloads and installs the 'unzip' program. Git contains some programs by default, like perl. The windows command shell has cut/paste - hit alt-space. You can also change the scrollback buffer settings. References Windows Building, OpenSCAD mailing list, 2011 May. C Run-Time Libraries linking, Microsoft.com for Visual Studio 8 (The older manual is good too, here) old nabble on _isatty, flex Windows vs. Unix: Linking dynamic load modules by Chris Phoenix Static linking in CMAKE under MS Visual C (cmake.org) __imp , declspec(dllimport), and unresolved references (stackoverflow.com) For building OpenSCAD, see https://github.com/openscad/openscad/blob/master/README.md Force Goldfeather OpenSCAD display issue with coincident faces Chapter 9 -- Frequently Asked Questions OpenSCAD User Manual General How is OpenSCAD pronounced? The intended pronunciation is: Open - ESS - CAD Using OpenSCAD for Windows in VM's or via Remote desktop (Windows RDP or Linux XfreeRDP etc) It is likely that your VM or session does not support the required version of OpenCSG/OpenGL for correct OpenSCAD previews. This can be resolved by use of software rendering via the Mesa driver from the MSYS2 package. Download the Repo (the link at File: in the URLs below) for the 64-bit, or 32-bit version as appropriate for your Windows installation: 64bit - mingw64 Repo at https://packages.msys2.org/package/mingw-w64-x86_64-mesa?repo=mingw64 32bit - mingw32 Repo at https://packages.msys2.org/package/mingw-w64-i686-mesa?repo=mingw32 That file is a ...pkg.tar.xz compressed file, a format unsupported in Windows.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f379d5de-a624-43a8-9f83-4813fd258eaf":{"__data__":"{\"id_\":\"f379d5de-a624-43a8-9f83-4813fd258eaf\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"4a7dcfbd-e215-478f-9db8-3cfcdd35eeb6\",\"metadata\":{},\"hash\":\"7rj4ss94rfOdXMsnD3CQI5qCpc68NkflfxYbGfF9pMM=\"},\"NEXT\":{\"nodeId\":\"bb893d8c-39f3-45d8-b8cb-2da9bba66677\",\"metadata\":{},\"hash\":\"IRIfM2vOd394qTaljeHBGP5YSGleuaVYAteacm+lBvg=\"}},\"hash\":\"pc7yVFMMvofpsnrkmHhuEE/qL2TAxPIlfG5ch1ZvHTM=\",\"text\":\"That file is a ...pkg.tar.xz compressed file, a format unsupported in Windows. Use 7-zip or WinRAR to extract the file contents. Extract the file mingw[64 or 32]\\\\bin\\\\opengl32.dll, (the file is still named opengl32.dll for the 64bit version). Copy opengl32.dll to the OpenSCAD installation directory, i.e. with the openscad.exe file, likely a sub-directory of c:\\\\program files [for 64bits] or c:\\\\program files(x86) [for 32bits]. Restart OpenSCAD and preview should function normally. Display Preview doesn't appear to work at all Some systems, in particular Intel GPUs on Windows, tend to have old or broken OpenGL drivers. This affects preview rendering when using difference or intersection operators. The following tends to improve the situation: Edit->Preferences->Advanced->Force Goldfeather (see screenshot). What are those strange flickering artifacts in the preview? This is typically caused by differencing objects that share one or more faces, e.g.: cube_size = 20; difference() { cube(cube_size, center = true); cylinder(r = 10, h = cube_size, center = true); } In some cases the final render works fine, but designs with coincident resulting faces should be considered a design with undefined behavior, as a proper render result is not guaranteed. The fundamental source of the issue is not a bug, but an intrinsic property of the inability to rigorously compare floating point values which might have undergone trigonometric operations (like rotations) resulting in irrational values that simply cannot be represented exactly in any manner. Because of this you can get near-coincident surfaces where part of the surface is inside and part of the surface is outside, or zero-volume regions, resulting in a render error that the output is not manifold. In simple tests like this example, the render will typically be okay giving false confidence in this approach, but if both pieces were subject to an equal rotation it can fail to render in a manner which is slightly dependent on the platform the OpenSCAD display issue with convexity setting too low OpenSCAD polyhedron with flipped face program is running on.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"bb893d8c-39f3-45d8-b8cb-2da9bba66677":{"__data__":"{\"id_\":\"bb893d8c-39f3-45d8-b8cb-2da9bba66677\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"f379d5de-a624-43a8-9f83-4813fd258eaf\",\"metadata\":{},\"hash\":\"pc7yVFMMvofpsnrkmHhuEE/qL2TAxPIlfG5ch1ZvHTM=\"},\"NEXT\":{\"nodeId\":\"db0c0d8b-b389-47e4-8c66-688b3ec3fd6d\",\"metadata\":{},\"hash\":\"4VdNGFRHp8KX0U8B8/V4S+TMxs12lAEK92UFSZhWvB8=\"}},\"hash\":\"IRIfM2vOd394qTaljeHBGP5YSGleuaVYAteacm+lBvg=\",\"text\":\"setting too low OpenSCAD polyhedron with flipped face program is running on. This will typically result in a warning at render, and a rendered piece being removed from the final output. The solution to this is to always provide a clear overlap for surfaces which are to be removed, such as by adding a small value called an epsilon: cube_size = 20; difference() { cube(cube_size, center = true); cylinder(r = 10, h = cube_size+0.01, center = true); } Note that a similar issue occurs with unions, where coincident faces to be merged must also be given an epsilon value to guarantee they are always inside. There is a second preview-only flickering result which can also occur with faces that are not even supposed to be visible in the final result, for example because they're were negative faces used for removal by a difference() operation. This second case impact of fully properly removed faces (or negative faces) is an artifact of the library used for drawing the preview, and will not affect the render. If a clean preview result is desired such as for imaging output, these can be adjusted by an epsilon value in the same manner. See this discussion for other details. Why are some parts (e.g. holes) of the model not rendered correctly? This can happen when using features like linear_extrude() or when importing objects. The convexity of the objects is not known. For more complex objects, the convexity parameter can be used to specify the value. Note that higher values cause a slowdown in preview. difference() { linear_extrude(height = 15 /* , convexity = 2 */) { difference() { square([50, 50]); translate([10, 10]) circle(5); } } translate([25, 25]) cube([5, 5, 40], center = true); } The user manual (section Extrude parameters for all extrusion modes) describes how to calculate the number that should be given to the convexity parameter. Why is my model appearing with F5 but not F6? This can be caused by polyhedrons with flipped faces. This can be visualized in \\\"Thrown Together\\\" display mode. See misordered faces for details.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"db0c0d8b-b389-47e4-8c66-688b3ec3fd6d":{"__data__":"{\"id_\":\"db0c0d8b-b389-47e4-8c66-688b3ec3fd6d\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"bb893d8c-39f3-45d8-b8cb-2da9bba66677\",\"metadata\":{},\"hash\":\"IRIfM2vOd394qTaljeHBGP5YSGleuaVYAteacm+lBvg=\"},\"NEXT\":{\"nodeId\":\"d932c917-a58e-427a-a77c-f0f1de6de167\",\"metadata\":{},\"hash\":\"2G/XtSy/36T5EteC6yRDOt3OByJQOInGixCIe3/kjYc=\"}},\"hash\":\"4VdNGFRHp8KX0U8B8/V4S+TMxs12lAEK92UFSZhWvB8=\",\"text\":\"See misordered faces for details. points = [[5,5,0],[5,-5,0],[-5,-5,0],[-5,5,0],[0,0,3]]; faces = [[0,1,4],[1,2,4],[2,3,4],[3,4,0],[1,0,3],[2,1,3]]; polyhedron(points, faces); If the model imports external STL files, see also import related question. Why is the preview so slow? http://forum.openscad.org/Why-is-for-so-slow-tp11511p11531.html This is hard to explain, but in essence, having intersections as the negative objects in difference is expensive. The preview rendering algorithm allows having only primitive objects as negatives, and everything else has to be unpacked. For example (using A+B = union() / A-B = difference() / A*B = intersection()): A - B*C - D*E becomes: A-B-D + A-B-E + A-C-D + A-C-E ..and if A is more complex: A+B - C*D - E*F becomes: A-C-E + A-C-F + A-D-E + A-D-F + B-C-E + B-C-F + B-D-E + B-D-F All combinations have to be rendered, which can take some time, especially on older GPUs, and especially on low-end Intel GPUs. Import Why is my imported STL file appearing with F5 but not F6? This is mostly caused by bad STL files, the best bet is to verify the STL file in a tool like Blender, MeshLab or NetFabb and fix the issues. In essence the model needs to be manifold to be processed in OpenSCAD. The reason for the model still appearing in preview mode is that there is no real geometry calculation going on yet. The preview simply draws the triangles from the STL. There is one specific issue that causes problems called \\\"Zero faces\\\" (meaning the STL contains triangles with zero area because all 3 points are on one line), which is currently not handled well in OpenSCAD. Using MeshLab MeshLab has a filter to remove zero faces by flipping edges of polygons Filters -> Cleaning and Repairing -> Remove T-Vertices by Edge-Flip. Set the Ratio to a high value (e.g.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d932c917-a58e-427a-a77c-f0f1de6de167":{"__data__":"{\"id_\":\"d932c917-a58e-427a-a77c-f0f1de6de167\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"db0c0d8b-b389-47e4-8c66-688b3ec3fd6d\",\"metadata\":{},\"hash\":\"4VdNGFRHp8KX0U8B8/V4S+TMxs12lAEK92UFSZhWvB8=\"},\"NEXT\":{\"nodeId\":\"fbd9ecab-9363-4997-acfb-69cda1f50ab8\",\"metadata\":{},\"hash\":\"28w7k2P2h8nAFJYhDU+k0kCtadcn5tyAxUJqcvGSErk=\"}},\"hash\":\"2G/XtSy/36T5EteC6yRDOt3OByJQOInGixCIe3/kjYc=\",\"text\":\"Set the Ratio to a high value (e.g. 1000000), otherwise it's possible the model gets distorted. Using Blender Blender has a 3D-Printing-Toolbox Plug-in (needs to be enabled in the UserSettings) that can show issues with the STL file. See http://wiki.blender.org/index.php/Extensions:2.6/Py/Scripts/Modeling/PrintToolbox Using NetFabb/Microsoft cloud service The Microsoft 3D Model Repair service can help with fixing STL files. Make sure to read the service conditions before posting files. See https://modelrepair.azurewebsites.net/ I'm getting \\\"Unsupported DXF Entity\\\" warnings when importing DXF files. What does that mean? DXF import sometimes produces warning messages like Unsupported DXF Entity 'SPLINE' (1c1) in \\\"file.dxf\\\". This means the DXF file is using features that the OpenSCAD importer does not know how to handle. The importer simply ignores those unknown entities that could result in an incomplete model. When using Inkscape, the easiest way to produces DXF files without unsupported entities is to convert all Bezier curves to short line segments using Extensions -> Modify Path -> Flatten Beziers The value given in the dialog determines the length of the line segments. Lower values produce smoother results, but also more line segments. As export file format, use \\\"Desktop Cutting Plotter (AutoCAD DXF R14)\\\". A more detailed tutorial is available at http://repraprip.blogspot.de/2011/05/inkscape-to-openscad-dxf-tutorial.html Export How can I export multiple parts from one script? Answer based on comments in related issue on github https://github.com/openscad/openscad/pull/1534#issuecomment-227024209 There is a way to generate a bunch of geometric primitives and export them as STL files from a single script, without commenting/uncommenting code. The variable PARTNO indicates which part is being exported in the current run. If PARTNO is 'undef', then nothing is exported. Image exported with PARTNO=0 PARTNO = undef; // default part number  module tree() { color(\\\"green\\\") cylinder(r1 = 12, r2 = 1, h = 30); // ... }\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"fbd9ecab-9363-4997-acfb-69cda1f50ab8":{"__data__":"{\"id_\":\"fbd9ecab-9363-4997-acfb-69cda1f50ab8\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"d932c917-a58e-427a-a77c-f0f1de6de167\",\"metadata\":{},\"hash\":\"2G/XtSy/36T5EteC6yRDOt3OByJQOInGixCIe3/kjYc=\"},\"NEXT\":{\"nodeId\":\"e36dc175-8a80-4042-9f17-77b93760e281\",\"metadata\":{},\"hash\":\"j2f+KszhwG/HofzygTC6AIpjIUtfVryDd74FXcmiGm4=\"}},\"hash\":\"28w7k2P2h8nAFJYhDU+k0kCtadcn5tyAxUJqcvGSErk=\",\"text\":\"// ... }  module trunk() { color(\\\"brown\\\") cylinder(r = 3, h = 10); // ... }  module base() { color(\\\"white\\\") translate([-10, -10, 0]) cube([20, 20, 5]); // ... }  if (PARTNO == 1) tree(); if (PARTNO == 2) trunk(); if (PARTNO == 3) base();  // optionally use 0 for whole object if (PARTNO == 0) { base(); translate([0, 0, 5]) trunk(); translate([0, 0, 15]) tree(); } When working interactively, the PARTNO variable at the top of the file can be set to the number of the part to be shown/exported from the GUI. It's possible to automate the process of exporting all of the parts by writing a shell script on MacOS or Linux, or a batch file on Windows. The shell script would look something like this: # export parts as STL openscad -DPARTNO=1 -o tree.stl model.scad openscad -DPARTNO=2 -o trunk.stl model.scad openscad -DPARTNO=3 -o base.stl model.scad  # export image of all the parts combined openscad -DPARTNO=0 -o model.png model.scad Running this script once from the command line exports all of the parts to separate files. How can I export screenshots with higher resolution than the current window Right now that is not possible from the GUI, as the images are restricted to the actual display context. Using the File->Export->Export As Image menu always exports at viewport resolution. It is however possible to generate higher resolution images via command line using the --imgsize parameter. This uses a separate drawing context, size-limited by memory and the graphics driver, to generate the image. For example, on Linux, the Mesa driver for Intel UHD Graphics 620 (Kabylake GT2) seems to max out at an image resolution of about 16000×16000. $ openscad --imgsize 16000,16000 -o CSG.png CSG.scad ECHO: version = [2019, 1, 0]\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"e36dc175-8a80-4042-9f17-77b93760e281":{"__data__":"{\"id_\":\"e36dc175-8a80-4042-9f17-77b93760e281\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"fbd9ecab-9363-4997-acfb-69cda1f50ab8\",\"metadata\":{},\"hash\":\"28w7k2P2h8nAFJYhDU+k0kCtadcn5tyAxUJqcvGSErk=\"},\"NEXT\":{\"nodeId\":\"886f6c37-5cf1-41f1-a16c-9212f2090f0d\",\"metadata\":{},\"hash\":\"asltHgPY7dObDJ3SmcRLWf6OChLOxCtGdJmcgbGt3vQ=\"}},\"hash\":\"j2f+KszhwG/HofzygTC6AIpjIUtfVryDd74FXcmiGm4=\",\"text\":\"ECHO: version = [2019, 1, 0] Compiling design (CSG Products normalization)... Normalized CSG tree has 6 elements $ file CSG.png CSG.png: PNG image data, 16000 x 16000, 8-bit/color RGB, non-interlaced Language Why am I getting an error when writing a = a + 1? http://forum.openscad.org/A-A-1-tp11385p11411.html First of all, the question why we have these \\\"limitations\\\" become more clear once we start better exploiting the opportunities. We need a \\\"reduce\\\" function to help collecting information depending on a list of input. Recursion is fine, but people tend to struggle with it and we could offer some help. We should probable disallow any attempt of reassignment, to make it more clear what's going on. The only real reason we partially allow it is to allow cmd-line variable overrides. To help think about things: Imagine every expression in OpenCAD being executed in parallel. Any dependency of existing expressions must be made explicit by hierarchical grouping. This should quell the idea of iterating for the purpose of accumulating information. In terms of functions: Imagine a function expression being something you'd type into a spreadsheet cell. Not totally mappable, but it might help framing it. The spreadsheet analogy applies also to iterations. A cell in a spreadsheet cannot increment itself; attempting to do so results in a circular reference error in the spreadsheet. Now, we could add all kinds of sugar to help people apply their existing programming problem solving skills. The questions are more if it really helps us, and who would spearhead the design of such language extensions, as we currently don't really have attachment for these ideas on the dev-team. If you think about the OpenSCAD language as something similar to HTML, but for 3D modeling, you'd still have a need for various programs generating code in this language (similar to the plethora of HTML generators out there). There exist a number of tools for helping with OpenSCAD code generation from existing programming languages (python, ruby, C++, haskell, clojure off the top of my head) and there are tools offering Javascript interfaces for similar purposes (OpenJSCAD, CoffeeSCAD).\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"886f6c37-5cf1-41f1-a16c-9212f2090f0d":{"__data__":"{\"id_\":\"886f6c37-5cf1-41f1-a16c-9212f2090f0d\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"e36dc175-8a80-4042-9f17-77b93760e281\",\"metadata\":{},\"hash\":\"j2f+KszhwG/HofzygTC6AIpjIUtfVryDd74FXcmiGm4=\"},\"NEXT\":{\"nodeId\":\"377ce9cc-f450-4da2-8ccc-428096fcfbfd\",\"metadata\":{},\"hash\":\"WQpEIpZzqPGXpdL4ZLZuKyxeEb4tRl0SEmr/3EfbImg=\"}},\"hash\":\"asltHgPY7dObDJ3SmcRLWf6OChLOxCtGdJmcgbGt3vQ=\",\"text\":\"tools offering Javascript interfaces for similar purposes (OpenJSCAD, CoffeeSCAD). Until we have a really good reason to do so in OpenSCAD proper, and a really good candidate for which language to support, it's better to keep these things separate. See also for help: List Comprehension, Tips & Tricks, Recursive Functions User Interface OpenSCAD isn't adhering to my GTK desktop theme You may need to install package \\\"qt5-style-plugins\\\" on debian based systems, then set environment variable when calling openscad QT_QPA_PLATFORMTHEME=gtk2 openscad To make the setting permanent, add export QT_QPA_PLATFORMTHEME=gtk2 to your user's ~/.profile I'm not getting any menubar when running OpenSCAD in Ubuntu, how can I get it back? This seems to be caused by Ubuntu messing with Qt to move the menubar somewhere else (e.g. top of the screen). That problem hits other applications too, see https://bugs.launchpad.net/ubuntu/+source/appmenu-qt5/+bug/1307619 There are two things that could help: Set the QT_QPA_PLATFORMTHEME environment variable to an empty string (the default value is probably \\\"appmenu-qt5\\\") or simply run OpenSCAD with QT_QPA_PLATFORMTHEME= openscad Remove the appmenu-qt5 package to globally disable menubar changes for all applications Why are the error line numbers wrong? That is a limitation/bug in the current parser that handles include<> basically as copy&paste of content. In some cases it's possible to work around the issue by placing the include<> statements at the end of the file. When depending on libraries, it's recommended to use use<> instead which does not have that problem and also automatically inhibits any top-level geometry of that file (which might be there as demo for the library). I don't like the editor, can I use my favourite editor instead? Yes, OpenSCAD supports a special mode that reloads the files if they are modified externally. To enable this mode, check the Design -> Automatic Reload and Preview option and just close the editor window (or use View -> Hide Editor). As an example, here's a script that runs vim as editor and also starts OpenSCAD, which takes the model viewer role. It supports 3 modes\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"377ce9cc-f450-4da2-8ccc-428096fcfbfd":{"__data__":"{\"id_\":\"377ce9cc-f450-4da2-8ccc-428096fcfbfd\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"886f6c37-5cf1-41f1-a16c-9212f2090f0d\",\"metadata\":{},\"hash\":\"asltHgPY7dObDJ3SmcRLWf6OChLOxCtGdJmcgbGt3vQ=\"},\"NEXT\":{\"nodeId\":\"b47c1688-4c24-4d7c-8b17-d19f98eb7de2\",\"metadata\":{},\"hash\":\"rL2/KMTgrf3P5RUfRxEkkuagP29SP2BOM0TL+hnFA5Y=\"}},\"hash\":\"WQpEIpZzqPGXpdL4ZLZuKyxeEb4tRl0SEmr/3EfbImg=\",\"text\":\"It supports 3 modes Run with no parameters, it opens a temp file for quick testing, which it deletes. Run with the name of a non-existent file, it starts the file with a default license header. Run with the name of an existing file, it simply opens it. #!/bin/bash  FILE=\\\"$1\\\" AUTHOR=\\\"Your Name Here\\\" YEAR=\\\"$(date \\\"+%Y\\\")\\\" LICENSE=\\\"// Created in $YEAR by $AUTHOR.\\\\n// This work is released with CC0 into the public domain.\\\\n// https://creativecommons.org/publicdomain/zero/1.0/\\\" # increase stack size to allow deeper recursion ulimit -s 65536 if [ \\\"$FILE\\\" == \\\"\\\" ] then TEMPF=`tempfile -s .scad` openscad \\\"$TEMPF\\\" >/dev/null 2>/dev/null & vim \\\"$TEMPF\\\" rm -f \\\"$TEMPF\\\" exit fi if [ ! -e \\\"$FILE\\\" ] then echo -e \\\"$LICENSE\\\" >> \\\"$FILE\\\" fi openscad \\\"$FILE\\\" >/dev/null 2>/dev/null & vim \\\"$FILE\\\" Errors / Problems Why am I getting \\\"no top level geometry to render\\\"? This can have different reasons, some common ones include Missing / Commented out module call module model() { cube(20); } %model(); Using the % modifier does not only make the part transparent, it also causes the part to be excluded in the final render! Difference / Intersection with wrong translated objects The easiest way to solve this type of issues is to highlight the objects using the # modifier and see if the objects are placed at the position where they should be. Importing broken STL files See Why is my imported STL file appearing with F5 but not F6? OpenSCAD crashed/was killed, are my unsaved changes lost? Before starting a preview or render process, the OpenSCAD editor writes a backup file in case there are unsaved changes. This file is stored in the users documents folder in a separate directory (e.g. on Linux this is normally $HOME/.local/share/OpenSCAD/backups). The actual path can be checked in the Help->Library Info dialog where it is listed as \\\"Backup Path\\\". OpenSCAD crashes when clicking \\\"New\\\" or loading a file on Windows\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b47c1688-4c24-4d7c-8b17-d19f98eb7de2":{"__data__":"{\"id_\":\"b47c1688-4c24-4d7c-8b17-d19f98eb7de2\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"377ce9cc-f450-4da2-8ccc-428096fcfbfd\",\"metadata\":{},\"hash\":\"WQpEIpZzqPGXpdL4ZLZuKyxeEb4tRl0SEmr/3EfbImg=\"},\"NEXT\":{\"nodeId\":\"443915fb-8013-4a3a-acc9-1f515b501952\",\"metadata\":{},\"hash\":\"9zSU+NcKrfyEPvuVD+2vO3Dlnga4N1Ot9KGzVSwaS+U=\"}},\"hash\":\"rL2/KMTgrf3P5RUfRxEkkuagP29SP2BOM0TL+hnFA5Y=\",\"text\":\"Path\\\". OpenSCAD crashes when clicking \\\"New\\\" or loading a file on Windows OpenSCAD crashes on some machines with Intel graphics drivers, for more details, see https://github.com/openscad/openscad/issues/2442 OpenSCAD fails to run refering to EVR.dll, MF.dll or MFPlat.dll on Windows This is an issue with the special Windows N (Europe) and KN (Korea) versions which have the Windows Media Framework ripped out as a result of a ruling for anti-competitive practices by the European Commission in 2004. OpenSCAD, starting with release 2019.05, depends on some of the features so it fails to run on those systems. The missing Windows Media Framework can be added by installing the correct \\\"Media Feature Pack for N versions\\\" from the list Microsoft provides in KB3145500. For Windows 10 version N, there's a dedicated download page with Windows version selector at: https://www.microsoft.com/en-us/software-download/mediafeaturepack. Starting with Windows 10 1909 you can't download the Media Features from the Microsoft Website directly - instead you have to use Windows Settings -> Apps -> Apps and Features. Select Add a Feature and add the Windows Media Framework. Afterwards reboot and it should work. Reporting bugs, Requesting features How do I report bugs? Bugs in OpenSCAD are best reported in the github issue tracking system at https://github.com/openscad/openscad/issues. If you are not sure it's a bug, asking on the mailing list/forum can help clarifying things. Please try searching through the existing issues if the bug was already reported. If you find something similar or if you are unsure, create a new issue, but mention the (possibly) related one. The bug report should give as much information as possible to help with reproducing it, including but not limited to The OpenSCAD version The Operating System name and version A description of the scenario that produces the issue In case of graphics issues, the OpenGL driver information If possible, a trimmed down script reproducing the issue Most of the technical version information can be found in menu Help -> Library Info, or via the command line openscad --info. How do I request new features? New features or changes/extensions to existing features can be requested in the github issue tracking system at\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"443915fb-8013-4a3a-acc9-1f515b501952":{"__data__":"{\"id_\":\"443915fb-8013-4a3a-acc9-1f515b501952\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"b47c1688-4c24-4d7c-8b17-d19f98eb7de2\",\"metadata\":{},\"hash\":\"rL2/KMTgrf3P5RUfRxEkkuagP29SP2BOM0TL+hnFA5Y=\"},\"NEXT\":{\"nodeId\":\"c87cb60f-31a7-437d-aeac-35f4305ccf12\",\"metadata\":{},\"hash\":\"THSkXe4RhfAPVive7hARG81qceWx4tETbvWlzR+7KUk=\"}},\"hash\":\"9zSU+NcKrfyEPvuVD+2vO3Dlnga4N1Ot9KGzVSwaS+U=\",\"text\":\"New features or changes/extensions to existing features can be requested in the github issue tracking system at https://github.com/openscad/openscad/issues too. Please make an effort to clearly explain the new feature / change as detailed as possible. Including some background about why you think this feature would be useful to you and other people helps a lot and increases the chances of it being implemented. How do I report bugs that are related to the Operating System I use? Windows The Windows version is currently maintained by the OpenSCAD team, so please use the github issue tracker for reporting bugs. Mac OSX The Mac OSX version is currently maintained by the OpenSCAD team, so please use the github issue tracker for reporting bugs. Linux The OpenSCAD versions included in / distributed by the various Linux distributions are usually maintained by people/teams working with the distributions. Specific bugs can be reported in the respective bug tracking systems, e.g. Debian - See \\\"please report it\\\" directions at https://bugs.debian.org/cgi-bin/pkgreport.cgi?package=openscad Ubuntu - See \\\"Report a bug\\\" directions at https://launchpad.net/ubuntu/+source/openscad Fedora / Red Hat - See https://apps.fedoraproject.org/packages/openscad/bugs and https://bugzilla.redhat.com/buglist.cgi? component=openscad Arch Linux - See \\\"reporting bug guidelines\\\" directions at https://bugs.archlinux.org/index.php?string=openscad&status%5B%5D= The nightly builds hosted on the openSUSE build service are maintained by the OpenSCAD team, so please use the github issue tracker for reporting issues with those packages. Chapter 10 -- Libraries OpenSCAD User Manual Library Locations OpenSCAD uses three library locations, the installation library, built-in library, and user-defined libraries. 1. The Installation library location is the libraries directory under the directory where OpenSCAD is installed. 2. The Built-In library location is O/S dependent. Since version 2014.03, it can be opened in the system specific file manager using the \\\"File->Show Library Folder...\\\" menu entry. Windows: My Documents\\\\OpenSCAD\\\\libraries Linux: $HOME/.local/share/OpenSCAD/libraries Mac OS X: $HOME/Documents/OpenSCAD/libraries 3.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"c87cb60f-31a7-437d-aeac-35f4305ccf12":{"__data__":"{\"id_\":\"c87cb60f-31a7-437d-aeac-35f4305ccf12\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"443915fb-8013-4a3a-acc9-1f515b501952\",\"metadata\":{},\"hash\":\"9zSU+NcKrfyEPvuVD+2vO3Dlnga4N1Ot9KGzVSwaS+U=\"},\"NEXT\":{\"nodeId\":\"f59ae72d-1b51-4d84-b2ef-eb894251c4fe\",\"metadata\":{},\"hash\":\"gxwLcyD/7ToO86IguQNe9NV69q9DlOMWFIc84422vpA=\"}},\"hash\":\"THSkXe4RhfAPVive7hARG81qceWx4tETbvWlzR+7KUk=\",\"text\":\"Mac OS X: $HOME/Documents/OpenSCAD/libraries 3. The User-Defined library path can be created using the OPENSCADPATH Environment Variable to point to the library(s). OPENSCADPATH can contain multiple directories in case you have library collections in more than one place, separate directories with a semi-colon for Windows, and a colon for Linux/Mac OS. For example: Windows: C:\\\\Users\\\\A_user\\\\Documents\\\\OpenSCAD\\\\MyLib;C:\\\\Thingiverse Stuff\\\\OpenSCAD Things;D:\\\\test_stuff (Note: For Windows, in versions prior to 2014.02.22 there is a bug preventing multiple directories in OPENSCADPATH as described above, it uses a colon (:) to separate directories. A workaround, if your libraries are on C: is to leave off the drive letter & colon, e.g. \\\\Thingiverse Stuff\\\\OpenSCAD Things:\\\\stuff. For more about setting Windows environment variables, see User Environment Variables. Linux/Mac OS: /usr/lib:/home/mylib:. OpenSCAD must be restarted to recognize any change to the OPENSCADPATH Environment Variable. When you specify a non-fully qualified path and filename in the use <...> or include <...> statement OpenSCAD looks for the file in the following directories in the following order: the directory of the calling .scad file the User-Defined library paths (OPENSCADPATH) the Built-In library (i.e. the O/S dependent locations above) the Installation library In the case of a library file itself having use <...> or include <...> the directory of the library .scad file is the 'calling' file, i.e. when looking for libraries within a library, it does not check the directory of the top level .scad file. For example, with the following locations and files defined: (with OPENSCADPATH=/usr/lib:/home/lib_os:.) 1. <installation library>/lib1.scad 2. <built-in library>/lib2.scad 3. <built-in library>/sublib/lib2.scad 4. <built-in library>/sublib/lib3.scad 5. /usr/lib/lib2.scad 6. /home/lib_os/sublib/lib3.scad\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f59ae72d-1b51-4d84-b2ef-eb894251c4fe":{"__data__":"{\"id_\":\"f59ae72d-1b51-4d84-b2ef-eb894251c4fe\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"c87cb60f-31a7-437d-aeac-35f4305ccf12\",\"metadata\":{},\"hash\":\"THSkXe4RhfAPVive7hARG81qceWx4tETbvWlzR+7KUk=\"},\"NEXT\":{\"nodeId\":\"13304efc-dda5-4f34-a9cf-a081c242009d\",\"metadata\":{},\"hash\":\"JhVN7YVkML5hLGPgmZncQw73BqUqS6iYHZyMh2Q7S2w=\"}},\"hash\":\"gxwLcyD/7ToO86IguQNe9NV69q9DlOMWFIc84422vpA=\",\"text\":\"/usr/lib/lib2.scad 6. /home/lib_os/sublib/lib3.scad The following include <...> statements match to the nominated library files include <lib1.scad>  // #1. include <lib2.scad>  // #5. include <sublib/lib2.scad>  // #3. include <sublib/lib3.scad>  // #6. Since 2014.03, the currently active list of locations can be verified in the \\\"Help->Library Info\\\" dialog. The details info shows both the content of the OPENSCADPATH variable and the list of all library locations. The locations are searched in the order they appear in this list. For example; OPENSCADPATH: /data/lib1:/data/lib2 OpenSCAD library path: /data/lib1 /data/lib2 /home/user/.local/share/OpenSCAD/libraries /opt/OpenSCAD/libraries Setting OPENSCADPATH In Windows, Environment Variables are set via the Control panel, select System, then Advanced System Settings, click Environment Variables. Create a new User Variable, or edit OPENSCADPATH if it exists. On Linux, to simply add the environment variable to all users, you can type in terminal: sudo sh -c 'echo \\\"OPENSCADPATH=$HOME/openscad/libraries\\\" >>/etc/profile' to set the OPENSCADPATH to openscad/libraries under each user's home directory. For more control on environment variables, you'll need to edit the configuration files; see for example this page. On Mac, you need to modify the /etc/launchd.conf: sudo sh -c 'echo \\\"setenv OPENSCADPATH /Users/myuser/my/own/path\\\" >>/etc/launchd.conf' The variable will be available at next reboot. To avoid to reboot and use it immediately, issue the following commands: egrep \\\"^setenv\\\\ \\\" /etc/launchd.conf | xargs -t -L 1 launchctl killall Dock killall Spotlight MCAD OpenSCAD bundles the MCAD library. There are many different forks floating around (e.g.[1], [2], [3]) many of them unmaintained. MCAD bundles a lot of stuff, of varying quality, including:\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"13304efc-dda5-4f34-a9cf-a081c242009d":{"__data__":"{\"id_\":\"13304efc-dda5-4f34-a9cf-a081c242009d\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"f59ae72d-1b51-4d84-b2ef-eb894251c4fe\",\"metadata\":{},\"hash\":\"gxwLcyD/7ToO86IguQNe9NV69q9DlOMWFIc84422vpA=\"},\"NEXT\":{\"nodeId\":\"90f0f5f8-d0b4-4dea-94d6-80993392c477\",\"metadata\":{},\"hash\":\"cvLnl0lxNzelUITqPaGUWQEuW82srMFqK1lkys9CTkc=\"}},\"hash\":\"JhVN7YVkML5hLGPgmZncQw73BqUqS6iYHZyMh2Q7S2w=\",\"text\":\"MCAD bundles a lot of stuff, of varying quality, including: Many common shapes like rounded boxes, regular polygons and polyhedra in 2D and 3D Gear generator for involute gears and bevel gears. Stepper motor mount helpers, stepper and servo outlines Nuts, bolts and bearings Screws and augers Material definitions for common materials Mathematical constants, curves Teardrop holes and polyholes The git repo also contains python code to scrape OpenSCAD code, a testing framework and SolidPython, an external python library for solid cad. More details on using MCAD are in a later chapter, OpenSCAD User Manual/MCAD. Other Libraries BOLTS tries to build a standard part and vitamin library that can be used with OpenSCAD and other CAD tools: [4] Obiscad contains various useful tools, notably a framework for attaching modules on other modules in a simple and modular way: [5] This library provides tools to create proper 2D technical drawings of your 3D objects: [6] Stephanie Shaltes wrote a fairly comprehensive fillet library (https://github.com/StephS/i2_xends/blob/master/inc/fillets.scad) The shapes library contains many shapes like rounded boxes, regular polygons. It is also included in MCAD. Also Giles Bathgates shapes library provides regular polygons and polyeders and is included in MCAD. The OpenSCAD threads library provides ISO conform metric and imperial threads and support internal and external threads and multiple starts. Sprockets for ANSI chains and motorcycle chains can be created with the Roller Chain Sprockets OpenSCAD Module. Contains hard coded fudge factors, may require tweaking. The Pinball Library provides many components for pinball design work, including models for 3d printing of the parts, 3d descriptions of mount holes for CNC drilling and 2d descriptions of parts footprint For the generation of celtic knots there is the Celtic knot library The 2D connection library helps with connections between 2D sheets, which is useful for laser cut designs. local.scad provides a flexible method for positioning parts of a design. Is also used in BOLTS. SCADBoard is a library for designing 3D printed PCBs in OpenSCAD.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"90f0f5f8-d0b4-4dea-94d6-80993392c477":{"__data__":"{\"id_\":\"90f0f5f8-d0b4-4dea-94d6-80993392c477\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"13304efc-dda5-4f34-a9cf-a081c242009d\",\"metadata\":{},\"hash\":\"JhVN7YVkML5hLGPgmZncQw73BqUqS6iYHZyMh2Q7S2w=\"},\"NEXT\":{\"nodeId\":\"28e5dbb4-2667-4b95-aafc-4f760e1b41b5\",\"metadata\":{},\"hash\":\"S/EFnNw3S2C6RK5JLZlJwmkDfQ+Xxp8YziOm06xBYpY=\"}},\"hash\":\"cvLnl0lxNzelUITqPaGUWQEuW82srMFqK1lkys9CTkc=\",\"text\":\"SCADBoard is a library for designing 3D printed PCBs in OpenSCAD. A Ruler for determining the size of things in OpenSCAD. A colorspace converter for working with colors in HSV and RGB: http://www.thingiverse.com/thing:279951/ A number of utility functions is collected in https://github.com/oampo/missile Unit test framework https://github.com/oampo/testcard Knurled surface library by aubenc http://www.thingiverse.com/thing:9095 Text module based on technical lettering style https://github.com/thestumbler/alpha Round corners for Openscad https://www.thingiverse.com/thing:8812 https://www.makerbot.com/media-center/2011/05/26/script-for- rounded-corners-for-openscad-by-warrantyvoider Bevel library for OpenScad https://www.thingiverse.com/thing:30336 SCAD libraries used by Michigan Tech's Open Sustainability Technology Lab (MOST) https://github.com/mtu-most/most-scad-libraries A full Workflow library by Ulrich Bär can be found at \\\"sites.google.com/site/ulrichbaer/tdi/UB.scad\\\" The Belfry OpenScad Library has many shapes, masks, manipulators, and support for threading, gears, polylines and beziers. It can be found at GitHub with extensive documentation here There is also a list with more libraries here: [7] Other OpenSCAD tutorials and documentation \\\"OpenSCAD User Manual\\\" http://www.openscad.org/documentation.html \\\"Know only 10 things to be dangerous in OpenSCAD\\\" https://cubehero.com/2013/11/19/know-only-10-things-to-be-dangerous-in- openscad/ \\\"OpenScad beginners tutorial\\\" http://edutechwiki.unige.ch/en/OpenScad_beginners_tutorial \\\"How to use Openscad, tricks and tips to design a parametric 3D object\\\" http://www.tridimake.com/2014/09/how-to-use-openscad-tricks- and-tips-to.html OpenSCAD discussion forum http://forum.openscad.org Chapter 11 -- Command Glossary OpenSCAD User Manual This is a Quick Reference; a short summary of all the commands without examples, just the basic syntax.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"28e5dbb4-2667-4b95-aafc-4f760e1b41b5":{"__data__":"{\"id_\":\"28e5dbb4-2667-4b95-aafc-4f760e1b41b5\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"90f0f5f8-d0b4-4dea-94d6-80993392c477\",\"metadata\":{},\"hash\":\"cvLnl0lxNzelUITqPaGUWQEuW82srMFqK1lkys9CTkc=\"},\"NEXT\":{\"nodeId\":\"2ce9da6b-f306-4736-b2d9-d86dae6f2fcf\",\"metadata\":{},\"hash\":\"1FmygSXnzzU/qlql40v644FYhv2YHzek0qY/Bfm5Wl4=\"}},\"hash\":\"S/EFnNw3S2C6RK5JLZlJwmkDfQ+Xxp8YziOm06xBYpY=\",\"text\":\"The headings are links to the full chapters. Please be warned: The Command Glossary is presently outdated (03 2015). Please have a look at the Cheatsheet, instead: http://www.openscad.org/cheatsheet/ Mathematical Operators + -   // also as unary negative * / %  // this is mod < <= == != >= > &&   // logical and ||   // logical or !    // logical not <boolean> ? <valIfTrue> : <valIfFalse> Mathematical Functions abs ( <value> ) cos ( <degrees> ) sin ( <degrees> ) tan ( <degrees> ) asin ( <value> ) acos ( <value> ) atan ( <value> ) atan2 ( <y_value>, <x_value> ) pow( <base>, <exponent> ) len ( <string> )   len ( <vector> )   len ( <vector_of_vectors> ) min ( <value1>, <value2> ) max ( <value1>, <value2> ) sqrt ( <value> ) round ( <value> ) ceil ( <value> ) floor ( <value> ) lookup( <in_value>, <vector_of_vectors> ) String Functions str(string, value, ...) Primitive Solids cube(size = <value or vector>, center = <boolean>); sphere(r = <radius>); cylinder(h = <height>, r1 = <bottomRadius>, r2 = <topRadius>, center = <boolean>); cylinder(h = <height>, r = <radius>); polyhedron(points = [[x, y, z], ... ], triangles = [[p1, p2, p3..], ... ], convexity = N); Transformations scale(v = [x, y, z]) { ... } (In versions > 2013.03) resize(newsize=[x,y,z], auto=(true|false) { ... } resize(newsize=[x,y,z], auto=[xaxis,yaxis,zaxis]) { ... }  // #axis is true|false resize([x,y,z],[xaxis,yaxis,zaxis]) { ... } resize([x,y,z]) { ...\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2ce9da6b-f306-4736-b2d9-d86dae6f2fcf":{"__data__":"{\"id_\":\"2ce9da6b-f306-4736-b2d9-d86dae6f2fcf\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"28e5dbb4-2667-4b95-aafc-4f760e1b41b5\",\"metadata\":{},\"hash\":\"S/EFnNw3S2C6RK5JLZlJwmkDfQ+Xxp8YziOm06xBYpY=\"},\"NEXT\":{\"nodeId\":\"c21da9c3-d07a-4cba-9b15-793c032736dd\",\"metadata\":{},\"hash\":\"zdDhSNsTPM+eClzPLGvPjtQ/9Iazgz0oX81i8s7vFg0=\"}},\"hash\":\"1FmygSXnzzU/qlql40v644FYhv2YHzek0qY/Bfm5Wl4=\",\"text\":\"} resize([x,y,z]) { ... } rotate(a = deg, v = [x, y, z]) { ... } rotate(a=[x_deg,y_deg,z_deg]) { ... } translate(v = [x, y, z]) { ... } mirror([ 0, 1, 0 ]) { ... } multmatrix(m = [tranformationMatrix]) { ... } color([r, g, b, a]) { ... } color([ R/255, G/255, B/255, a]) { ... } color(\\\"blue\\\",a) { ... } Conditional and Iterator Functions for (<loop_variable_name> = <vector> ) {...} intersection_for (<loop_variable_name> = <vector_of_vectors>) {...} if (<boolean condition>) {...} else {...} assign (<var1>= <val1>, <var2>= <val2>, ...) {...} CSG Modelling union() {...} difference() {...} intersection() {...} render(convexity = <value>) { ... } Modifier Characters ! { ... } // Ignore the rest of the design and use this subtree as design root * { ... } // Ignore this subtree % { ... } // Ignore CSG of this subtree and draw it in transparent gray # { ... } // Use this subtree as usual but draw it in transparent pink Modules module name(<var1>, <var2>, ...) { ...<module code>...} Variables can be default initialized <var1>=<defaultvalue> In module you can use children() to refer to all child nodes, or children(i) where i is between 0 and $children. Include Statement After 2010.02 include <filename.scad> (appends whole file) use <filename.scad>  (appends ONLY modules and functions) filename could use directory (with / char separator). Prior to 2010.02 <filename.scad> Other Language Features $fa is the minimum angle for a fragment. The default value is 12 (degrees) $fs is the minimum size of a fragment. The default value is 1. $fn is the number of fragments. The default value is 0.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"c21da9c3-d07a-4cba-9b15-793c032736dd":{"__data__":"{\"id_\":\"c21da9c3-d07a-4cba-9b15-793c032736dd\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/OpenSCAD_User_Manual.pdf\",\"metadata\":{},\"hash\":\"5Q6/OOkdCIOkPquL1O8QRI3g8CjP7u9vloE050lZ6Fo=\"},\"PREVIOUS\":{\"nodeId\":\"2ce9da6b-f306-4736-b2d9-d86dae6f2fcf\",\"metadata\":{},\"hash\":\"1FmygSXnzzU/qlql40v644FYhv2YHzek0qY/Bfm5Wl4=\"}},\"hash\":\"zdDhSNsTPM+eClzPLGvPjtQ/9Iazgz0oX81i8s7vFg0=\",\"text\":\"$fn is the number of fragments. The default value is 0. When $fa and $fs are used to determine the number of fragments for a circle, then OpenSCAD never uses less than 5 fragments. $t The $t variable is used for animation. If you enable the animation frame with view->animate and give a value for \\\"FPS\\\" and \\\"Steps\\\", the \\\"Time\\\" field shows the current value of $t. function name(<var>) = f(<var>); echo(<string>, <var>, ...); render(convexity = <val>) {...} surface(file = \\\"filename.dat\\\", center = <boolean>, convexity = <val>); 2D Primitives square(size = <val>, center=<boolean>); square(size = [x,y], center=<boolean>); circle(r = <val>); polygon(points = [[x, y], ... ], paths = [[p1, p2, p3..], ... ], convexity = N); 3D to 2D Projection projection(cut = <boolean>) 2D to 3D Extrusion linear_extrude(height = <val>, center = <boolean>, convexity = <val>, twist = <degrees>[, slices = <val>, $fn=...,$fs=...,$fa=...]){...} rotate_extrude(convexity = <val>[, $fn = ...]){...} DXF Extrusion linear_extrude(height = <val>, center = <boolean>, convexity = <val>, twist = <degrees>[...]) import (file = \\\"filename.dxf\\\", layer = \\\"layername\\\") From the WikiBooks article OpenSCAD User Manual (provided under CC-BY-SA-3.0) rotate_extrude(origin = [x,y], convexity = <val>[, $fn = ...]) import (file = \\\"filename.dxf\\\", layer = \\\"layername\\\") STL Import import(\\\"filename.stl\\\", convexity = <val>);\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"a3e68d1d-73bc-4fca-8354-ab591c6ddba4":{"__data__":"{\"id_\":\"a3e68d1d-73bc-4fca-8354-ab591c6ddba4\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"NEXT\":{\"nodeId\":\"50d3255b-feee-40bd-9690-5a1f9f2be81a\",\"metadata\":{},\"hash\":\"zXtRnJylM26r2EZXs+wBf5qn10WhlsE3pwJsfv/T87E=\"}},\"hash\":\"N3jwZsXECQ7Ee7EntmWyP01fAVEkiE7meL1kCfhZUt0=\",\"text\":\"The OpenSCAD Language Contents 1 Chapter 1 -- General 1.1 Introduction 1.2 Comments 1.3 Values and Data Types 1.3.1 Numbers 1.3.2 Boolean Values 1.3.3 Strings 1.3.4 Ranges 1.3.5 The Undefined Value 1.4 Variables 1.4.1 Undefined variable 1.4.2 Scope of variables 1.4.3 Variables are set at compile-time, not run-time 1.4.4 Special Variables 1.5 Vectors 1.5.1 Indexing elements within vectors 1.5.2 Dot notation indexing 1.5.3 Vector operators 1.5.3.1 concat 1.5.3.2 len 1.5.4 Matrix 1.6 Getting input 2 Chapter 2 -- 3D Objects 2.1 Primitive Solids 2.1.1 cube 2.1.2 sphere 2.1.3 cylinder 2.1.4 polyhedron 2.1.4.1 Debugging polyhedra 2.1.4.2 Mis-ordered faces 2.1.4.3 Point repetitions in a polyhedron point list 2.2 3D to 2D Projection 3 Chapter 3 -- 2D Objects 3.1 square 3.2 circle 3.2.1 ellipse 3.2.2 regular polygon 3.3 polygon 3.4 import_dxf 3.5 Text 3.5.1 Using Fonts & Styles 3.5.2 Alignment 3.5.2.1 Vertical alignment 3.5.2.2 Horizontal alignment 3.5.3 3D text 3.6 2D to 3D Extrusion 3.6.1 Linear Extrude 3.6.1.1 Usage 3.6.1.2 Twist 3.6.1.3 Center 3.6.1.4 Mesh Refinement 3.6.1.5 Scale 3.6.2 Rotate Extrude 3.6.3 Parameters 3.6.3.1 Usage 3.6.3.2 Examples 3.6.3.3 Mesh Refinement 3.6.3.4 Extruding a Polygon\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"50d3255b-feee-40bd-9690-5a1f9f2be81a":{"__data__":"{\"id_\":\"50d3255b-feee-40bd-9690-5a1f9f2be81a\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"a3e68d1d-73bc-4fca-8354-ab591c6ddba4\",\"metadata\":{},\"hash\":\"N3jwZsXECQ7Ee7EntmWyP01fAVEkiE7meL1kCfhZUt0=\"},\"NEXT\":{\"nodeId\":\"193b28c2-c988-422a-9049-8ddf2861bf0f\",\"metadata\":{},\"hash\":\"i25QRqYe3YDwdwAysblnJcbZxhTGJ8sWcEiPpH9iCGM=\"}},\"hash\":\"zXtRnJylM26r2EZXs+wBf5qn10WhlsE3pwJsfv/T87E=\",\"text\":\"3.6.3.4 Extruding a Polygon 3.6.4 Description of extrude parameters 3.6.4.1 Extrude parameters for all extrusion modes 3.6.4.2 Extrude parameters for linear extrusion only 4 Chapter 4 -- Transform 4.1 Basic concept 4.2 Advanced concept 4.3 scale 4.4 resize 4.5 rotate 4.5.1 Rotation rule help 4.6 translate 4.7 mirror 4.7.1 Function signature: 4.7.2 Examples 4.8 multmatrix 4.8.1 More? 4.9 color 4.9.1 Function signature: 4.9.2 Example 4.9.3 Example 2 4.10 offset 4.11 minkowski 4.12 hull 4.13 Combining transformations 5 Chapter 5 -- Boolean combination 5.1 boolean overview 5.1.1 2D examples 5.1.2 3D examples 5.2 union 5.3 difference 5.3.1 difference with multiple children 5.4 intersection 5.5 render 6 Chapter 6 -- Other Functions and Operators 6.1 Conditional and Iterator Functions 6.1.1 For loop 6.1.2 Intersection For Loop 6.1.3 If Statement 6.1.3.1 else if 6.1.4 Conditional ? : 6.1.4.1 Recursive function calls 6.1.4.2 Formatting complex usage 6.1.5 Assign Statement 6.1.6 Let Statement 6.2 Mathematical Operators 6.2.1 Scalar Arithmetical Operators 6.2.2 Relational Operators 6.2.3 Logical Operators 6.2.4 Conditional Operator 6.2.5 Vector-Number Operators 6.2.6 Vector Operators 6.2.7 Vector Dot-Product Operator 6.2.8 Matrix Multiplication 6.3 Mathematical Functions 6.4 Trigonometric Functions 6.4.1 cos 6.4.2 sin 6.4.3 tan 6.4.4 acos 6.4.5 asin 6.4.6 atan 6.4.7 atan2 6.5 Other Mathematical Functions\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"193b28c2-c988-422a-9049-8ddf2861bf0f":{"__data__":"{\"id_\":\"193b28c2-c988-422a-9049-8ddf2861bf0f\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"50d3255b-feee-40bd-9690-5a1f9f2be81a\",\"metadata\":{},\"hash\":\"zXtRnJylM26r2EZXs+wBf5qn10WhlsE3pwJsfv/T87E=\"},\"NEXT\":{\"nodeId\":\"e91e51a5-d6df-432a-af55-d56f6dcd5e0a\",\"metadata\":{},\"hash\":\"dhsp6s+PclLo6jNiPfieJGmuttbC2QB+3UCm6cbPGMs=\"}},\"hash\":\"i25QRqYe3YDwdwAysblnJcbZxhTGJ8sWcEiPpH9iCGM=\",\"text\":\"6.4.7 atan2 6.5 Other Mathematical Functions 6.5.1 abs 6.5.2 ceil 6.5.3 concat 6.5.4 cross 6.5.5 exp 6.5.6 floor 6.5.7 ln 6.5.8 len 6.5.9 let 6.5.10 log 6.5.11 lookup 6.5.12 max 6.5.13 min 6.5.14 norm 6.5.15 pow 6.5.16 rands 6.5.17 round 6.5.18 sign 6.5.19 sqrt 6.6 Infinities and NaNs 6.7 String Functions 6.7.1 str 6.7.2 chr 6.7.3 ord 6.7.4 Also See search() 6.8 List Comprehensions 6.8.1 Basic Syntax 6.8.1.1 multiple generator expressions 6.8.1.2 for 6.8.1.3 each 6.8.1.4 if 6.8.1.5 if/else 6.8.1.6 let 6.8.2 Nested loops 6.8.3 Advanced Examples 6.8.3.1 Generating vertices for a polygon 6.8.3.2 Flattening a nested vector 6.8.3.3 Sorting a vector 6.8.3.4 Selecting elements of a vector 6.8.3.5 Concatenating two vectors 6.9 Other Language Features 6.9.1 Special variables 6.9.1.1 $fa, $fs and $fn 6.9.1.2 $t 6.9.1.3 $vpr, $vpt, $vpf and $vpd 6.9.1.4 $preview 6.9.2 Echo Statements 6.9.2.1 Rounding examples 6.9.2.2 Small and large Numbers 6.9.2.3 HTML 6.9.3 Echo Function 6.9.4 Render 6.9.5 Surface 6.9.5.1 Text file format 6.9.5.2 Images\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"e91e51a5-d6df-432a-af55-d56f6dcd5e0a":{"__data__":"{\"id_\":\"e91e51a5-d6df-432a-af55-d56f6dcd5e0a\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"193b28c2-c988-422a-9049-8ddf2861bf0f\",\"metadata\":{},\"hash\":\"i25QRqYe3YDwdwAysblnJcbZxhTGJ8sWcEiPpH9iCGM=\"},\"NEXT\":{\"nodeId\":\"f3495615-de7d-422b-8fb0-74624a646604\",\"metadata\":{},\"hash\":\"ujN7icX3BuUbgftvz0djZxS2IOMWUuLDtVMTV+SK49Y=\"}},\"hash\":\"dhsp6s+PclLo6jNiPfieJGmuttbC2QB+3UCm6cbPGMs=\",\"text\":\"6.9.5.1 Text file format 6.9.5.2 Images 6.9.5.3 Examples 6.9.6 Search 6.9.6.1 Search Usage 6.9.6.2 Search Arguments 6.9.6.3 Search Usage Examples 6.9.6.3.1 Index values return as list 6.9.6.3.2 Search on different column; return Index values 6.9.6.3.3 Search on list of values 6.9.6.3.4 Search on list of strings 6.9.6.3.5 Getting the right results 6.9.7 OpenSCAD Version 6.9.8 parent_module(n) and $parent_modules 6.9.9 assert 6.9.9.1 Example 6.9.9.2 Checking parameters 6.9.9.3 Adding message 6.9.9.4 Using assertions in function 7 Chapter 7 -- User-Defined Functions and Modules 7.1 Introduction 7.2 Scope 7.3 Functions 7.3.1 Recursive functions 7.4 Function Literals 7.5 Modules 7.5.1 Object modules 7.5.2 Operator Modules 7.5.3 Children 7.5.4 Further Module Examples 7.5.5 Recursive Modules 7.6 Overwriting built-in modules 7.7 Overwriting built-in functions 8 Chapter 8 -- Debugging aids 8.1 Advanced concept 8.2 Background Modifier 8.3 Debug Modifier 8.4 Root Modifier 8.5 Disable Modifier 8.6 Echo Statements 9 Chapter 9 -- External libraries and code files 9.1 Use and Include 9.1.1 Directory separators 9.1.2 Variables 9.1.2.1 Scope of variables 9.1.2.2 Overwriting variables 9.1.3 Example \\\"Ring-Library\\\" 9.1.4 Nested Include and Use 9.2 import 9.2.1 Parameters 9.2.1.1 Convexity 9.2.1.2 Notes 9.3 import_dxf 9.4 import_stl 9.5 surface 9.5.1 Parameters 9.5.2 Text file format\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f3495615-de7d-422b-8fb0-74624a646604":{"__data__":"{\"id_\":\"f3495615-de7d-422b-8fb0-74624a646604\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"e91e51a5-d6df-432a-af55-d56f6dcd5e0a\",\"metadata\":{},\"hash\":\"dhsp6s+PclLo6jNiPfieJGmuttbC2QB+3UCm6cbPGMs=\"},\"NEXT\":{\"nodeId\":\"a7a678ad-3af0-4940-a8f3-ccdb65238857\",\"metadata\":{},\"hash\":\"kXEA7/o6jX0uEms/6R3owCH8VbhnOmgjKc4tX/YG4Xs=\"}},\"hash\":\"ujN7icX3BuUbgftvz0djZxS2IOMWUuLDtVMTV+SK49Y=\",\"text\":\"9.5 surface 9.5.1 Parameters 9.5.2 Text file format 9.5.3 Images 9.5.4 Examples Chapter 1 -- General OpenSCAD User Manual/The OpenSCAD Language Introduction OpenSCAD is a 2D/3D and solid modeling program which is based on a Functional programming language used to create models that are previewed on the screen, and rendered into 3D mesh which allows the model to be exported in a variety of 2D/3D file formats. A script in the OpenSCAD language is used to create 2D or 3D models. This script is a free format list of action statements. object(); variable = value; operator()   action(); operator() { action();    action(); } operator()   operator() { action(); action(); } operator() { operator()   action(); operator() { action(); action(); } } Objects Objects are the building blocks for models, created by 2D and 3D primitives. Objects end in a semicolon ';'. Actions Action statements include creating objects using primitives and assigning values to variables. Action statements also end in a semicolon ';'. Operators Operators, or transformations, modify the location, color and other properties of objects. Operators use braces '{}' when their scope covers more than one action. More than one operator may be used for the same action or group of actions. Multiple operators are processed Right to Left, that is, the operator closest to the action is processed first. Operators do not end in semicolons ';', but the individual actions they contain do. Examples  cube(5); x = 4+y; rotate(40) square(5,10); translate([10,5]) { circle(5); square(4); } rotate(60) color(\\\"red\\\") { circle(5); square(4); } color(\\\"blue\\\") { translate([5,3,0]) sphere(5); rotate([45,0,45]) { cylinder(10); cube([5,6,7]); } } Comments Comments are a way of leaving notes within the script, or code, (either to yourself or to future programmers) describing how the code works, or what it does.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"a7a678ad-3af0-4940-a8f3-ccdb65238857":{"__data__":"{\"id_\":\"a7a678ad-3af0-4940-a8f3-ccdb65238857\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"f3495615-de7d-422b-8fb0-74624a646604\",\"metadata\":{},\"hash\":\"ujN7icX3BuUbgftvz0djZxS2IOMWUuLDtVMTV+SK49Y=\"},\"NEXT\":{\"nodeId\":\"659f5eb3-6700-4215-a23f-cbd70b976c68\",\"metadata\":{},\"hash\":\"n5qrjgjoVHMgL/mqZ2nfiRvXWXMABPLGQERBcOQr6Lw=\"}},\"hash\":\"kXEA7/o6jX0uEms/6R3owCH8VbhnOmgjKc4tX/YG4Xs=\",\"text\":\"does. Comments are not evaluated by the compiler, and should not be used to describe self-evident code. OpenSCAD uses C++-style comments: // This is a comment  myvar = 10; // The rest of the line is a comment  /* Multi-line comments can span multiple lines. */ Values and Data Types A value in OpenSCAD is either a Number (like 42), a Boolean (like true), a String (like \\\"foo\\\"), a Range (like [0: 1: 10]), a Vector (like [1,2,3]), or the Undefined value (undef). Values can be stored in variables, passed as function arguments, and returned as function results. [OpenSCAD is a dynamically typed language with a fixed set of data types. There are no type names, and no user defined types. Functions are not values. In fact, variables and functions occupy disjoint namespaces.] Numbers Numbers are the most important type of value in OpenSCAD, and they are written in the familiar decimal notation used in other languages. Eg, -1, 42, 0.5, 2.99792458e+8. [OpenSCAD does not support octal or hexadecimal notation for numbers.] In additional to decimal numerals, the following names for special numbers are defined: PI OpenSCAD has only a single kind of number, which is a 64 bit IEEE floating point number. [OpenSCAD does not distinguish integers and floating point numbers as two different types, nor does it support complex numbers.] Because OpenSCAD uses the IEEE floating point standard, there are a few deviations from the behaviour of numbers in mathematics: We use binary floating point. A fractional number is not represented exactly unless the denominator is a power of 2. For example, 0.2 (2/10) does not have an exact internal representation, but 0.25 (1/4) and 0.125 (1/8) are represented exactly. The largest representable number is about 1e308. If a numeric result is too large, then the result can be infinity (printed as inf by echo). The smallest representable number is about -1e308.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"659f5eb3-6700-4215-a23f-cbd70b976c68":{"__data__":"{\"id_\":\"659f5eb3-6700-4215-a23f-cbd70b976c68\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"a7a678ad-3af0-4940-a8f3-ccdb65238857\",\"metadata\":{},\"hash\":\"kXEA7/o6jX0uEms/6R3owCH8VbhnOmgjKc4tX/YG4Xs=\"},\"NEXT\":{\"nodeId\":\"cb976b16-db1b-4f80-96e8-1b40d0522601\",\"metadata\":{},\"hash\":\"d47q49Bpm1jcFRpO5NcwXJx5Yf9JXwmE/YlPnKEMI1M=\"}},\"hash\":\"n5qrjgjoVHMgL/mqZ2nfiRvXWXMABPLGQERBcOQr6Lw=\",\"text\":\"The smallest representable number is about -1e308. If a numeric result is too small, then the result can be -infinity (printed as -inf by echo). If a numeric result is invalid, then the result can be Not A Number (printed as nan by echo). If a non-zero numeric result is too close to zero to be representable, then the result is -0 if the result is negative, otherwise it is 0. Zero (0) and negative zero (-0) are treated as two distinct numbers by some of the math operations, and are printed differently by 'echo', although they compare as equal. The constants 'inf' and 'nan' are not supported as numeric constants by OpenSCAD, even though you can compute numbers that are printed this way by 'echo'. You can define variables with these values by using: inf = 1e200 * 1e200; nan = 0 / 0; echo(inf,nan); The value 'nan' is the only OpenSCAD value that is not equal to any other value, including itself. Although you can test if a variable 'x' has the undefined value using 'x == undef', you can't use 'x == 0/0' to test if x is Not A Number. Instead, you must use 'x != x' to test if x is nan. Boolean Values Booleans are truth values. There are two Boolean values, namely true and false. A Boolean is passed as the argument to conditional statement 'if()'. conditional operator '? :', and logical operators '!' (not), '&&' (and), and '||' (or). In all of these contexts, you can actually pass any quantity. Most values are converted to 'true' in a Boolean context, the values that count as 'false' are: false 0 and -0 \\\"\\\" [] undef Note that \\\"false\\\" (the string), [0] (a numeric vector), [ [] ] (a vector containing an empty vector), [false] (a vector containing the Boolean value false) and 0/0 (Not A Number) all count as true. Strings A string is a sequence of zero or more unicode characters. String values are used to specify file names when importing a file, and to display text for debugging purposes when using echo().\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"cb976b16-db1b-4f80-96e8-1b40d0522601":{"__data__":"{\"id_\":\"cb976b16-db1b-4f80-96e8-1b40d0522601\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"659f5eb3-6700-4215-a23f-cbd70b976c68\",\"metadata\":{},\"hash\":\"n5qrjgjoVHMgL/mqZ2nfiRvXWXMABPLGQERBcOQr6Lw=\"},\"NEXT\":{\"nodeId\":\"6118d7b9-2667-467f-8c43-7740024d1af2\",\"metadata\":{},\"hash\":\"JOFGxl1xiIOTttNT+zhXCo803Q9H8ryqWJ+85aIvKVA=\"}},\"hash\":\"d47q49Bpm1jcFRpO5NcwXJx5Yf9JXwmE/YlPnKEMI1M=\",\"text\":\"debugging purposes when using echo(). Strings can also be used with the new text() primitive added in 2015.03. A string literal is written as a sequence of characters enclosed in quotation marks \\\", like this: \\\"\\\" (an empty string), or \\\"this is a string\\\". To include a \\\" character in a string literal, use \\\\\\\". To include a \\\\ character in a string literal, use \\\\\\\\. The following escape sequences beginning with \\\\ can be used within string literals: \\\\\\\" → \\\" \\\\\\\\ → \\\\ \\\\t → tab \\\\n → newline \\\\r → carriage return \\\\u03a9 → Ω - see text() for further information on unicode characters Note: This behavior is new since OpenSCAD-2011.04. You can upgrade old files using the following sed command: sed 's/\\\\\\\\/\\\\\\\\\\\\\\\\/g' non-escaped.scad > escaped.scad Example:  echo(\\\"The quick brown fox \\\\tjumps \\\\\\\"over\\\\\\\" the lazy dog.\\\\rThe quick brown fox.\\\\nThe \\\\\\\\lazy\\\\\\\\ dog.\\\");  result ECHO: \\\"The quick brown fox     jumps \\\"over\\\" the lazy dog. The quick brown fox. The \\\\lazy\\\\ dog.\\\"  old result ECHO: \\\"The quick brown fox \\\\tjumps \\\\\\\"over\\\\\\\" the lazy dog. The quick brown fox.\\\\nThe \\\\\\\\lazy\\\\\\\\ dog.\\\" Ranges Ranges are used by for() loops and children(). They have 2 varieties: [<start>:<end>] [<start>:<increment>:<end>] Although enclosed in square brackets [] , they are not vectors. They use colons : for separators rather than commas. r1 = [0:10]; r2 = [0.5:2.5:20]; echo(r1); // ECHO: [0: 1: 10] echo(r2); // ECHO: [0.5: 2.5: 20] You should avoid step values that cannot be represented exactly as binary floating point numbers. Integers are okay, as are fractional values whose denominator is a power of two. For example, 0.25 (1/4) and 0.125 (1/8) are safe, but 0.2 (2/10) should be avoided. The problem with these step values is\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"6118d7b9-2667-467f-8c43-7740024d1af2":{"__data__":"{\"id_\":\"6118d7b9-2667-467f-8c43-7740024d1af2\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"cb976b16-db1b-4f80-96e8-1b40d0522601\",\"metadata\":{},\"hash\":\"d47q49Bpm1jcFRpO5NcwXJx5Yf9JXwmE/YlPnKEMI1M=\"},\"NEXT\":{\"nodeId\":\"7005455c-a881-43d8-b371-91beab05d692\",\"metadata\":{},\"hash\":\"a8OE9h7IXeM9oCscXe7XBmstVfDyda28dI38DDzxp/8=\"}},\"hash\":\"JOFGxl1xiIOTttNT+zhXCo803Q9H8ryqWJ+85aIvKVA=\",\"text\":\"The problem with these step values is that your range may have too many or too few elements, due to inexact arithmetic. A missing <increment> defaults to 1. A range in the form [<start>:<end>] with <start> greater than <end> generates a warning and is equivalent to [<end>: 1: <start>]. A range in the form [<start>:1:<end>] with <start> greater than <end> does not generate a warning and is equivalent to []. The <increment> in a range may be negative (for versions after 2014). The Undefined Value The undefined value is a special value written as undef. It's the initial value of a variable that hasn't been assigned a value, and it is often returned as a result by functions or operations that are passed illegal arguments. Finally, undef can be used as a null value, equivalent to null or NULL in other programming languages. All arithmetic expressions containing undef values evaluate as undef. In logical expressions, undef is equivalent to false. Relational operator expressions with undef evaluate as false except for undef==undef which is true. Note that numeric operations may also return 'nan' (not-a-number) to indicate an illegal argument. For example, 0/false is undef, but 0/0 is 'nan'. Relational operators like < and > return false if passed illegal arguments. Although undef is a language value, 'nan' is not. Variables OpenSCAD variables are created by a statement with a name or identifier, assignment via an expression and a semicolon. The role of arrays, found in many imperative languages, is handled in OpenSCAD via vectors. var = 25; xx = 1.25 * cos(50); y = 2*xx+var; logic = true; MyString = \\\"This is a string\\\"; a_vector = [1,2,3]; rr = a_vector[2];      // member of vector range1 = [-1.5:0.5:3]; // for() loop range xx = [0:5];            // alternate for() loop range OpenSCAD is a Functional programming language, as such variables are bound to expressions and keep a single value during their entire lifetime due to the requirements of referential transparency.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"7005455c-a881-43d8-b371-91beab05d692":{"__data__":"{\"id_\":\"7005455c-a881-43d8-b371-91beab05d692\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"6118d7b9-2667-467f-8c43-7740024d1af2\",\"metadata\":{},\"hash\":\"JOFGxl1xiIOTttNT+zhXCo803Q9H8ryqWJ+85aIvKVA=\"},\"NEXT\":{\"nodeId\":\"2c6c7234-4ebe-4521-bba3-0b7a3ac9456c\",\"metadata\":{},\"hash\":\"lu3s8LlHafJnepS+ukmhsi492cBKvJsVXXiUrNXhVaM=\"}},\"hash\":\"a8OE9h7IXeM9oCscXe7XBmstVfDyda28dI38DDzxp/8=\",\"text\":\"the requirements of referential transparency. In imperative languages, such as C, the same behavior is seen as constants, which are typically contrasted with normal variables. In other words OpenSCAD variables are more like constants, but with an important difference. If variables are assigned a value multiple times, only the last assigned value is used in all places in the code. See further discussion at Variables are set at compile-time, not run-time. This behavior is due to the need to supply variable input on the command line, via the use of -D variable=value option. OpenSCAD currently places that assignment at the end of the source code, and thus must allow a variable's value to be changed for this purpose. Values cannot be modified during run time; all variables are effectively constants that do not change. Each variable retains its last assigned value at compile time, in line with Functional programming languages. Unlike Imperative languages, such as C, OpenSCAD is not an iterative language, and as such the concept of x = x + 1 is not valid. Understanding this concept leads to understanding the beauty of OpenSCAD. Before version 2015.03 It was not possible to do assignments at any place except the file top-level and module top-level. Inside an if/else  or for  loop, assign() was needed. Since version 2015.03 Variables can now be assigned in any scope. Note that assignments are only valid within the scope in which they are defined - you are still not allowed to leak values to an outer scope. See Scope of variables for more details. a=0; if (a==0) { a=1; //  before 2015.03 this line would generate a Compile Error //  since 2015.03  no longer an error, but the value a=1 is confined to within the braces {} } Undefined variable A non assigned variable has the special value undef. It could be tested in conditional expression, and returned by a function. Example  echo(\\\"Variable a is \\\", a);                // Variable a is undef if (a==undef) { echo(\\\"Variable a is tested undefined\\\"); // Variable a is tested undefined } Scope of variables\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2c6c7234-4ebe-4521-bba3-0b7a3ac9456c":{"__data__":"{\"id_\":\"2c6c7234-4ebe-4521-bba3-0b7a3ac9456c\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"7005455c-a881-43d8-b371-91beab05d692\",\"metadata\":{},\"hash\":\"a8OE9h7IXeM9oCscXe7XBmstVfDyda28dI38DDzxp/8=\"},\"NEXT\":{\"nodeId\":\"c9d54c4d-8e9e-446a-88e5-65c88c8f1c4b\",\"metadata\":{},\"hash\":\"Wt70RAXIDypjpafI6tap/hEPwyfhVD6PirQFw3byO4E=\"}},\"hash\":\"lu3s8LlHafJnepS+ukmhsi492cBKvJsVXXiUrNXhVaM=\",\"text\":\"echo(\\\"Variable a is tested undefined\\\"); // Variable a is tested undefined } Scope of variables When operators such as translate() and color() need to encompass more than one action ( actions end in ;), braces {} are needed to group the actions, creating a new, inner scope. When there is only one semicolon, braces are usually optional. Each pair of braces creates a new scope inside the scope where they were used. Since 2015.03, new variables can be created within this new scope. New values can be given to variables which were created in an outer scope . These variables and their values are also available to further inner scopes created within this scope, but are not available to any thing outside this scope. Variables still have only the last value assigned within a scope. // scope 1 a = 6;                // create a echo(a,b);            //                6, undef translate([5,0,0]){   // scope 1.1 a= 10; b= 16;              // create b echo(a,b);          //              100, 16   a=10; was overridden by later a=100; color(\\\"blue\\\") {     // scope 1.1.1 echo(a,b);        //              100, 20 cube(); b=20; }                   // back to 1.1 echo(a,b);          //              100, 16 a=100;              // override a in 1.1 }                     // back to 1 echo(a,b);            //                6, undef color(\\\"red\\\"){         // scope 1.2 cube(); echo(a,b);          //                6, undef }                     // back to 1 echo(a,b);            //                6, undef  //In this example, scopes 1 and 1.1 are outer scopes to 1.1.1 but 1.2 is not. Anonymous scopes are not considered scopes: { angle = 45; } rotate(angle) square(10); For() loops are not an exception to the rule about variables having only one value within a scope. A copy of loop contents is created for each pass. Each pass is given its own scope, allowing any variables to have unique values for that pass.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"c9d54c4d-8e9e-446a-88e5-65c88c8f1c4b":{"__data__":"{\"id_\":\"c9d54c4d-8e9e-446a-88e5-65c88c8f1c4b\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"2c6c7234-4ebe-4521-bba3-0b7a3ac9456c\",\"metadata\":{},\"hash\":\"lu3s8LlHafJnepS+ukmhsi492cBKvJsVXXiUrNXhVaM=\"},\"NEXT\":{\"nodeId\":\"389b6b69-1134-4a88-bf42-4659f56df784\",\"metadata\":{},\"hash\":\"YSrLUb/IljcCRNRbv1K2c/2q3iIzMSGqmmHLetOGDEo=\"}},\"hash\":\"Wt70RAXIDypjpafI6tap/hEPwyfhVD6PirQFw3byO4E=\",\"text\":\"Each pass is given its own scope, allowing any variables to have unique values for that pass. No, you still can't do a=a+1; Variables are set at compile-time, not run-time Because OpenSCAD calculates its variable values at compile-time, not run-time, the last variable assignment within a scope applies everywhere in that scope or inner scopes thereof. It may be helpful to think of them as override-able constants rather than as variables. // The value of 'a' reflects only the last set value a = 0; echo(a);  // 5 a = 3; echo(a);  // 5 a = 5; While this appears to be counter-intuitive, it allows you to do some interesting things: for instance, if you set up your shared library files to have default values defined as variables at their root level, when you include that file in your own code you can 're-define' or override those constants by simply assigning a new value to them. So changing constant values gives you more flexibility. If constants would never change, of course, you always can be sure having the value you see in any constant definition. Not so here. If you see a constant value definition at any other place its value could be different. This is very flexible. Special Variables Special variables provide an alternate means of passing arguments to modules and functions. All variables starting with a '$' are special variables, similar to special variables in lisp. As such they are more dynamic than regular variables. (for more details see Other Language Features) Vectors A vector or list is a sequence of zero or more OpenSCAD values. Vectors are a collection of numeric or boolean values, variables, vectors, strings or any combination thereof. They can also be expressions which evaluate to one of these. Vectors handle the role of arrays found in many imperative languages. The information here also applies to lists and tables which use vectors for their data. A vector has square brackets, [] enclosing zero or more items (elements or members), separated by commas. A vector can contain vectors, which contain vectors, etc. examples [1,2,3] [a,5,b] [] [5.643] [\\\"a\\\",\\\"b\\\",\\\"string\\\"] [[1,r],[x,y,z,4,5]]\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"389b6b69-1134-4a88-bf42-4659f56df784":{"__data__":"{\"id_\":\"389b6b69-1134-4a88-bf42-4659f56df784\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"c9d54c4d-8e9e-446a-88e5-65c88c8f1c4b\",\"metadata\":{},\"hash\":\"Wt70RAXIDypjpafI6tap/hEPwyfhVD6PirQFw3byO4E=\"},\"NEXT\":{\"nodeId\":\"fa7a258b-3fb2-4a50-ab34-f516f1b30487\",\"metadata\":{},\"hash\":\"YqyQ8dIts296us8EC6hTpqER/1vQ3psl/rWUlTuWqW0=\"}},\"hash\":\"YSrLUb/IljcCRNRbv1K2c/2q3iIzMSGqmmHLetOGDEo=\",\"text\":\"[\\\"a\\\",\\\"b\\\",\\\"string\\\"] [[1,r],[x,y,z,4,5]] [3, 5, [6,7], [[8,9],[10,[11,12],13], c, \\\"string\\\"] [4/3, 6*1.5, cos(60)] use in OpenSCAD: cube( [width,depth,height] );           // optional spaces shown for clarity translate( [x,y,z] ) polygon( [ [x0,y0],  [x1,y1],  [x2,y2] ] ); creation Vectors are created by writing the list of elements, separated by commas, and enclosed in square brackets. Variables are replaced by their values. cube([10,15,20]); a1 = [1,2,3]; a2 = [4,5]; a3 = [6,7,8,9]; b  = [a1,a2,a3];    // [ [1,2,3], [4,5], [6,7,8,9] ]  note increased nesting depth Indexing elements within vectors Elements within vectors are numbered from 0 to n-1 where n is the length returned by len(). Address elements within vectors with the following notation: e[5]           // element no 5 (sixth) at   1st nesting level e[5][2]        // element 2 of element 5    2nd nesting level e[5][2][0]     // element 0 of 2 of 5       3rd nesting level e[5][2][0][1]  // element 1 of 0 of 2 of 5  4th nesting level example elements with lengths from len() e = [ [1], [], [3,4,5], \\\"string\\\", \\\"x\\\", [[10,11],[12,13,14],[[15,16],[17]]] ];  // length 6 address       length  element e[0]          1       [1] e[1]          0       [] e[5]          3       [ [10,11], [12,13,14], [[15,16],[17]] ]\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"fa7a258b-3fb2-4a50-ab34-f516f1b30487":{"__data__":"{\"id_\":\"fa7a258b-3fb2-4a50-ab34-f516f1b30487\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"389b6b69-1134-4a88-bf42-4659f56df784\",\"metadata\":{},\"hash\":\"YSrLUb/IljcCRNRbv1K2c/2q3iIzMSGqmmHLetOGDEo=\"},\"NEXT\":{\"nodeId\":\"8340468e-231d-4a6c-b971-9864c464343e\",\"metadata\":{},\"hash\":\"N3Yi1rPPFySfI/EN3DR1jcvbRB+/hahCcXkiLnVolus=\"}},\"hash\":\"YqyQ8dIts296us8EC6hTpqER/1vQ3psl/rWUlTuWqW0=\",\"text\":\"e[5][1]       3       [ 12, 13, 14 ] e[5][2]       2       [ [15,16], [17] ] e[5][2][0]    2       [ 15, 16 ] e[5][2][0][1] undef   16  e[3]          6       \\\"string\\\" e[3 ][2]      1       \\\"r\\\"  s = [2,0,5]; a = 2; s[a]          undef   5 e[s[a]]       3       [ [10,11], [12,13,14], [[15,16],[17]] ] Dot notation indexing The first three elements of a vector can be accessed with an alternate dot notation: e.x    //equivalent to e[0] e.y    //equivalent to e[1] e.z    //equivalent to e[2] Vector operators concat [Note: Requires version 2015.03] concat() combines the elements of 2 or more vectors into a single vector. No change in nesting level is made. vector1 = [1,2,3]; vector2 = [4]; vector3 = [5,6]; new_vector = concat(vector1, vector2, vector3); // [1,2,3,4,5,6]  string_vector = concat(\\\"abc\\\",\\\"def\\\");                 // [\\\"abc\\\", \\\"def\\\"] one_string = str(string_vector[0],string_vector[1]); // \\\"abcdef\\\" len len() is a function which returns the length of vectors or strings. Indices of elements are from [0] to [length-1]. vector Returns the number of elements at this level. Single values, which are not vectors, return undef. string Returns the number of characters in string. a = [1,2,3]; echo(len(a));   //  3 See example elements with lengths Matrix A matrix is a vector of vectors. Example which defines a 2D rotation matrix mr = [ [cos(angle), -sin(angle)], [sin(angle),  cos(angle)] ]; Getting input\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"8340468e-231d-4a6c-b971-9864c464343e":{"__data__":"{\"id_\":\"8340468e-231d-4a6c-b971-9864c464343e\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"fa7a258b-3fb2-4a50-ab34-f516f1b30487\",\"metadata\":{},\"hash\":\"YqyQ8dIts296us8EC6hTpqER/1vQ3psl/rWUlTuWqW0=\"},\"NEXT\":{\"nodeId\":\"7aa5c3ee-7602-478f-b672-8d60145191ec\",\"metadata\":{},\"hash\":\"RwjHyR6/s81B1ua6sxS7ab06im9KU1I8WHzyDnJyObU=\"}},\"hash\":\"N3Yi1rPPFySfI/EN3DR1jcvbRB+/hahCcXkiLnVolus=\",\"text\":\"[sin(angle),  cos(angle)] ]; Getting input Now we have variables, it would be nice to be able to get input into them instead of setting the values from code. There are a few functions to read data from DXF files, or you can set a variable with the -D switch on the command line. Getting a point from a drawing Getting a point is useful for reading an origin point in a 2D view in a technical drawing. The function dxf_cross reads the intersection of two lines on a layer you specify and returns the intersection point. This means that the point must be given with two lines in the DXF file, and not a point entity. OriginPoint = dxf_cross(file=\\\"drawing.dxf\\\", layer=\\\"SCAD.Origin\\\", origin=[0, 0], scale=1); Getting a dimension value You can read dimensions from a technical drawing. This can be useful to read a rotation angle, an extrusion height, or spacing between parts. In the drawing, create a dimension that does not show the dimension value, but an identifier. To read the value, you specify this identifier from your program: TotalWidth = dxf_dim(file=\\\"drawing.dxf\\\", name=\\\"TotalWidth\\\", layer=\\\"SCAD.Origin\\\", origin=[0, 0], scale=1); For a nice example of both functions, see Example009 and the image on the homepage of OpenSCAD. Chapter 2 -- 3D Objects OpenSCAD User Manual/The OpenSCAD Language Primitive Solids cube Creates a cube in the first octant. When center is true, the cube is centered on the origin. Argument names are optional if given in the order shown here. cube(size = [x,y,z], center = true/false); cube(size =  x ,     center = true/false); parameters: size single value, cube with all sides this length 3 value array [x,y,z], cube with dimensions x, y and z. center false (default), 1st (positive) octant, one corner at (0,0,0) true, cube is centered at (0,0,0) default values:  cube();   yields:  cube(size = [1, 1, 1], center = false); examples: equivalent scripts for this example\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"7aa5c3ee-7602-478f-b672-8d60145191ec":{"__data__":"{\"id_\":\"7aa5c3ee-7602-478f-b672-8d60145191ec\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"8340468e-231d-4a6c-b971-9864c464343e\",\"metadata\":{},\"hash\":\"N3Yi1rPPFySfI/EN3DR1jcvbRB+/hahCcXkiLnVolus=\"},\"NEXT\":{\"nodeId\":\"4c3a92e6-c470-476e-9e1f-41990067f0fa\",\"metadata\":{},\"hash\":\"7Bgd+1dgsQLGr7VqQhv7CVQOSS9+lm3NlUO5Gn93KXI=\"}},\"hash\":\"RwjHyR6/s81B1ua6sxS7ab06im9KU1I8WHzyDnJyObU=\",\"text\":\"examples: equivalent scripts for this example cube(size = 18); cube(18); cube([18,18,18]); . cube(18,false); cube([18,18,18],false); cube([18,18,18],center=false); cube(size = [18,18,18], center = false); cube(center = false,size = [18,18,18] ); equivalent scripts for this example cube([18,28,8],true); box=[18,28,8];cube(box,true); sphere Creates a sphere at the origin of the coordinate system. The r argument name is optional. To use d instead of r, d must be named. Parameters r Radius. This is the radius of the sphere. The resolution of the sphere is based on the size of the sphere and the $fa, $fs and $fn variables. For more information on these special variables look at: OpenSCAD_User_Manual/Other_Language_Features d Diameter. This is the diameter of the sphere. $fa Fragment angle in degrees $fs Fragment size in mm $fn Resolution default values:  sphere();   yields:   sphere($fn = 0, $fa = 12, $fs = 2, r = 1); Usage Examples sphere(r = 1); sphere(r = 5); sphere(r = 10); sphere(d = 2); sphere(d = 10); sphere(d = 20); // this creates a high resolution sphere with a 2mm radius sphere(2, $fn=100); // also creates a 2mm high resolution sphere but this one // does not have as many small triangles on the poles of the sphere sphere(2, $fa=5, $fs=0.1); cylinder Creates a cylinder or cone centered about the z axis. When center is true, it is also centered vertically along the z axis. Parameter names are optional if given in the order shown here. If a parameter is named, all following parameters must also be named. NOTE: If r, d, d1 or d2 are used they must be named. cylinder(h = height, r1 = BottomRadius, r2 = TopRadius, center = true/false);\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"4c3a92e6-c470-476e-9e1f-41990067f0fa":{"__data__":"{\"id_\":\"4c3a92e6-c470-476e-9e1f-41990067f0fa\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"7aa5c3ee-7602-478f-b672-8d60145191ec\",\"metadata\":{},\"hash\":\"RwjHyR6/s81B1ua6sxS7ab06im9KU1I8WHzyDnJyObU=\"},\"NEXT\":{\"nodeId\":\"7ca2e74f-3950-4b07-aecb-a81d70794c8e\",\"metadata\":{},\"hash\":\"sGYjzgmPoYs/w2EXNAEIXGUG1Mwkkt1rM2WRmMiXlkM=\"}},\"hash\":\"7Bgd+1dgsQLGr7VqQhv7CVQOSS9+lm3NlUO5Gn93KXI=\",\"text\":\"Parameters h : height of the cylinder or cone r  : radius of cylinder. r1 = r2 = r. r1 : radius, bottom of cone. r2 : radius, top of cone. d  : diameter of cylinder. r1 = r2 = d / 2. [Note: Requires version 2014.03] d1 : diameter, bottom of cone. r1 = d1 / 2. [Note: Requires version 2014.03] d2 : diameter, top of cone. r2 = d2 / 2. [Note: Requires version 2014.03] center false (default), z ranges from 0 to h true, z ranges from -h/2 to +h/2 $fa : minimum angle (in degrees) of each fragment. $fs : minimum circumferential length of each fragment. $fn : fixed number of fragments in 360 degrees. Values of 3 or more override $fa and $fs $fa, $fs and $fn must be named parameters. click here for more details,. defaults: cylinder();  yields: cylinder($fn = 0, $fa = 12, $fs = 2, h = 1, r1 = 1, r2 = 1, center = false); equivalent scripts cylinder(h=15, r1=9.5, r2=19.5, center=false); cylinder(  15,    9.5,    19.5, false); cylinder(  15,    9.5,    19.5); cylinder(  15,    9.5, d2=39  ); cylinder(  15, d1=19,  d2=39  ); cylinder(  15, d1=19,  r2=19.5); equivalent scripts cylinder(h=15, r1=10, r2=0, center=true); cylinder(  15,    10,    0,        true); cylinder(h=15, d1=20, d2=0, center=true); center = false center = true equivalent scripts\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"7ca2e74f-3950-4b07-aecb-a81d70794c8e":{"__data__":"{\"id_\":\"7ca2e74f-3950-4b07-aecb-a81d70794c8e\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"4c3a92e6-c470-476e-9e1f-41990067f0fa\",\"metadata\":{},\"hash\":\"7Bgd+1dgsQLGr7VqQhv7CVQOSS9+lm3NlUO5Gn93KXI=\"},\"NEXT\":{\"nodeId\":\"7a3d3a05-99e8-462c-a189-8889be324817\",\"metadata\":{},\"hash\":\"Wgch/tJ5CRJk07SmonrXWsT7MJ8ZMMKeEwJufcc0FE0=\"}},\"hash\":\"sGYjzgmPoYs/w2EXNAEIXGUG1Mwkkt1rM2WRmMiXlkM=\",\"text\":\"center = false center = true equivalent scripts cylinder(h=20, r=10, center=true); cylinder(  20,   10, 10,true); cylinder(  20, d=20, center=true); cylinder(  20,r1=10, d2=20, center=true); cylinder(  20,r1=10, d2=2*10, center=true); use of $fn Larger values of $fn create smoother, more circular, surfaces at the cost of longer rendering time. Some use medium values during development for the faster rendering, then change to a larger value for the final F6 rendering. However, use of small values can produce some interesting non circular objects. A few examples are show here: scripts for these examples cylinder(20,20,20,$fn=3); cylinder(20,20,00,$fn=4); cylinder(20,20,10,$fn=4); undersized holes Using cylinder() with difference() to place holes in objects creates undersized holes. This is because circular paths are approximated with polygons inscribed within in a circle. The points of the polygon are on the circle, but straight lines between are inside. To have all of the hole larger than the true circle, the polygon must lie wholly outside of the circle (circumscribed). Modules for circumscribed holes script for this example poly_n = 6; color(\\\"blue\\\") translate([0, 0, 0.02]) linear_extrude(0.1) circle(10, $fn=poly_n); color(\\\"green\\\") translate([0, 0, 0.01]) linear_extrude(0.1) circle(10, $fn=360); color(\\\"purple\\\") linear_extrude(0.1) circle(10/cos(180/poly_n), $fn=poly_n); polyhedron A polyhedron is the most general 3D primitive solid. It can be used to create any regular or irregular shape including those with concave as well as convex features. Curved surfaces are approximated by a series of flat surfaces.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"7a3d3a05-99e8-462c-a189-8889be324817":{"__data__":"{\"id_\":\"7a3d3a05-99e8-462c-a189-8889be324817\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"7ca2e74f-3950-4b07-aecb-a81d70794c8e\",\"metadata\":{},\"hash\":\"sGYjzgmPoYs/w2EXNAEIXGUG1Mwkkt1rM2WRmMiXlkM=\"},\"NEXT\":{\"nodeId\":\"7906a468-eb11-495d-9559-dbcc503a1003\",\"metadata\":{},\"hash\":\"2qIXL8738BYeX0QHAXVwoE/Vkuct6jPc5j2CsKEn+Y4=\"}},\"hash\":\"Wgch/tJ5CRJk07SmonrXWsT7MJ8ZMMKeEwJufcc0FE0=\",\"text\":\"features. Curved surfaces are approximated by a series of flat surfaces. polyhedron( points = [ [X0, Y0, Z0], [X1, Y1, Z1], ... ], triangles = [ [P0, P1, P2], ... ], convexity = N); // before 2014.03 polyhedron( points = [ [X0, Y0, Z0], [X1, Y1, Z1], ... ], faces = [ [P0, P1, P2, P3, ...], ... ], convexity = N);   // 2014.03 & later Parameters points point numbers for cube Vector of 3d points or vertices. Each point is in turn a vector, [x,y,z], of its coordinates. Points may be defined in any order. N points are referenced, in the order defined, as 0 to N-1. triangles [Deprecated: triangles will be removed in future releases. Use faces parameter instead] Vector of faces that collectively enclose the solid. Each face is a vector containing the indices (0 based) of 3 points from the points vector. faces [Note: Requires version 2014.03] Vector of faces that collectively enclose the solid. Each face is a vector containing the indices (0 based) of 3 or more points from the points vector. Faces may be defined in any order. Define enough faces to fully enclose the solid, with no overlap. If points that describe a single face are not on the same plane, the face is automatically split into triangles as needed. convexity Integer. The convexity parameter specifies the maximum number of faces a ray intersecting the object might penetrate. This parameter is needed only for correct display of the object in OpenCSG preview mode. It has no effect on the polyhedron rendering. For display problems, setting it to 10 should work fine for most cases. default values: polyhedron(); yields: polyhedron(points = undef, faces = undef, convexity = 1); It is arbitrary which point you start with, but all faces must have points ordered in the same direction . OpenSCAD prefers clockwise when looking at each face from outside inward.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"7906a468-eb11-495d-9559-dbcc503a1003":{"__data__":"{\"id_\":\"7906a468-eb11-495d-9559-dbcc503a1003\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"7a3d3a05-99e8-462c-a189-8889be324817\",\"metadata\":{},\"hash\":\"Wgch/tJ5CRJk07SmonrXWsT7MJ8ZMMKeEwJufcc0FE0=\"},\"NEXT\":{\"nodeId\":\"ee5b54c9-1804-4baa-8fe6-99cea7cfc821\",\"metadata\":{},\"hash\":\"rKmVQQdtFlMgZsRVtjjyjmMcaTDB3RkwpqvqdGu6qno=\"}},\"hash\":\"2qIXL8738BYeX0QHAXVwoE/Vkuct6jPc5j2CsKEn+Y4=\",\"text\":\"OpenSCAD prefers clockwise when looking at each face from outside inward. The back is viewed from the back, the bottom from the bottom, etc. Another way to remember this ordering requirement is to use the right-hand rule. Using your right-hand, stick your thumb up and curl your fingers as if giving the thumbs-up sign, point your thumb into the face, and order the points in the direction your fingers curl. Try this on the example below. Example 1 Using polyhedron to generate cube( [ 10, 7, 5 ] ); unfolded cube faces CubePoints = [ [  0,  0,  0 ],  //0 [ 10,  0,  0 ],  //1 [ 10,  7,  0 ],  //2 [  0,  7,  0 ],  //3 [  0,  0,  5 ],  //4 [ 10,  0,  5 ],  //5 [ 10,  7,  5 ],  //6 [  0,  7,  5 ]]; //7  CubeFaces = [ [0,1,2,3],  // bottom [4,5,1,0],  // front [7,6,5,4],  // top [5,6,2,1],  // right [6,7,3,2],  // back [7,4,0,3]]; // left  polyhedron( CubePoints, CubeFaces ); equivalent descriptions of the bottom face [0,1,2,3], [0,1,2,3,0], [1,2,3,0], [2,3,0,1], [3,0,1,2], [0,1,2],[2,3,0],   // 2 triangles with no overlap [1,2,3],[3,0,1], [1,2,3],[0,1,3], Example 2 A square base pyramid: A simple polyhedron, square base pyramid polyhedron(\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"ee5b54c9-1804-4baa-8fe6-99cea7cfc821":{"__data__":"{\"id_\":\"ee5b54c9-1804-4baa-8fe6-99cea7cfc821\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"7906a468-eb11-495d-9559-dbcc503a1003\",\"metadata\":{},\"hash\":\"2qIXL8738BYeX0QHAXVwoE/Vkuct6jPc5j2CsKEn+Y4=\"},\"NEXT\":{\"nodeId\":\"cdec7d4d-fc47-40c1-a847-71fad1b2350f\",\"metadata\":{},\"hash\":\"7aCH4kxq/ztSadA0+IU/BOKuKh1Eg4mHqxpYUL7V9pc=\"}},\"hash\":\"rKmVQQdtFlMgZsRVtjjyjmMcaTDB3RkwpqvqdGu6qno=\",\"text\":\"A simple polyhedron, square base pyramid polyhedron( points=[ [10,10,0],[10,-10,0],[-10,-10,0],[-10,10,0], // the four points at base [0,0,10]  ],                                 // the apex point faces=[ [0,1,4],[1,2,4],[2,3,4],[3,0,4],              // each triangle side [1,0,3],[2,1,3] ]                         // two triangles for square base ); Example 3 A triangular prism: A polyhedron triangular prism example 1 showing only 2 faces module prism(l, w, h){ polyhedron( points=[[0,0,0], [l,0,0], [l,w,0], [0,w,0], [0,w,h], [l,w,h]], faces=[[0,1,2,3],[5,4,3,2],[0,4,5,1],[0,3,4],[5,2,1]] );  // preview unfolded (do not include in your function z = 0.08; separation = 2; border = .2; translate([0,w+separation,0]) cube([l,w,z]); translate([0,w+separation+w+border,0]) cube([l,h,z]); translate([0,w+separation+w+border+h+border,0]) cube([l,sqrt(w*w+h*h),z]); translate([l+border,w+separation+w+border+h+border,0]) polyhedron( points=[[0,0,0],[h,0,0],[0,sqrt(w*w+h*h),0], [0,0,z],[h,0,z],[0,sqrt(w*w+h*h),z]], faces=[[0,1,2], [3,5,4], [0,3,4,1], [1,4,5,2], [2,5,3,0]] ); translate([0-border,w+separation+w+border+h+border,0]) polyhedron(\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"cdec7d4d-fc47-40c1-a847-71fad1b2350f":{"__data__":"{\"id_\":\"cdec7d4d-fc47-40c1-a847-71fad1b2350f\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"ee5b54c9-1804-4baa-8fe6-99cea7cfc821\",\"metadata\":{},\"hash\":\"rKmVQQdtFlMgZsRVtjjyjmMcaTDB3RkwpqvqdGu6qno=\"},\"NEXT\":{\"nodeId\":\"0b6f79b2-3517-4214-850d-da0e2f5f68ff\",\"metadata\":{},\"hash\":\"PBC/f8nS1QtbOmRMjNTFkuhdxDbcS8ORVgz8Uyt/3ho=\"}},\"hash\":\"7aCH4kxq/ztSadA0+IU/BOKuKh1Eg4mHqxpYUL7V9pc=\",\"text\":\"polyhedron( points=[[0,0,0],[0-h,0,0],[0,sqrt(w*w+h*h),0], [0,0,z],[0-h,0,z],[0,sqrt(w*w+h*h),z]], faces=[[1,0,2],[5,3,4],[0,1,4,3],[1,2,5,4],[2,0,3,5]] ); }  prism(10, 5, 3); Debugging polyhedra Mistakes in defining polyhedra include not having all faces with the same order, overlap of faces and missing faces or portions of faces. As a general rule, the polyhedron faces should also satisfy manifold conditions: exactly two faces should meet at any polyhedron edge. if two faces have a vertex in common, they should be in the same cycle face-edge around the vertex. The first rule eliminates polyhedra like two cubes with a common edge and not watertight models; the second excludes polyhedra like two cubes with a common vertex. When viewed from the outside, the points describing each face must be in the same order . OpenSCAD prefers CW, and provides a mechanism for detecting CCW. When the thrown together view (F12) is used with F5, CCW faces are shown in pink. Reorder the points for incorrect faces. Rotate the object to view all faces. The pink view can be turned off with F10. OpenSCAD allows, temporarily, commenting out part of the face descriptions so that only the remaining faces are displayed. Use // to comment out the rest of the line. Use /* and */ to start and end a comment block. This can be part of a line or extend over several lines. Viewing only part of the faces can be helpful in determining the right points for an individual face. Note that a solid is not shown, only the faces. If using F12, all faces have one pink side. Commenting some faces helps also to show any internal face. CubeFaces = [ /* [0,1,2,3],  // bottom [4,5,1,0],  // front */ [7,6,5,4],  // top\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"0b6f79b2-3517-4214-850d-da0e2f5f68ff":{"__data__":"{\"id_\":\"0b6f79b2-3517-4214-850d-da0e2f5f68ff\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"cdec7d4d-fc47-40c1-a847-71fad1b2350f\",\"metadata\":{},\"hash\":\"7aCH4kxq/ztSadA0+IU/BOKuKh1Eg4mHqxpYUL7V9pc=\"},\"NEXT\":{\"nodeId\":\"43564100-b022-4aff-84f1-d5dee391544e\",\"metadata\":{},\"hash\":\"XZWMtZZRdVTptmN8vRCeTF0fQ/kDz7U+z5A0hSUcPUw=\"}},\"hash\":\"PBC/f8nS1QtbOmRMjNTFkuhdxDbcS8ORVgz8Uyt/3ho=\",\"text\":\"[7,6,5,4],  // top /* [5,6,2,1],  // right [6,7,3,2],  // back */ [7,4,0,3]]; // left After defining a polyhedron, its preview may seem correct. The polyhedron alone may even render fine. However, to be sure it is a valid manifold and that it can generate a valid STL file, union it with any cube and render it (F6). If the polyhedron disappears, it means that it is not correct. Revise the winding order of all faces and the two rules stated above. Mis-ordered faces Example 4 a more complex polyhedron with mis-ordered faces When you select 'Thrown together' from the view menu and compile the design (not compile and render!) the preview shows the mis-oriented polygons highlighted. Unfortunately this highlighting is not possible in the OpenCSG preview mode because it would interfere with the way the OpenCSG preview mode is implemented.) Below you can see the code and the picture of such a problematic polyhedron, the bad polygons (faces or compositions of faces) are in pink. // Bad polyhedron polyhedron (points = [ [0, -10, 60], [0, 10, 60], [0, 10, 0], [0, -10, 0], [60, -10, 60], [60, 10, 60], [10, -10, 50], [10, 10, 50], [10, 10, 30], [10, -10, 30], [30, -10, 50], [30, 10, 50] ], faces = [ [0,2,3],   [0,1,2],  [0,4,5],  [0,5,1],   [5,4,2],  [2,4,3], [6,8,9],  [6,7,8],  [6,10,11], [6,11,7], [10,8,11],\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"43564100-b022-4aff-84f1-d5dee391544e":{"__data__":"{\"id_\":\"43564100-b022-4aff-84f1-d5dee391544e\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"0b6f79b2-3517-4214-850d-da0e2f5f68ff\",\"metadata\":{},\"hash\":\"PBC/f8nS1QtbOmRMjNTFkuhdxDbcS8ORVgz8Uyt/3ho=\"},\"NEXT\":{\"nodeId\":\"4025f175-02e8-4b6b-84a0-70e44e650eac\",\"metadata\":{},\"hash\":\"Lsu22M19EMwtlIiEJ5/T1uZYJhl3JdUUlq/LTXBTBf8=\"}},\"hash\":\"XZWMtZZRdVTptmN8vRCeTF0fQ/kDz7U+z5A0hSUcPUw=\",\"text\":\"[10,9,8], [0,3,9],  [9,0,6], [10,6, 0],  [0,4,10], [3,9,10], [3,10,4], [1,7,11],  [1,11,5], [1,7,8], [1,8,2],  [2,8,11], [2,11,5] ] ); Polyhedron with badly oriented polygons A correct polyhedron would be the following: polyhedron (points = [ [0, -10, 60], [0, 10, 60], [0, 10, 0], [0, -10, 0], [60, -10, 60], [60, 10, 60], [10, -10, 50], [10, 10, 50], [10, 10, 30], [10, -10, 30], [30, -10, 50], [30, 10, 50] ], faces = [ [0,3,2],  [0,2,1],  [4,0,5],  [5,0,1],  [5,2,4],  [4,2,3], [6,8,9],  [6,7,8],  [6,10,11],[6,11,7], [10,8,11], [10,9,8], [3,0,9],  [9,0,6],  [10,6, 0],[0,4,10], [3,9,10], [3,10,4], [1,7,11], [1,11,5], [1,8,7], [2,8,1],  [8,2,11], [5,11,2] ] ); Beginner's tip If you don't really understand \\\"orientation\\\", try to identify the mis-oriented pink faces and then invert the sequence of the references to the points vectors until you get it right. E.g. in the above example, the third triangle ([0,4,5]) was wrong and we fixed it as [4,0,5].\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"4025f175-02e8-4b6b-84a0-70e44e650eac":{"__data__":"{\"id_\":\"4025f175-02e8-4b6b-84a0-70e44e650eac\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"43564100-b022-4aff-84f1-d5dee391544e\",\"metadata\":{},\"hash\":\"XZWMtZZRdVTptmN8vRCeTF0fQ/kDz7U+z5A0hSUcPUw=\"},\"NEXT\":{\"nodeId\":\"23a5b34d-ca0f-4e49-bc61-a3aa295a2be2\",\"metadata\":{},\"hash\":\"GzLHnyy13Q0eny3SPJwxjn1ODzVfLYtvohd46X5CQ6E=\"}},\"hash\":\"Lsu22M19EMwtlIiEJ5/T1uZYJhl3JdUUlq/LTXBTBf8=\",\"text\":\"Remember that a face list is a circular list. In addition, you may select \\\"Show Edges\\\" from the \\\"View Menu\\\", print a screen capture and number both the points and the faces. In our example, the points are annotated in black and the faces in blue. Turn the object around and make a second copy from the back if needed. This way you can keep track. Clockwise Technique Orientation is determined by clockwise circular indexing. This means that if you're looking at the triangle (in this case [4,0,5]) from the outside you'll see that the path is clockwise around the center of the face. The winding order [4,0,5] is clockwise and therefore good. The winding order [0,4,5] is counter- clockwise and therefore bad. Likewise, any other clockwise order of [4,0,5] works: [5,4,0] & [0,5,4] are good too. If you use the clockwise technique, you'll always have your faces outside (outside of OpenSCAD, other programs do use counter-clockwise as the outside though). Think of it as a Left Hand Rule: If you place your left hand on the face with your fingers curled in the direction of the order of the points, your thumb should point outward. If your thumb points inward, you need to reverse the winding order. Polyhedron with badly oriented polygons Succinct description of a 'Polyhedron' * Points define all of the points/vertices in the shape. * Faces is a list of flat polygons that connect up the points/vertices. Each point, in the point list, is defined with a 3-tuple x,y,z position specification. Points in the point list are automatically enumerated starting from zero for use in the faces list (0,1,2,3,... etc). Each face, in the faces list, is defined by selecting 3 or more of the points (using the point order number) out of the point list. e.g. faces=[ [0,1,2] ] defines a triangle from the first point (points are zero referenced) to the second point and then to the third point. When looking at any face from the outside, the face must list all points in a clockwise order. Point repetitions in a polyhedron point list\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"23a5b34d-ca0f-4e49-bc61-a3aa295a2be2":{"__data__":"{\"id_\":\"23a5b34d-ca0f-4e49-bc61-a3aa295a2be2\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"4025f175-02e8-4b6b-84a0-70e44e650eac\",\"metadata\":{},\"hash\":\"Lsu22M19EMwtlIiEJ5/T1uZYJhl3JdUUlq/LTXBTBf8=\"},\"NEXT\":{\"nodeId\":\"df9d2c1e-8266-4ab3-9445-d6f753ff9e83\",\"metadata\":{},\"hash\":\"6pwGMOLHy+nANoTU+80yzrZTtr8Rn5HKSQ4nZ0e9RVw=\"}},\"hash\":\"GzLHnyy13Q0eny3SPJwxjn1ODzVfLYtvohd46X5CQ6E=\",\"text\":\"Point repetitions in a polyhedron point list The point list of the polyhedron definition may have repetitions. When two or more points have the same coordinates they are considered the same polyhedron vertex. So, the following polyhedron: points = [[ 0, 0, 0], [10, 0, 0], [ 0,10, 0], [ 0, 0, 0], [10, 0, 0], [ 0,10, 0], [ 0,10, 0], [10, 0, 0], [ 0, 0,10], [ 0, 0, 0], [ 0, 0,10], [10, 0, 0], [ 0, 0, 0], [ 0,10, 0], [ 0, 0,10]]; polyhedron(points, [[0,1,2], [3,4,5], [6,7,8], [9,10,11], [12,13,14]]); define the same tetrahedron as: points = [[0,0,0], [0,10,0], [10,0,0], [0,0,10]]; polyhedron(points, [[0,2,1], [0,1,3], [1,2,3], [0,3,2]]); 3D to 2D Projection Using the projection() function, you can create 2d drawings from 3d models, and export them to the dxf format. It works by projecting a 3D model to the (x,y) plane, with z at 0. If cut=true, only points with z=0 are considered (effectively cutting the object), with cut=false(the default), points above and below the plane are considered as well (creating a proper projection). Example: Consider example002.scad, that comes with OpenSCAD. Then you can do a 'cut' projection, which gives you the 'slice' of the x-y plane with z=0. projection(cut = true) example002(); You can also do an 'ordinary' projection, which gives a sort of 'shadow' of the object onto the xy plane. projection(cut = false) example002();\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"df9d2c1e-8266-4ab3-9445-d6f753ff9e83":{"__data__":"{\"id_\":\"df9d2c1e-8266-4ab3-9445-d6f753ff9e83\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"23a5b34d-ca0f-4e49-bc61-a3aa295a2be2\",\"metadata\":{},\"hash\":\"GzLHnyy13Q0eny3SPJwxjn1ODzVfLYtvohd46X5CQ6E=\"},\"NEXT\":{\"nodeId\":\"95ca73f2-fbb7-4bee-a0a9-fd68dd528b71\",\"metadata\":{},\"hash\":\"VIO9Lo5zwOBfIrygKASTWPOAhbkrRaFGgGFEqommTt8=\"}},\"hash\":\"6pwGMOLHy+nANoTU+80yzrZTtr8Rn5HKSQ4nZ0e9RVw=\",\"text\":\"projection(cut = false) example002(); Another Example You can also use projection to get a 'side view' of an object. Let's take example002, and move it up, out of the X-Y plane, and rotate it: translate([0,0,25]) rotate([90,0,0]) example002(); Now we can get a side view with projection() projection() translate([0,0,25]) rotate([90,0,0]) example002(); Links: example021.scad from Clifford Wolf's site. More complicated example from Giles Bathgate's blog Chapter 3 -- 2D Objects OpenSCAD User Manual/The OpenSCAD Language All 2D primitives can be transformed with 3D transformations. Usually used as part of a 3D extrusion. Although infinitely thin, they are rendered with a 1 thickness. square Creates a square or rectangle in the first quadrant. When center is true the square is centered on the origin. Argument names are optional if given in the order shown here. square(size = [x, y], center = true/false); square(size =  x    , center = true/false); parameters: size single value, square with both sides this length 2 value array [x,y], rectangle with dimensions x and y center false (default), 1st (positive) quadrant, one corner at (0,0) true, square is centered at (0,0) default values:  square();   yields:  square(size = [1, 1], center = false); examples: equivalent scripts for this example square(size = 10); square(10); square([10,10]); . square(10,false); square([10,10],false); square([10,10],center=false); square(size = [10, 10], center = false); square(center = false,size = [10, 10] ); equivalent scripts for this example square([20,10],true); a=[20,10];square(a,true); circle Creates a circle at the origin. All parameters, except r, must be named. circle(r=radius | d=diameter); Parameters r : circle radius. r name is the only one optional with circle.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"95ca73f2-fbb7-4bee-a0a9-fd68dd528b71":{"__data__":"{\"id_\":\"95ca73f2-fbb7-4bee-a0a9-fd68dd528b71\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"df9d2c1e-8266-4ab3-9445-d6f753ff9e83\",\"metadata\":{},\"hash\":\"6pwGMOLHy+nANoTU+80yzrZTtr8Rn5HKSQ4nZ0e9RVw=\"},\"NEXT\":{\"nodeId\":\"d17b6989-bc06-4246-8a03-649dfae82608\",\"metadata\":{},\"hash\":\"nYtJYivPOtH0nmhVicN/9mc5ydSu+YtpZ1is6ysDqjY=\"}},\"hash\":\"VIO9Lo5zwOBfIrygKASTWPOAhbkrRaFGgGFEqommTt8=\",\"text\":\"Parameters r : circle radius. r name is the only one optional with circle. circle resolution is based on size, using $fa or $fs. For a small, high resolution circle you can make a large circle, then scale it down, or you could set $fn or other special variables. Note: These examples exceed the resolution of a 3d printer as well as of the display screen. scale([1/100, 1/100, 1/100]) circle(200); // create a high resolution circle with a radius of 2. circle(2, $fn=50);                        // Another way. d  : circle diameter (only available in versions later than 2014.03). $fa : minimum angle (in degrees) of each fragment. $fs : minimum circumferential length of each fragment. $fn : fixed number of fragments in 360 degrees. Values of 3 or more override $fa and $fs $fa, $fs and $fn must be named. click here for more details,. defaults:  circle(); yields:  circle($fn = 0, $fa = 12, $fs = 2, r = 1); equivalent scripts for this example circle(10); circle(r=10); circle(d=20); circle(d=2+9*2); ellipse An ellipse can be created from a circle by using either scale() or resize() to make the x and y dimensions unequal. See OpenSCAD User Manual/Transformations  equivalent scripts for this example resize([30,10])circle(d=20); scale([1.5,.5])circle(d=20); regular polygon A regular polygon of 3 or more sides can be created by using circle() with $fn set to the number of sides. The following two pieces of code are equivalent. circle(r=1, $fn=4); module regular_polygon(order = 4, r=1){ angles=[ for (i = [0:order-1]) i*(360/order) ]; coords=[ for (th=angles) [r*cos(th), r*sin(th)] ]; polygon(coords); } regular_polygon(); These result in the following shapes, where the polygon is inscribed within the circle with all sides (and angles) equal.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d17b6989-bc06-4246-8a03-649dfae82608":{"__data__":"{\"id_\":\"d17b6989-bc06-4246-8a03-649dfae82608\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"95ca73f2-fbb7-4bee-a0a9-fd68dd528b71\",\"metadata\":{},\"hash\":\"VIO9Lo5zwOBfIrygKASTWPOAhbkrRaFGgGFEqommTt8=\"},\"NEXT\":{\"nodeId\":\"00302a0a-d90f-4dc3-ad83-d4918852a042\",\"metadata\":{},\"hash\":\"on1NeB+c5u+BzG+vdesyQVaS3Wn19Wmk1gjhn0J2B+c=\"}},\"hash\":\"nYtJYivPOtH0nmhVicN/9mc5ydSu+YtpZ1is6ysDqjY=\",\"text\":\"One corner points to the positive x direction. For irregular shapes see the polygon primitive below. script for these examples translate([-42,  0]){circle(20,$fn=3);%circle(20,$fn=90);} translate([  0,  0]) circle(20,$fn=4); translate([ 42,  0]) circle(20,$fn=5); translate([-42,-42]) circle(20,$fn=6); translate([  0,-42]) circle(20,$fn=8); translate([ 42,-42]) circle(20,$fn=12); color(\\\"black\\\"){ translate([-42,  0,1])text(\\\"3\\\",7,,center); translate([  0,  0,1])text(\\\"4\\\",7,,center); translate([ 42,  0,1])text(\\\"5\\\",7,,center); translate([-42,-42,1])text(\\\"6\\\",7,,center); translate([  0,-42,1])text(\\\"8\\\",7,,center); translate([ 42,-42,1])text(\\\"12\\\",7,,center); } polygon Creates a multiple sided shape from a list of x,y coordinates. A polygon is the most powerful 2D object. It can create anything that circle and squares can, as well as much more. This includes irregular shapes with both concave and convex edges. In addition it can place holes within that shape. polygon(points = [ [x, y], ... ], paths = [ [p1, p2, p3..], ...], convexity = N); Parameters points The list of x,y points of the polygon. : A vector of 2 element vectors. Note: points are indexed from 0 to n-1. paths default If no path is specified, all points are used in the order listed. single vector The order to traverse the points. Uses indices from 0 to n-1. May be in a different order and use all or part, of the points listed. multiple vectors Creates primary and secondary shapes. Secondary shapes are subtracted from the primary shape (like difference). Secondary shapes may be wholly or partially within the primary shape.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"00302a0a-d90f-4dc3-ad83-d4918852a042":{"__data__":"{\"id_\":\"00302a0a-d90f-4dc3-ad83-d4918852a042\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"d17b6989-bc06-4246-8a03-649dfae82608\",\"metadata\":{},\"hash\":\"nYtJYivPOtH0nmhVicN/9mc5ydSu+YtpZ1is6ysDqjY=\"},\"NEXT\":{\"nodeId\":\"315883cb-167b-4104-82bf-fb177462a9e2\",\"metadata\":{},\"hash\":\"e8D8f6IYTJvbvSK0jVt7pMCgsp5IH687D2pX45k6vT8=\"}},\"hash\":\"on1NeB+c5u+BzG+vdesyQVaS3Wn19Wmk1gjhn0J2B+c=\",\"text\":\"Secondary shapes may be wholly or partially within the primary shape. A closed shape is created by returning from the last point specified to the first. convexity Integer number of \\\"inward\\\" curves, ie. expected path crossings of an arbitrary line through the polygon. See below. defaults:   polygon();  yields:  polygon(points = undef, paths = undef, convexity = 1); Example no holes equivalent scripts for this example polygon(points=[[0,0],[100,0],[130,50],[30,50]]); polygon([[0,0],[100,0],[130,50],[30,50]], paths=[[0,1,2,3]]); polygon([[0,0],[100,0],[130,50],[30,50]],[[3,2,1,0]]); polygon([[0,0],[100,0],[130,50],[30,50]],[[1,0,3,2]]);  a=[[0,0],[100,0],[130,50],[30,50]]; b=[[3,0,1,2]]; polygon(a); polygon(a,b); polygon(a,[[2,3,0,1,2]]); Example one hole equivalent scripts for this example polygon(points=[[0,0],[100,0],[0,100],[10,10],[80,10],[10,80]], paths=[[0,1,2],[3,4,5]],convexity=10); triangle_points =[[0,0],[100,0],[0,100],[10,10],[80,10],[10,80]]; triangle_paths =[[0,1,2],[3,4,5]]; polygon(triangle_points,triangle_paths,10); The 1st path vector, [0,1,2], selects the points, [0,0],[100,0],[0,100], for the primary shape. The 2nd path vector, [3,4,5], selects the points, [10,10],[80,10],[10,80], for the secondary shape. The secondary shape is subtracted from the primary ( think difference() ). Since the secondary is wholly within the primary, it leaves a shape with a hole. Example multi hole [Note: Requires version 2015.03] (for use of concat())\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"315883cb-167b-4104-82bf-fb177462a9e2":{"__data__":"{\"id_\":\"315883cb-167b-4104-82bf-fb177462a9e2\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"00302a0a-d90f-4dc3-ad83-d4918852a042\",\"metadata\":{},\"hash\":\"on1NeB+c5u+BzG+vdesyQVaS3Wn19Wmk1gjhn0J2B+c=\"},\"NEXT\":{\"nodeId\":\"07954e2a-8064-4622-bcfe-ab1a5fed4fd9\",\"metadata\":{},\"hash\":\"TfBFWKB3rPCXK1Qzgzu1aXAo/4uLkls/LR4FpohENpk=\"}},\"hash\":\"e8D8f6IYTJvbvSK0jVt7pMCgsp5IH687D2pX45k6vT8=\",\"text\":\"[Note: Requires version 2015.03] (for use of concat()) //example polygon with multiple holes a0 = [[0,0],[100,0],[130,50],[30,50]];     // main b0 = [1,0,3,2]; a1 = [[20,20],[40,20],[30,30]];            // hole 1 b1 = [4,5,6]; a2 = [[50,20],[60,20],[40,30]];            // hole 2 b2 = [7,8,9]; a3 = [[65,10],[80,10],[80,40],[65,40]];    // hole 3 b3 = [10,11,12,13]; a4 = [[98,10],[115,40],[85,40],[85,10]];   // hole 4 b4 = [14,15,16,17]; a  = concat (a0,a1,a2,a3,a4); b  = [b0,b1,b2,b3,b4]; polygon(a,b); //alternate polygon(a,[b0,b1,b2,b3,b4]); convexity The convexity parameter specifies the maximum number of front sides (back sides) a ray intersecting the object might penetrate. This parameter is needed only for correct display of the object in OpenCSG preview mode and has no effect on the polyhedron rendering. This image shows a 2D shape with a convexity of 4, as the ray indicated in red crosses the 2D shape a maximum of 4 times. The convexity of a 3D shape would be determined in a similar way. Setting it to 10 should work fine for most cases. import_dxf [Deprecated: import_dxf() will be removed in future releases. Use import() instead.] Read a DXF file and create a 2D shape. Example linear_extrude(height = 5, center = true, convexity = 10) import_dxf(file = \\\"example009.dxf\\\", layer = \\\"plate\\\"); Text The text module creates text as a 2D geometric object, using fonts installed on the local system or provided as separate font file. [Note: Requires version 2015.03] Parameters text\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"07954e2a-8064-4622-bcfe-ab1a5fed4fd9":{"__data__":"{\"id_\":\"07954e2a-8064-4622-bcfe-ab1a5fed4fd9\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"315883cb-167b-4104-82bf-fb177462a9e2\",\"metadata\":{},\"hash\":\"e8D8f6IYTJvbvSK0jVt7pMCgsp5IH687D2pX45k6vT8=\"},\"NEXT\":{\"nodeId\":\"f795328b-3c9a-4521-8495-3bde42381ea8\",\"metadata\":{},\"hash\":\"2rA4QuJyYXjaul+1zz+toucJt1ps6lqnFNwqAUc7ZgE=\"}},\"hash\":\"TfBFWKB3rPCXK1Qzgzu1aXAo/4uLkls/LR4FpohENpk=\",\"text\":\"[Note: Requires version 2015.03] Parameters text String. The text to generate. size Decimal. The generated text has an ascent (height above the baseline) of approximately the given value. Default is 10. Different fonts can vary somewhat and may not fill the size specified exactly, typically they render slightly smaller. font String. The name of the font that should be used. This is not the name of the font file, but the logical font name (internally handled by the fontconfig library). This can also include a style parameter, see below. A list of installed fonts & styles can be obtained using the font list dialog (Help -> Font List). halign Example 1: Result. String. The horizontal alignment for the text. Possible values are \\\"left\\\", \\\"center\\\" and \\\"right\\\". Default is \\\"left\\\". valign String. The vertical alignment for the text. Possible values are \\\"top\\\", \\\"center\\\", \\\"baseline\\\" and \\\"bottom\\\". Default is \\\"baseline\\\". spacing Decimal. Factor to increase/decrease the character spacing. The default value of 1 results in the normal spacing for the font, giving a value greater than 1 causes the letters to be spaced further apart. direction String. Direction of the text flow. Possible values are \\\"ltr\\\" (left-to-right), \\\"rtl\\\" (right-to-left), \\\"ttb\\\" (top-to-bottom) and \\\"btt\\\" (bottom-to-top). Default is \\\"ltr\\\". language String. The language of the text. Default is \\\"en\\\". script String. The script of the text. Default is \\\"latin\\\". $fn used for subdividing the curved path segments provided by freetype Example text(\\\"OpenSCAD\\\"); Notes To allow specification of particular Unicode characters, you can specify them in a string with the following escape codes; \\\\x03     - hex char-value (only hex values from 01 to 7f are supported) \\\\u0123   - Unicode char with 4 hexadecimal digits (note: lowercase \\\\u) \\\\U012345 - Unicode char with 6 hexadecimal digits (note: uppercase \\\\U) The null character (NUL) is mapped to the space character (SP).\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f795328b-3c9a-4521-8495-3bde42381ea8":{"__data__":"{\"id_\":\"f795328b-3c9a-4521-8495-3bde42381ea8\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"07954e2a-8064-4622-bcfe-ab1a5fed4fd9\",\"metadata\":{},\"hash\":\"TfBFWKB3rPCXK1Qzgzu1aXAo/4uLkls/LR4FpohENpk=\"},\"NEXT\":{\"nodeId\":\"e2e789c3-f600-4c47-a433-6de9c639df5d\",\"metadata\":{},\"hash\":\"HfN97ZFXCxkJVLl/FE8lEJN5AV0lSbwagiJcTFpll9U=\"}},\"hash\":\"2rA4QuJyYXjaul+1zz+toucJt1ps6lqnFNwqAUc7ZgE=\",\"text\":\"The null character (NUL) is mapped to the space character (SP). assert(version() == [2019, 5, 0]); assert(ord(\\\" \\\") == 32); assert(ord(\\\"\\\\x00\\\") == 32); assert(ord(\\\"\\\\u0000\\\") == 32); assert(ord(\\\"\\\\U000000\\\") == 32); Example t=\\\"\\\\u20AC10 \\\\u263A\\\"; // 10 euro and a smilie Using Fonts & Styles Fonts are specified by their logical font name; in addition a style parameter can be added to select a specific font style like \\\"bold\\\" or \\\"italic\\\", such as: font=\\\"Liberation Sans:style=Bold Italic\\\" The font list dialog (available under Help > Font List) shows the font name and the font style for each available font. For reference, the dialog also displays the location of the font file. You can drag a font in the font list, into the editor window to use in the text() statement. OpenSCAD font list dialog Example 2: Result. OpenSCAD vertical text alignment OpenSCAD includes the fonts Liberation Mono, Liberation Sans, and Liberation Serif. Hence, as fonts in general differ by platform type, use of these included fonts is likely to be portable across platforms. For common/casual text usage, the specification of one of these fonts is recommended for this reason. Liberation Sans is the default font to encourage this. In addition to the installed fonts, it's possible to add project specific font files. Supported font file formats are TrueType Fonts (*.ttf) and OpenType Fonts (*.otf). The files need to be registered with use<>. use <ttf/paratype-serif/PTF55F.ttf> After the registration, the font is listed in the font list dialog, so in case logical name of a font is unknown, it can be looked up as it was registered. OpenSCAD uses fontconfig to find and manage fonts, so it's possible to list the system configured fonts on command line using the fontconfig tools in a format similar to the GUI dialog. $ fc-list -f \\\"%-60{{%{family[0]}%{:style[0]=}}}%{file}\\\\n\\\" | sort ...\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"e2e789c3-f600-4c47-a433-6de9c639df5d":{"__data__":"{\"id_\":\"e2e789c3-f600-4c47-a433-6de9c639df5d\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"f795328b-3c9a-4521-8495-3bde42381ea8\",\"metadata\":{},\"hash\":\"2rA4QuJyYXjaul+1zz+toucJt1ps6lqnFNwqAUc7ZgE=\"},\"NEXT\":{\"nodeId\":\"e27904a4-7206-4073-905b-b237f4fa88e6\",\"metadata\":{},\"hash\":\"VpiBs8/7ebRRxG7vYt05uKAIoHyy+BXR+H14+s6OTIM=\"}},\"hash\":\"HfN97ZFXCxkJVLl/FE8lEJN5AV0lSbwagiJcTFpll9U=\",\"text\":\"... Liberation Mono:style=Bold Italic /usr/share/fonts/truetype/liberation2/LiberationMono-BoldItalic.ttf Liberation Mono:style=Bold        /usr/share/fonts/truetype/liberation2/LiberationMono-Bold.ttf Liberation Mono:style=Italic      /usr/share/fonts/truetype/liberation2/LiberationMono-Italic.ttf Liberation Mono:style=Regular     /usr/share/fonts/truetype/liberation2/LiberationMono-Regular.ttf ... Example square(10);  translate([15, 15]) { text(\\\"OpenSCAD\\\", font = \\\"Liberation Sans\\\"); }  translate([15, 0]) { text(\\\"OpenSCAD\\\", font = \\\"Liberation Sans:style=Bold Italic\\\"); } Alignment Vertical alignment top The text is aligned with the top of the bounding box at the given Y coordinate. center The text is aligned with the center of the bounding box at the given Y coordinate. baseline The text is aligned with the font baseline at the given Y coordinate. This is the default. bottom The text is aligned with the bottom of the bounding box at the given Y coordinate. OpenSCAD horizontal text alignment 3D text example text = \\\"Align\\\"; font = \\\"Liberation Sans\\\";  valign = [ [  0, \\\"top\\\"], [ 40, \\\"center\\\"], [ 75, \\\"baseline\\\"], [110, \\\"bottom\\\"] ];  for (a = valign) { translate([10, 120 - a[0], 0]) { color(\\\"red\\\") cube([135, 1, 0.1]); color(\\\"blue\\\") cube([1, 20, 0.1]); linear_extrude(height = 0.5) { text(text = str(text,\\\"_\\\",a[1]), font = font, size = 20, valign = a[1]); } } } Horizontal alignment left The text is aligned with the left side of the bounding box at the given X coordinate. This is the default. center The text is aligned with the center of the bounding box at the given X coordinate. right The text is aligned with the right of the bounding box at the given X coordinate. text = \\\"Align\\\";\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"e27904a4-7206-4073-905b-b237f4fa88e6":{"__data__":"{\"id_\":\"e27904a4-7206-4073-905b-b237f4fa88e6\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"e2e789c3-f600-4c47-a433-6de9c639df5d\",\"metadata\":{},\"hash\":\"HfN97ZFXCxkJVLl/FE8lEJN5AV0lSbwagiJcTFpll9U=\"},\"NEXT\":{\"nodeId\":\"17b91545-8391-4d40-b65b-5e53d1c9a6f7\",\"metadata\":{},\"hash\":\"l50cwhAnR8m01ytahtGsfq3RTpibI0uiuGXqF+xmVDw=\"}},\"hash\":\"VpiBs8/7ebRRxG7vYt05uKAIoHyy+BXR+H14+s6OTIM=\",\"text\":\"text = \\\"Align\\\"; font = \\\"Liberation Sans\\\";  halign = [ [10, \\\"left\\\"], [50, \\\"center\\\"], [90, \\\"right\\\"] ];  for (a = halign) { translate([140, a[0], 0]) { color(\\\"red\\\") cube([115, 2,0.1]); color(\\\"blue\\\") cube([2, 20,0.1]); linear_extrude(height = 0.5) { text(text = str(text,\\\"_\\\",a[1]), font = font, size = 20, halign = a[1]); } } } 3D text Text can be changed from a 2 dimensional object into a 3D object by using the linear_extrude function. //3d Text Example linear_extrude(4) text(\\\"Text\\\"); 2D to 3D Extrusion Extrusion is the process of creating an object with a fixed cross-sectional profile. OpenSCAD provides two commands to create 3D solids from a 2D shape: linear_extrude() and rotate_extrude(). Linear extrusion is similar to pushing Playdoh through a press with a die of a specific shape. Rotational extrusion is similar to the process of turning or \\\"throwing\\\" a bowl on the Potter's wheel. Both extrusion methods work on a (possibly disjointed) 2D shape which exists on the X-Y plane. While transformations that operates on both 2D shapes and 3D solids can move a shape off the X-Y plane, when the linear_extrude() works like a Playdoh extrusion press rotate_extrude() emulates throwing a vessel extrusion is performed the end result is not very intuitive. What actually happens is that any information in the third coordinate (the Z coordinate) is ignored for any 2D shape, this process amounts to an implicit projection() performed on any 2D shape before the extrusion is executed. It is recommended to perform extrusion on shapes that remains strictly on the X-Y plane. Linear Extrude Linear Extrusion is a operation that takes a 2D object as input and generates a 3D object as a result.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"17b91545-8391-4d40-b65b-5e53d1c9a6f7":{"__data__":"{\"id_\":\"17b91545-8391-4d40-b65b-5e53d1c9a6f7\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"e27904a4-7206-4073-905b-b237f4fa88e6\",\"metadata\":{},\"hash\":\"VpiBs8/7ebRRxG7vYt05uKAIoHyy+BXR+H14+s6OTIM=\"},\"NEXT\":{\"nodeId\":\"a8d7eb56-0948-41ac-9da4-e586395555e9\",\"metadata\":{},\"hash\":\"GahpgSx0wzfypCkSJibQYA0+f3MEjyqhNtXPjsvbj9w=\"}},\"hash\":\"l50cwhAnR8m01ytahtGsfq3RTpibI0uiuGXqF+xmVDw=\",\"text\":\"In OpenSCAD Extrusion is always performed on the projection (shadow) of the 2d object xy plane and along the Z axis; so if you rotate or apply other transformations to the 2d object before extrusion, its shadow shape is what is extruded. Although the extrusion is linear along the Z axis, a twist parameter is available that causes the object to be rotated around the Z axis as it is extruding upward. This can be used to rotate the object at it's center, as if it is a spiral pillar, or produce a helical extrusion around the Z axis, like a pig's tail. A scale parameter is also included so that the object can be expanded or contracted over the extent of the extrusion, allowing extrusions to be flared inward or outward. Usage linear_extrude(height = 5, center = true, convexity = 10, twist = -fanrot, slices = 20, scale = 1.0, $fn = 16) {...} You must use parameter names due to a backward compatibility issue. height must be positive. $fn is optional and specifies the resolution of the linear_extrude (higher number brings more \\\"smoothness\\\", but more computation time is needed). If the extrusion fails for a non-trivial 2D shape, try setting the convexity parameter (the default is not 10, but 10 is a \\\"good\\\" value to try). See explanation further down. Twist Twist is the number of degrees of through which the shape is extruded. Setting the parameter twist = 360 extrudes through one revolution. The twist direction follows the left hand rule. 0° of Twist linear_extrude(height = 10, center = true, convexity = 10, twist = 0) translate([2, 0, 0]) circle(r = 1); -100° of Twist linear_extrude(height = 10, center = true, convexity = 10, twist = -100) translate([2, 0, 0]) circle(r = 1); 100° of Twist linear_extrude(height = 10, center = true, convexity = 10, twist = 100) translate([2, 0, 0])\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"a8d7eb56-0948-41ac-9da4-e586395555e9":{"__data__":"{\"id_\":\"a8d7eb56-0948-41ac-9da4-e586395555e9\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"17b91545-8391-4d40-b65b-5e53d1c9a6f7\",\"metadata\":{},\"hash\":\"l50cwhAnR8m01ytahtGsfq3RTpibI0uiuGXqF+xmVDw=\"},\"NEXT\":{\"nodeId\":\"6ffa686c-1df3-41a0-9281-d6742a9c33d9\",\"metadata\":{},\"hash\":\"59Saer3XS35i6uOhSafTipZdBPF2XYR49IZGBxVa5BM=\"}},\"hash\":\"GahpgSx0wzfypCkSJibQYA0+f3MEjyqhNtXPjsvbj9w=\",\"text\":\"translate([2, 0, 0]) circle(r = 1); -500° of Twist linear_extrude(height = 10, center = true, convexity = 10, twist = -500) translate([2, 0, 0]) circle(r = 1); Center It is similar to the parameter center of cylinders. If center is false the linear extrusion Z range is from 0 to height; if it is true, the range is from -height/2 to height/2. center = true linear_extrude(height = 10, center = true, convexity = 10, twist = -500) translate([2, 0, 0]) circle(r = 1); center = false linear_extrude(height = 10, center = false, convexity = 10, twist = -500) translate([2, 0, 0]) circle(r = 1); Mesh Refinement The slices parameter defines the number of intermediate points along the Z axis of the extrusion. Its default increases with the value of twist. Explicitly setting slices may improve the output refinement. linear_extrude(height = 10, center = false, convexity = 10, twist = 360, slices = 100) translate([2, 0, 0]) circle(r = 1); The special variables $fn, $fs and $fa can also be used to improve the output. If slices is not defined, its value is taken from the defined $fn value. linear_extrude(height = 10, center = false, convexity = 10, twist = 360, $fn = 100) translate([2, 0, 0]) circle(r = 1); Scale Scales the 2D shape by this value over the height of the extrusion. Scale can be a scalar or a vector: linear_extrude(height = 10, center = true, convexity = 10, scale=3) translate([2, 0, 0]) circle(r = 1); linear_extrude(height = 10, center = true, convexity = 10, scale=[1,5], $fn=100) translate([2, 0, 0])\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"6ffa686c-1df3-41a0-9281-d6742a9c33d9":{"__data__":"{\"id_\":\"6ffa686c-1df3-41a0-9281-d6742a9c33d9\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"a8d7eb56-0948-41ac-9da4-e586395555e9\",\"metadata\":{},\"hash\":\"GahpgSx0wzfypCkSJibQYA0+f3MEjyqhNtXPjsvbj9w=\"},\"NEXT\":{\"nodeId\":\"fc4bfaab-1099-457c-8806-55657e59c5c1\",\"metadata\":{},\"hash\":\"YrqSSi7mM5CWwOSnGzcGF3d1ypElsy/NS8bIOwpuM+Q=\"}},\"hash\":\"59Saer3XS35i6uOhSafTipZdBPF2XYR49IZGBxVa5BM=\",\"text\":\"translate([2, 0, 0]) circle(r = 1); Note that if scale is a vector, the resulting side walls may be nonplanar. Use twist=0 and the slices parameter to avoid asymmetry. Right-hand grip rule linear_extrude(height=10, scale=[1,0.1], slices=20, twist=0) polygon(points=[[0,0],[20,10],[20,-10]]); Rotate Extrude Rotational extrusion spins a 2D shape around the Z-axis to form a solid which has rotational symmetry. One way to think of this operation is to imagine a Potter's wheel placed on the X-Y plane with its axis of rotation pointing up towards +Z. Then place the to-be-made object on this virtual Potter's wheel (possibly extending down below the X-Y plane towards -Z). The to-be-made object is the cross-section of the object on the X-Y plane (keeping only the right half, X >= 0). That is the 2D shape that will be fed to rotate_extrude() as the child in order to generate this solid. Note that the object started on the X- Y plane but is tilted up (rotated +90 degrees about the X-axis) to extrude. Since a 2D shape is rendered by OpenSCAD on the X-Y plane, an alternative way to think of this operation is as follows: spins a 2D shape around the Y- axis to form a solid. The resultant solid is placed so that its axis of rotation lies along the Z-axis. Just like the linear_extrude, the extrusion is always performed on the projection of the 2D polygon to the XY plane. Transformations like rotate, translate, etc. applied to the 2D polygon before extrusion modify the projection of the 2D polygon to the XY plane and therefore also modify the appearance of the final 3D object. A translation in Z of the 2D polygon has no effect on the result (as also the projection is not affected). A translation in X increases the diameter of the final object. A translation in Y results in a shift of the final object in Z direction. A rotation about the X or Y axis distorts the cross section of the final object, as also the projection to the XY plane is distorted.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"fc4bfaab-1099-457c-8806-55657e59c5c1":{"__data__":"{\"id_\":\"fc4bfaab-1099-457c-8806-55657e59c5c1\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"6ffa686c-1df3-41a0-9281-d6742a9c33d9\",\"metadata\":{},\"hash\":\"59Saer3XS35i6uOhSafTipZdBPF2XYR49IZGBxVa5BM=\"},\"NEXT\":{\"nodeId\":\"27108161-672f-4bed-8838-617a0c714f5b\",\"metadata\":{},\"hash\":\"EB+wHt7E1DJ7FKFY9oiJyqcDjHU84SZ1n9qewLA41OY=\"}},\"hash\":\"YrqSSi7mM5CWwOSnGzcGF3d1ypElsy/NS8bIOwpuM+Q=\",\"text\":\"Don't get confused, as OpenSCAD renders 2D polygons with a certain height in the Z direction, so the 2D object (with its height) appears to have a bigger projection to the XY plane. But for the projection to the XY plane and also for the later extrusion only the base polygon without height is used. It can not be used to produce a helix or screw threads. The 2D shape must lie completely on either the right (recommended) or the left side of the Y-axis. More precisely speaking, every vertex of the shape must have either x >= 0 or x <= 0. If the shape spans the X axis a warning appears in the console windows and the rotate_extrude() is ignored. If the 2D shape touches the Y axis, i.e. at x=0, it must be a line that touches, not a point, as a point results in a zero thickness 3D object, which is invalid and results in a CGAL error. For OpenSCAD versions prior to 2016.xxxx, if the shape is in the negative axis the resulting faces are oriented inside-out, which may cause undesired effects. Parameters Usage rotate_extrude(angle = 360, convexity = 2) {...} You must use parameter names due to a backward compatibility issue. convexity : If the extrusion fails for a non-trival 2D shape, try setting the convexity parameter (the default is not 10, but 10 is a \\\"good\\\" value to try). See explanation further down. angle [Note: Requires version 2019.05] : Defaults to 360. Specifies the number of degrees to sweep, starting at the positive X axis. The direction of the sweep follows the Right Hand Rule, hence a negative angle sweeps clockwise. $fa : minimum angle (in degrees) of each fragment. $fs : minimum circumferential length of each fragment. $fn : fixed number of fragments in 360 degrees. Values of 3 or more override $fa and $fs $fa, $fs and $fn must be named parameters. click here for more details,. Examples → OpenSCAD - a hook A simple torus can be constructed using a rotational extrude.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"27108161-672f-4bed-8838-617a0c714f5b":{"__data__":"{\"id_\":\"27108161-672f-4bed-8838-617a0c714f5b\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"fc4bfaab-1099-457c-8806-55657e59c5c1\",\"metadata\":{},\"hash\":\"YrqSSi7mM5CWwOSnGzcGF3d1ypElsy/NS8bIOwpuM+Q=\"},\"NEXT\":{\"nodeId\":\"d2851b3b-54c9-42e3-9438-9a9853d05113\",\"metadata\":{},\"hash\":\"sTP9WtgpADLWCSqqYOv7f8zYDj7/wEwINp2MTP3kEmM=\"}},\"hash\":\"EB+wHt7E1DJ7FKFY9oiJyqcDjHU84SZ1n9qewLA41OY=\",\"text\":\"OpenSCAD - a hook A simple torus can be constructed using a rotational extrude. rotate_extrude(convexity = 10) translate([2, 0, 0]) circle(r = 1); Mesh Refinement → Increasing the number of fragments composing the 2D shape improves the quality of the mesh, but takes longer to render. rotate_extrude(convexity = 10) translate([2, 0, 0]) circle(r = 1, $fn = 100); → The number of fragments used by the extrusion can also be increased. rotate_extrude(convexity = 10, $fn = 100) translate([2, 0, 0]) circle(r = 1, $fn = 100); Using the parameter angle (with OpenSCAD versions 2016.xx), a hook can be modeled . translate([0,60,0]) rotate_extrude(angle=270, convexity=10) translate([40, 0]) circle(10); rotate_extrude(angle=90, convexity=10) translate([20, 0]) circle(10); translate([20,0,0]) rotate([90,0,0]) cylinder(r=10,h=80); Extruding a Polygon Extrusion can also be performed on polygons with points chosen by the user. Here is a simple polygon and its 200 step rotational extrusion. (Note it has been rotated 90 degrees to show how the rotation appears; the rotate_extrude() needs it flat). rotate([90,0,0])        polygon( points=[[0,0],[2,1],[1,2],[1,3],[3,4],[0,5]] ); rotate_extrude($fn=200) polygon( points=[[0,0],[2,1],[1,2],[1,3],[3,4],[0,5]] ); →→ For more information on polygons, please see: 2D Primitives: Polygon. Description of extrude parameters Extrude parameters for all extrusion modes convexity Integer. The convexity parameter specifies the maximum number of front sides (or back sides) a ray intersecting the object might penetrate.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d2851b3b-54c9-42e3-9438-9a9853d05113":{"__data__":"{\"id_\":\"d2851b3b-54c9-42e3-9438-9a9853d05113\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"27108161-672f-4bed-8838-617a0c714f5b\",\"metadata\":{},\"hash\":\"EB+wHt7E1DJ7FKFY9oiJyqcDjHU84SZ1n9qewLA41OY=\"},\"NEXT\":{\"nodeId\":\"665b4f78-8032-46c1-9c00-88217e6b91d8\",\"metadata\":{},\"hash\":\"GkESQGvePXyU6dzz/ph8b96MqfCjuDatHu2HEq6WkHU=\"}},\"hash\":\"sTP9WtgpADLWCSqqYOv7f8zYDj7/wEwINp2MTP3kEmM=\",\"text\":\"This parameter is only needed for correctly displaying the object in OpenCSG preview mode and has no effect on the polyhedron rendering. This image shows a 2D shape with a convexity of 2, as the ray indicated in red crosses the 2D shape a maximum of 4 times (2 front sides and 2 back sides). The convexity of a 3D shape would be determined in a similar way. Setting it to 10 should work fine for most cases. Just setting high numbers in general may result in slower preview rendering. Extrude parameters for linear extrusion only height The extrusion height center If true, the solid is centered after extrusion twist The extrusion twist in degrees slices Similar to special variable $fn without being passed down to the child 2D shape. scale Scales the 2D shape by this value over the height of the extrusion. Chapter 4 -- Transform OpenSCAD User Manual/The OpenSCAD Language Basic concept Transformation affect the child nodes and as the name implies transforms them in various ways such as moving/rotating or scaling the child. Cascading transformations are used to apply a variety of transforms to a final child. Cascading is achieved by nesting statements e.g. rotate([45,45,45]) translate([10,20,30]) cube(10); Transformations can be applied to a group of child nodes by using '{' and '}' to enclose the subtree e.g. translate([0,0,-5]) { cube(10); cylinder(r=5,h=10); } Transformations are written before the object they affect. Imagine commands like translate, mirror and scale as verbs. Commands like color are like adjectives that describe the object. Notice that there is no semicolon following transformation command. Advanced concept As OpenSCAD uses different libraries to implement capabilities this can introduce some inconsistencies to the F5 preview behaviour of transformations. Traditional transforms (translate, rotate, scale, mirror & multimatrix) are performed using OpenGL in preview, while other more advanced transforms, such as resize, perform a CGAL operation, behaving like a CSG operation affecting the underlying object, not just transforming it. In particular this can affect\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"665b4f78-8032-46c1-9c00-88217e6b91d8":{"__data__":"{\"id_\":\"665b4f78-8032-46c1-9c00-88217e6b91d8\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"d2851b3b-54c9-42e3-9438-9a9853d05113\",\"metadata\":{},\"hash\":\"sTP9WtgpADLWCSqqYOv7f8zYDj7/wEwINp2MTP3kEmM=\"},\"NEXT\":{\"nodeId\":\"f67401fa-2ca1-4d13-b0a4-4b37e75d9de7\",\"metadata\":{},\"hash\":\"MFDIJCrXJsfZ0hCDq8FVSM6Qi259aeg1xCNVV3ZY6js=\"}},\"hash\":\"GkESQGvePXyU6dzz/ph8b96MqfCjuDatHu2HEq6WkHU=\",\"text\":\"In particular this can affect the display of modifier characters, specifically \\\"#\\\" and \\\"%\\\", where the highlight may not display intuitively, such as highlighting the pre-resized object, but highlighting the post-scaled object. scale Scales its child elements using the specified vector. The argument name is optional. Usage Example: scale(v = [x, y, z]) { ... } cube(10); translate([15,0,0]) scale([0.5,1,2]) cube(10); resize Modifies the size of the child object to match the given x,y, and z. resize() is a CGAL operation, and like others such as render() operates with full geometry, so even in preview this takes time to process. Usage Example: // resize the sphere to extend 30 in x, 60 in y, and 10 in the z directions. resize(newsize=[30,60,10]) sphere(r=10); If x,y, or z is 0 then that dimension is left as-is. // resize the 1x1x1 cube to 2x2x1 resize([2,2,0]) cube(); If the 'auto' parameter is set to true, it auto-scales any 0-dimensions to match. For example. // resize the 1x2x0.5 cube to 7x14x3.5 resize([7,0,0], auto=true) cube([1,2,0.5]); The 'auto' parameter can also be used if you only wish to auto-scale a single dimension, and leave the other as-is. // resize to 10x8x1. Note that the z dimension is left alone. resize([10,0,0], auto=[true,true,false]) cube([5,4,1]); rotate Rotates its child 'a' degrees about the axis of the coordinate system or around an arbitrary axis. The argument names are optional if the arguments are given in the same order as specified. //Usage: rotate(a = deg_a, v = [x, y, z]) { ... } // or rotate(deg_a, [x, y, z]) { ... } rotate(a = [deg_x, deg_y, deg_z]) { ... }\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f67401fa-2ca1-4d13-b0a4-4b37e75d9de7":{"__data__":"{\"id_\":\"f67401fa-2ca1-4d13-b0a4-4b37e75d9de7\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"665b4f78-8032-46c1-9c00-88217e6b91d8\",\"metadata\":{},\"hash\":\"GkESQGvePXyU6dzz/ph8b96MqfCjuDatHu2HEq6WkHU=\"},\"NEXT\":{\"nodeId\":\"0042a987-9d97-4661-aadc-f078f9b5e13a\",\"metadata\":{},\"hash\":\"bIp3J4cBIEniF+vwWjcVQncdhZl1+qefdCJuew2ALW4=\"}},\"hash\":\"MFDIJCrXJsfZ0hCDq8FVSM6Qi259aeg1xCNVV3ZY6js=\",\"text\":\"} rotate(a = [deg_x, deg_y, deg_z]) { ... } rotate([deg_x, deg_y, deg_z]) { ... } The 'a' argument (deg_a) can be an array, as expressed in the later usage above; when deg_a is an array, the 'v' argument is ignored. Where 'a' specifies multiple axes then the rotation is applied in the following order: x, y, z. That means the code: rotate(a=[ax,ay,az]) {...} is equivalent to: rotate(a=[0,0,az]) rotate(a=[0,ay,0]) rotate(a=[ax,0,0]) {...} The optional argument 'v' is a vector and allows you to set an arbitrary axis about which the object is rotated. For example, to flip an object upside-down, you can rotate your object 180 degrees around the 'y' axis. rotate(a=[0,180,0]) { ... } This is frequently simplified to Right-hand grip rule rotate([0,180,0]) { ... } When specifying a single axis the 'v' argument allows you to specify which axis is the basis for rotation. For example, the equivalent to the above, to rotate just around y rotate(a=180, v=[0,1,0]) { ... } When specifying a single axis, 'v' is a vector defining an arbitrary axis for rotation; this is different from the multiple axis above. For example, rotate your object 45 degrees around the axis defined by the vector [1,1,0], rotate(a=45, v=[1,1,0]) { ... } Rotate with a single scalar argument rotates around the Z axis. This is useful in 2D contexts where that is the only axis for rotation. For example: rotate(45) square(10); Rotation rule help For the case of: rotate([a, b, c]) { ... }; \\\"a\\\" is a rotation about the X axis, from the +Y axis, toward the +Z axis. \\\"b\\\" is a rotation about the Y axis, from the +Z axis, toward the +X axis. \\\"c\\\" is a rotation about the Z axis, from the +X axis, toward the +Y axis.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"0042a987-9d97-4661-aadc-f078f9b5e13a":{"__data__":"{\"id_\":\"0042a987-9d97-4661-aadc-f078f9b5e13a\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"f67401fa-2ca1-4d13-b0a4-4b37e75d9de7\",\"metadata\":{},\"hash\":\"MFDIJCrXJsfZ0hCDq8FVSM6Qi259aeg1xCNVV3ZY6js=\"},\"NEXT\":{\"nodeId\":\"48043eb6-c97b-44f6-b399-55e3ed47eaa1\",\"metadata\":{},\"hash\":\"zHkKvnFMNYIdAp7XOND4TFXbjfxlpJTlT8a1++OCPgk=\"}},\"hash\":\"bIp3J4cBIEniF+vwWjcVQncdhZl1+qefdCJuew2ALW4=\",\"text\":\"These are all cases of the Right Hand Rule. Point your right thumb along the positive axis, your fingers show the direction of rotation. Thus if \\\"a\\\" is fixed to zero, and \\\"b\\\" and \\\"c\\\" are manipulated appropriately, this is the spherical coordinate system. So, to construct a cylinder from the origin to some other point (x,y,z): x= 10; y = 10; z = 10; // point coordinates of end of cylinder  length = norm([x,y,z]);  // radial distance b = acos(z/length); // inclination angle c = atan2(y,x);     // azimuthal angle rotate([0, b, c]) cylinder(h=length, r=0.5); %cube([x,y,z]); // corner of cube should coincide with end of cylinder translate Translates (moves) its child elements along the specified vector. The argument name is optional. Example: translate(v = [x, y, z]) { ... } cube(2,center = true); translate([5,0,0]) sphere(1,center = true); mirror Mirrors the child element on a plane through the origin. The argument to mirror() is the normal vector of a plane intersecting the origin through which to mirror the object. Function signature: mirror(v= [x, y, z] ) { ... } Examples The original is on the right side. Note that mirror doesn't make a copy. Like rotate and scale, it changes the object. hand(); // original mirror([1,0,0]) hand(); hand(); // original mirror([1,1,0]) hand(); hand(); // original mirror([1,1,1]) hand(); rotate([0,0,10]) cube([3,2,1]); mirror([1,0,0]) translate([1,0,0]) rotate([0,0,10]) cube([3,2,1]); multmatrix Multiplies the geometry of all child elements with the given affine transformation matrix, where the matrix is 4×3 - a vector of 3 row vectors with 4 elements each, or a 4×4 matrix with the 4th row always forced to [0,0,0,1]. Usage: multmatrix(m = [...])\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"48043eb6-c97b-44f6-b399-55e3ed47eaa1":{"__data__":"{\"id_\":\"48043eb6-c97b-44f6-b399-55e3ed47eaa1\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"0042a987-9d97-4661-aadc-f078f9b5e13a\",\"metadata\":{},\"hash\":\"bIp3J4cBIEniF+vwWjcVQncdhZl1+qefdCJuew2ALW4=\"},\"NEXT\":{\"nodeId\":\"228352a2-1099-4278-aad5-c6dfdfea4283\",\"metadata\":{},\"hash\":\"tAsJrpN0a3u3ZFfu5e0aoNY7mvwgwDEHoGeVexsJcNs=\"}},\"hash\":\"zHkKvnFMNYIdAp7XOND4TFXbjfxlpJTlT8a1++OCPgk=\",\"text\":\"Usage: multmatrix(m = [...]) { ... } This is a breakdown of what you can do with the independent elements in the matrix (for the first three rows): [Scale X][Shear X along Y][Shear X along Z][Translate X] [Shear Y along X][Scale Y][Shear Y along Z][Translate Y] [Shear Z along X][Shear Z along Y] [Scale Z][Translate Z] The fourth row is forced to [0,0,0,1] and can be omitted unless you are combining matrices before passing to multmatrix, as it is not processed in OpenSCAD. Each matrix operates on the points of the given geometry as if each vertex is a 4 element vector consisting of a 3D vector with an implicit 1 as its 4th element, such as v=[x, y, z, 1]. The role of the implicit fourth row of m is to preserve the implicit 1 in the 4th element of the vectors, permitting the translations to work. The operation of multmatrix therefore performs m*v for each vertex v. Any elements (other than the 4th row) not specified in m are treated as zeros. This example rotates by 45 degrees in the XY plane and translates by [10,20,30], i.e. the same as translate([10,20,30]) rotate([0,0,45]) would do. angle=45; multmatrix(m = [ [cos(angle), -sin(angle), 0, 10], [sin(angle),  cos(angle), 0, 20], [         0,           0, 1, 30], [         0,           0, 0,  1] ]) union() { cylinder(r=10.0,h=10,center=false); cube(size=[10,10,10],center=false); } The following example demonstrates combining affine transformation matrices by matrix multiplication, producing in the final version a transformation equivalent to rotate([0, -35, 0]) translate([40, 0, 0]) Obj();. Note that the signs on the sin function appear to be in a different order than the above example,\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"228352a2-1099-4278-aad5-c6dfdfea4283":{"__data__":"{\"id_\":\"228352a2-1099-4278-aad5-c6dfdfea4283\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"48043eb6-c97b-44f6-b399-55e3ed47eaa1\",\"metadata\":{},\"hash\":\"zHkKvnFMNYIdAp7XOND4TFXbjfxlpJTlT8a1++OCPgk=\"},\"NEXT\":{\"nodeId\":\"771fd4aa-f943-449a-8da7-84ed84ab5682\",\"metadata\":{},\"hash\":\"6sdjjkWSb8XYkcv8prdz7yW+Wvg5X8AC5QEcVocBEm4=\"}},\"hash\":\"tAsJrpN0a3u3ZFfu5e0aoNY7mvwgwDEHoGeVexsJcNs=\",\"text\":\"Note that the signs on the sin function appear to be in a different order than the above example, because the positive one must be ordered as x into y, y into z, z into x for the rotation angles to correspond to rotation about the other axis in a right- handed coordinate system. y_ang=-35; mrot_y = [ [ cos(y_ang), 0,  sin(y_ang), 0], [         0,  1,           0, 0], [-sin(y_ang), 0,  cos(y_ang), 0], [         0,  0,           0, 1] ]; mtrans_x = [ [1, 0, 0, 40], [0, 1, 0,  0], [0, 0, 1,  0], [0, 0, 0,  1] ]; module Obj() { cylinder(r=10.0,h=10,center=false); cube(size=[10,10,10],center=false); } echo(mrot_y*mtrans_x); Obj(); multmatrix(mtrans_x) Obj(); multmatrix(mrot_y * mtrans_x) Obj(); This example skews a model, which is not possible with the other transformations. M = [ [ 1  , 0  , 0  , 0   ], [ 0  , 1  , 0.7, 0   ],  // The \\\"0.7\\\" is the skew value; pushed along the y axis as z changes. [ 0  , 0  , 1  , 0   ], [ 0  , 0  , 0  , 1   ] ] ; multmatrix(M) {  union() { cylinder(r=10.0,h=10,center=false); cube(size=[10,10,10],center=false); } } More? Learn more about it here: Affine Transformations on wikipedia http://www.senocular.com/flash/tutorials/transformmatrix/ color Displays the child elements using the specified RGB color + alpha value. This is only used for the F5 preview as CGAL and STL (F6) do not currently support color.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"771fd4aa-f943-449a-8da7-84ed84ab5682":{"__data__":"{\"id_\":\"771fd4aa-f943-449a-8da7-84ed84ab5682\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"228352a2-1099-4278-aad5-c6dfdfea4283\",\"metadata\":{},\"hash\":\"tAsJrpN0a3u3ZFfu5e0aoNY7mvwgwDEHoGeVexsJcNs=\"},\"NEXT\":{\"nodeId\":\"e9eefcc8-08fa-4c6e-960e-2dc6bfb9fb1f\",\"metadata\":{},\"hash\":\"1laCth05byV3HDUVQZMHe9OIUbc8qMyxyiIbeiBuMhM=\"}},\"hash\":\"6sdjjkWSb8XYkcv8prdz7yW+Wvg5X8AC5QEcVocBEm4=\",\"text\":\"support color. The alpha value defaults to 1.0 (opaque) if not specified. Function signature: color( c = [r, g, b, a] ) { ... } color( c = [r, g, b], alpha = 1.0 ) { ... } color( \\\"#hexvalue\\\" ) { ... } color( \\\"colorname\\\", 1.0 ) { ... } Note that the r, g, b, a values are limited to floating point values in the range [0,1] rather than the more traditional integers { 0 ... 255 }. However, nothing prevents you to using R, G, B values from {0 ... 255} with appropriate scaling: color([ R/255, G/255, B/255 ]) { ... } [Note: Requires version 2011.12] Colors can also be defined by name (case insensitive). For example, to create a red sphere, you can write color(\\\"red\\\") sphere(5);. Alpha is specified as an extra parameter for named colors: color(\\\"Blue\\\",0.5) cube(5); A 3-D multicolor sine wave [Note: Requires version 2019.05] Hex values can be given in 4 formats, #rgb, #rgba, #rrggbb and #rrggbbaa. If the alpha value is given in both the hex value and as separate alpha parameter, the alpha parameter takes precedence. The available color names are taken from the World Wide Web consortium's SVG color list. A chart of the color names is as follows, (note that both spellings of grey/gray including slategrey/slategray etc are valid): Purples Lavender Thistle Plum Violet Orchid Fuchsia Magenta MediumOrchid MediumPurple BlueViolet DarkViolet DarkOrchid DarkMagenta Purple Indigo DarkSlateBlue SlateBlue MediumSlateBlue Pinks Pink LightPink HotPink DeepPink MediumVioletRed PaleVioletRed Blues Aqua Cyan LightCyan PaleTurquoise Aquamarine Turquoise MediumTurquoise DarkTurquoise CadetBlue SteelBlue LightSteelBlue PowderBlue LightBlue SkyBlue LightSkyBlue DeepSkyBlue DodgerBlue CornflowerBlue RoyalBlue Blue MediumBlue DarkBlue Navy MidnightBlue Reds IndianRed LightCoral Salmon\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"e9eefcc8-08fa-4c6e-960e-2dc6bfb9fb1f":{"__data__":"{\"id_\":\"e9eefcc8-08fa-4c6e-960e-2dc6bfb9fb1f\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"771fd4aa-f943-449a-8da7-84ed84ab5682\",\"metadata\":{},\"hash\":\"6sdjjkWSb8XYkcv8prdz7yW+Wvg5X8AC5QEcVocBEm4=\"},\"NEXT\":{\"nodeId\":\"3a9bd32b-a228-4e28-b02c-758510262c13\",\"metadata\":{},\"hash\":\"4NJc67LMouKR6T0v80xeIM9pjyLMzSAmeO27CIp8F6E=\"}},\"hash\":\"1laCth05byV3HDUVQZMHe9OIUbc8qMyxyiIbeiBuMhM=\",\"text\":\"DarkSalmon LightSalmon Red Crimson FireBrick DarkRed Greens GreenYellow Chartreuse LawnGreen Lime LimeGreen PaleGreen LightGreen MediumSpringGreen SpringGreen MediumSeaGreen SeaGreen ForestGreen Green DarkGreen YellowGreen OliveDrab Olive DarkOliveGreen MediumAquamarine DarkSeaGreen LightSeaGreen DarkCyan Teal Oranges LightSalmon Coral Tomato OrangeRed DarkOrange Orange Yellows Gold Yellow LightYellow LemonChiffon LightGoldenrodYellow PapayaWhip Moccasin PeachPuff PaleGoldenrod Khaki DarkKhaki Browns Cornsilk BlanchedAlmond Bisque NavajoWhite Wheat BurlyWood Tan RosyBrown SandyBrown Goldenrod DarkGoldenrod Peru Chocolate SaddleBrown Sienna Brown Maroon Whites White Snow Honeydew MintCream Azure AliceBlue GhostWhite WhiteSmoke Seashell Beige OldLace FloralWhite Ivory AntiqueWhite Linen LavenderBlush MistyRose Grays Gainsboro LightGrey Silver DarkGray Gray DimGray LightSlateGray SlateGray DarkSlateGray Black Example Here's a code fragment that draws a wavy multicolor object for(i=[0:36]) { for(j=[0:36]) { color( [0.5+sin(10*i)/2, 0.5+sin(10*j)/2, 0.5+sin(10*(i+j))/2] ) translate( [i, j, 0] ) cube( size = [1, 1, 11+10*cos(10*i)*sin(10*j)] ); } } ↗ Being that -1<=sin(x)<=1 then 0<=(1/2 + sin(x)/2)<=1 , allowing for the RGB components assigned to color to remain within the [0,1] interval. Chart based on \\\"Web Colors\\\" from Wikipedia Example 2 In cases where you want to optionally set a color based on a parameter you can use the following trick: module myModule(withColors=false) { c=withColors?\\\"red\\\":undef; color(c) circle(r=10); } Setting the colorname to undef keeps the default colors. offset [Note: Requires version 2015.03] Offset generates a new 2d interior or exterior outline from an existing outline. There are two modes of operation. radial and offset. The offset method\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"3a9bd32b-a228-4e28-b02c-758510262c13":{"__data__":"{\"id_\":\"3a9bd32b-a228-4e28-b02c-758510262c13\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"e9eefcc8-08fa-4c6e-960e-2dc6bfb9fb1f\",\"metadata\":{},\"hash\":\"1laCth05byV3HDUVQZMHe9OIUbc8qMyxyiIbeiBuMhM=\"},\"NEXT\":{\"nodeId\":\"74daf637-d00d-4c33-a5f1-67d8e883dfff\",\"metadata\":{},\"hash\":\"FpvQoKZ+jHSktVLEqEvUVtoaS2LxZyh+VIrSF7KwSkM=\"}},\"hash\":\"4NJc67LMouKR6T0v80xeIM9pjyLMzSAmeO27CIp8F6E=\",\"text\":\"There are two modes of operation. radial and offset. The offset method creates a new outline whose sides are a fixed distance outer (delta > 0) or inner (delta < 0) from the original outline. The radial method creates a new outline as if a circle of some radius is rotated around the exterior (r>0) or interior (r<0) original outline. The construction methods can either produce an outline that is interior or exterior to the original outline. For exterior outlines the corners can be given an optional chamfer. Offset is useful for making thin walls by subtracting a negative-offset construction from the original, or the original from a Positive offset construction. Offset can be used to simulate some common solid modeling operations: Fillet: offset(r=-3) offset(delta=+3) rounds all inside (concave) corners, and leaves flat walls unchanged. However, holes less than 2*r in diameter vanish. Round: offset(r=+3) offset(delta=-3) rounds all outside (convex) corners, and leaves flat walls unchanged. However, walls less than 2*r thick vanish. Parameters r Double. Amount to offset the polygon. When negative, the polygon is offset inward. R specifies the radius of the circle that is rotated about the outline, either inside or outside. This mode produces rounded corners. delta Double. Amount to offset the polygon. Delta specifies the distance of the new outline from the original outline, and therefore reproduces angled Example 1: Result. A box and a cylinder corners. When negative, the polygon is offset inward. No inward perimeter is generated in places where the perimeter would cross itself. chamfer Boolean. (default false) When using the delta parameter, this flag defines if edges should be chamfered (cut off with a straight line) or not (extended to their intersection). Positive r/delta value Negative r/delta value Result for different parameters. The black polygon is the input for the offset() operation. Examples // Example 1  linear_extrude(height = 60, twist = 90, slices = 60) { difference() { offset(r = 10) { square(20, center = true); } offset(r = 8) {\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"74daf637-d00d-4c33-a5f1-67d8e883dfff":{"__data__":"{\"id_\":\"74daf637-d00d-4c33-a5f1-67d8e883dfff\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"3a9bd32b-a228-4e28-b02c-758510262c13\",\"metadata\":{},\"hash\":\"4NJc67LMouKR6T0v80xeIM9pjyLMzSAmeO27CIp8F6E=\"},\"NEXT\":{\"nodeId\":\"91e35cb7-7b3b-4d2b-bfb2-a1000397c0db\",\"metadata\":{},\"hash\":\"uHufJUJSlLJMXpCGHIqEO4NY45L+EEJfhIId2ecMiiQ=\"}},\"hash\":\"FpvQoKZ+jHSktVLEqEvUVtoaS2LxZyh+VIrSF7KwSkM=\",\"text\":\"square(20, center = true); } offset(r = 8) { square(20, center = true); } } } // Example 2  module fillet(r) { offset(r = -r) { offset(delta = r) { children(); } } } minkowski Displays the minkowski sum of child nodes. Usage example: Say you have a flat box, and you want a rounded edge. There are multiple ways to do this (for example, see hull below), but minkowski is elegant. Take your box, and a cylinder: $fn=50; cube([10,10,1]); cylinder(r=2,h=1); Then, do a minkowski sum of them (note that the outer dimensions of the box are now 10+2+2 = 14 units by 14 units by 2 units high as the heights of the objects are summed): Minkowski sum of the box and cylinder Two cylinders Convex hull of two cylinders Combine two transforms $fn=50; minkowski() { cube([10,10,1]); cylinder(r=2,h=1); } NB: The origin of the second object is used for the addition. If the second object is not centered, then the addition is asymmetric. The following minkowski sums are different: the first expands the original cube by 0.5 units in all directions, both positive and negative. The second expands it by +1 in each positive direction, but doesn't expand in the negative directions. minkowski() { cube([10, 10, 1]); cylinder(1, center=true); } minkowski() { cube([10, 10, 1]); cylinder(1); } Warning: for high values of $fn the minkowski sum may end up consuming lots of CPU and memory, since it has to combine every child node of each element with all the nodes of each other element. So if for example $fn=100 and you combine two cylinders, then it does not just perform 200 operations as with two independent cylinders, but 100*100 = 10000 operations. hull\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"91e35cb7-7b3b-4d2b-bfb2-a1000397c0db":{"__data__":"{\"id_\":\"91e35cb7-7b3b-4d2b-bfb2-a1000397c0db\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"74daf637-d00d-4c33-a5f1-67d8e883dfff\",\"metadata\":{},\"hash\":\"FpvQoKZ+jHSktVLEqEvUVtoaS2LxZyh+VIrSF7KwSkM=\"},\"NEXT\":{\"nodeId\":\"7ee34a0f-da80-4a8e-b7ed-7d622d54a8d2\",\"metadata\":{},\"hash\":\"jk0GmYO9L9YyZ0Yt7FfuBDRj4CWaaBe3c4E2jAfaNbw=\"}},\"hash\":\"uHufJUJSlLJMXpCGHIqEO4NY45L+EEJfhIId2ecMiiQ=\",\"text\":\"as with two independent cylinders, but 100*100 = 10000 operations. hull Displays the convex hull of child nodes. Usage example: hull() { translate([15,10,0]) circle(10); circle(10); } The Hull of 2D objects uses their projections (shadows) on the xy plane, and produces a result on the xy plane. Their Z-height is not used in the operation. Combining transformations When combining transformations, it is a sequential process, but going right-to-left. That is rotate( ... ) translate ( ... ) cube(5) ; would first move the cube, and then move it in an arc (while also rotating it by the same angle) at the radius given by the translation. translate ( ... ) rotate( ... ) cube(5) ; would first rotate the cube and then move it to the offset defined by the translate. color(\\\"red\\\")   translate([0,10,0])  rotate([45,0,0])     cube(5); color(\\\"green\\\") rotate([45,0,0])     translate([0,10,0])  cube(5); Chapter 5 -- Boolean combination OpenSCAD User Manual/The OpenSCAD Language boolean overview 2D examples union ( or ) circle + square difference ( and not ) square - circle difference ( and not ) circle - square intersection ( and ) circle - (circle - square) union()       {square(10);circle(10);} // square or  circle difference()  {square(10);circle(10);} // square and not circle difference()  {circle(10);square(10);} // circle and not square intersection(){square(10);circle(10);} // square and circle 3D examples union ( or ) sphere + cube difference ( and not ) cube - sphere difference ( and not ) sphere - cube intersection ( and ) sphere - (sphere - cube) union()       {cube(12, center=true); sphere(8);} // cube or  sphere difference()  {cube(12, center=true); sphere(8);} // cube and not sphere difference()  {sphere(8); cube(12, center=true);} // sphere and not cube\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"7ee34a0f-da80-4a8e-b7ed-7d622d54a8d2":{"__data__":"{\"id_\":\"7ee34a0f-da80-4a8e-b7ed-7d622d54a8d2\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"91e35cb7-7b3b-4d2b-bfb2-a1000397c0db\",\"metadata\":{},\"hash\":\"uHufJUJSlLJMXpCGHIqEO4NY45L+EEJfhIId2ecMiiQ=\"},\"NEXT\":{\"nodeId\":\"4b7bd1db-9fb9-4c44-9672-1d79321c4524\",\"metadata\":{},\"hash\":\"kocIg44qGdZwXI9CAffKNNt0iTh6A58cqw2RRAgRzbM=\"}},\"hash\":\"jk0GmYO9L9YyZ0Yt7FfuBDRj4CWaaBe3c4E2jAfaNbw=\",\"text\":\"difference()  {sphere(8); cube(12, center=true);} // sphere and not cube intersection(){cube(12, center=true); sphere(8);} // cube and sphere union Creates a union of all its child nodes. This is the sum of all children (logical or). May be used with either 2D or 3D objects, but don't mix them. //Usage example: union() { cylinder (h = 4, r=1, center = true, $fn=100); rotate ([90,0,0]) cylinder (h = 4, r=0.9, center = true, $fn=100); } Remark: union is implicit when not used. But it is mandatory, for example, in difference to group first child nodes into one. Note: It is mandatory for all unions, explicit or implicit, that external faces to be merged not be coincident. Failure to follow this rule results in a design with undefined behavior, and can result in a render which is not manifold (with zero volume portions, or portions inside out), which typically leads to a warning and sometimes removal of a portion of the design from the rendered output. (This can also result in flickering effects during the preview.) This requirement is not a bug, but an intrinsic property of floating point comparisons and the fundamental inability to exactly represent irrational numbers such as those resulting from most rotations. As an example, this is an invalid OpenSCAD program, and will at least lead to a warning on most platforms: // Invalid! size = 10; rotation = 17; union() { rotate([rotation, 0, 0]) cube(size); rotate([rotation, 0, 0]) translate([0, 0, size]) cube([2, 3, 4]); } The solution is to always use a small value called an epsilon when merging adjacent faces like this to guarantee overlap. Note the 0.01 eps value used in TWO locations, so that the external result is equivalent to what was intended: // Correct! size = 10; rotation = 17; eps = 0.01; union() { rotate([rotation, 0, 0]) cube(size); rotate([rotation, 0, 0])\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"4b7bd1db-9fb9-4c44-9672-1d79321c4524":{"__data__":"{\"id_\":\"4b7bd1db-9fb9-4c44-9672-1d79321c4524\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"7ee34a0f-da80-4a8e-b7ed-7d622d54a8d2\",\"metadata\":{},\"hash\":\"jk0GmYO9L9YyZ0Yt7FfuBDRj4CWaaBe3c4E2jAfaNbw=\"},\"NEXT\":{\"nodeId\":\"c325ff09-9f01-439b-b6ab-36061a5abf6e\",\"metadata\":{},\"hash\":\"m3v/6H87nPqytTRG7i/9QN8Fwmj0LpRU/zflOPU2DMM=\"}},\"hash\":\"kocIg44qGdZwXI9CAffKNNt0iTh6A58cqw2RRAgRzbM=\",\"text\":\"cube(size); rotate([rotation, 0, 0]) translate([0, 0, size-eps]) cube([2, 3, 4+eps]); } difference Subtracts the 2nd (and all further) child nodes from the first one (logical and not). May be used with either 2D or 3D objects, but don't mix them. Usage example: difference() { cylinder (h = 4, r=1, center = true, $fn=100); rotate ([90,0,0]) cylinder (h = 4, r=0.9, center = true, $fn=100); } Note: It is mandatory that surfaces that are to be removed by a difference operation have an overlap, and that the negative piece being removed extends fully outside of the volume it is removing that surface from. Failure to follow this rule can cause preview artifacts and can result in non-manifold render warnings or the removal of pieces from the render output. See the description above in union for why this is required and an example of how to do this by this using a small epsilon value. difference with multiple children Note, in the second instance, the result of adding a union of the 1st and 2nd children. // Usage example for difference of multiple children: $fn=90; difference(){ cylinder(r=5,h=20,center=true); rotate([00,140,-45]) color(\\\"LightBlue\\\") cylinder(r=2,h=25,center=true); rotate([00,40,-50])                     cylinder(r=2,h=30,center=true); translate([0,0,-10])rotate([00,40,-50]) cylinder(r=1.4,h=30,center=true); }  // second instance with added union translate([10,10,0]){ difference(){ union(){        // combine 1st and 2nd children cylinder(r=5,h=20,center=true); rotate([00,140,-45]) color(\\\"LightBlue\\\") cylinder(r=2,h=25,center=true); } rotate([00,40,-50])                       cylinder(r=2,h=30,center=true);\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"c325ff09-9f01-439b-b6ab-36061a5abf6e":{"__data__":"{\"id_\":\"c325ff09-9f01-439b-b6ab-36061a5abf6e\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"4b7bd1db-9fb9-4c44-9672-1d79321c4524\",\"metadata\":{},\"hash\":\"kocIg44qGdZwXI9CAffKNNt0iTh6A58cqw2RRAgRzbM=\"},\"NEXT\":{\"nodeId\":\"cf6b0052-4983-4fb3-80a1-5def28d2a66e\",\"metadata\":{},\"hash\":\"uZyxBMUiDSoawjjvsbQIJHHlYi3P6SRB70IKs7nd3p0=\"}},\"hash\":\"m3v/6H87nPqytTRG7i/9QN8Fwmj0LpRU/zflOPU2DMM=\",\"text\":\"rotate([00,40,-50])                       cylinder(r=2,h=30,center=true); translate([0,0,-10])rotate([00,40,-50])   cylinder(r=1.4,h=30,center=true); } } intersection Creates the intersection of all child nodes. This keeps the overlapping portion (logical and). Only the area which is common or shared by all children is retained. May be used with either 2D or 3D objects, but don't mix them. //Usage example: intersection() { cylinder (h = 4, r=1, center = true, $fn=100); rotate ([90,0,0]) cylinder (h = 4, r=0.9, center = true, $fn=100); } render Warning: Using render, always calculates the CSG model for this tree (even in OpenCSG preview mode). This can make previewing very slow and OpenSCAD to appear to hang/freeze. Usage example: render(convexity = 1) { ... } convexity Integer. The convexity parameter specifies the maximum number of front and back sides a ray intersecting the object might penetrate. This parameter is only needed for correctly displaying the object in OpenCSG preview mode and has no effect on the polyhedron rendering. This image shows a 2D shape with a convexity of 4, as the ray indicated in red crosses the 2D shape a maximum of 4 times. The convexity of a 3D shape would be determined in a similar way. Setting it to 10 should work fine for most cases. Chapter 6 -- Other Functions and Operators OpenSCAD User Manual/The OpenSCAD Language Conditional and Iterator Functions For loop Evaluate each value in a range or vector, applying it to the following Action. for(variable = [start : increment : end]) for(variable = [start : end]) for(variable = [vector]) parameters As a range [ start : <increment : > end ] (see section on range) Note: For range, values are separated by colons rather than commas used in vectors. start - initial value increment or step - amount to increase the value, optional, default = 1 end - stop when next value would be past end\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"cf6b0052-4983-4fb3-80a1-5def28d2a66e":{"__data__":"{\"id_\":\"cf6b0052-4983-4fb3-80a1-5def28d2a66e\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"c325ff09-9f01-439b-b6ab-36061a5abf6e\",\"metadata\":{},\"hash\":\"m3v/6H87nPqytTRG7i/9QN8Fwmj0LpRU/zflOPU2DMM=\"},\"NEXT\":{\"nodeId\":\"f7f3507d-4eb6-44e0-901a-2ee46c90516b\",\"metadata\":{},\"hash\":\"yYYA9wE0MhyWl211Gn9O/aI2UcO+gCwUFZI47Flws/Q=\"}},\"hash\":\"uZyxBMUiDSoawjjvsbQIJHHlYi3P6SRB70IKs7nd3p0=\",\"text\":\"end - stop when next value would be past end examples: for (a =[3:5])echo(a);     // 3 4 5 for (a =[3:0]){echo(a);}   // 0 1 2 3         start > end is invalid, deprecated by 2015.3 for (a =[3:0.5:5])echo(a); // 3 3.5 4 4.5 5 for (a =[0:2:5])echo(a);   // 0 2 4           a never equals end for (a =[3:-2:-1])echo(a); // 3 1 -1          negative increment requires 2015.3 be sure end < start As a vector The Action is evaluated for each element of the vector for (a =[3,4,1,5])echo(a); // 3 4 1 5 for (a =[0.3,PI,1,99]){echo(a);}    // 0.3 3.14159 1 99 x1=2; x2=8; x3=5.5; for (a =[x1,x2,x3]){echo(a);} // 2 8 5.5 for (a =[[1,2],6,\\\"s\\\",[[3,4],[5,6]]])echo(a);  // [1,2] 6 \\\"s\\\" [[3,4],[5,6]] The vector can be described elsewhere, like 'for each' in other languages animals = [\\\"elephants\\\", \\\"snakes\\\", \\\"tigers\\\", \\\"giraffes\\\"]; for(animal = animals) echo(str(\\\"I've been to the zoo and saw \\\", animal)); // \\\"I've been to the zoo and saw elephants\\\", for each animal for() is an Operator. Operators require braces {} if more than one Action is within it scope. Actions end in semicolons, Operators do not. for() is not an exception to the rule about variables having only one value within a scope. Each evaluation is given its own scope, allowing any variables to have unique values. No, you still can't do a=a+1;\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f7f3507d-4eb6-44e0-901a-2ee46c90516b":{"__data__":"{\"id_\":\"f7f3507d-4eb6-44e0-901a-2ee46c90516b\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"cf6b0052-4983-4fb3-80a1-5def28d2a66e\",\"metadata\":{},\"hash\":\"uZyxBMUiDSoawjjvsbQIJHHlYi3P6SRB70IKs7nd3p0=\"},\"NEXT\":{\"nodeId\":\"014095b2-6a6e-40f3-9cdd-4b2ca2faaf36\",\"metadata\":{},\"hash\":\"e2jcbMznx8FjFMHAvjj0Lg0EFtNy4krfRoq1dHWrLtY=\"}},\"hash\":\"yYYA9wE0MhyWl211Gn9O/aI2UcO+gCwUFZI47Flws/Q=\",\"text\":\"have unique values. No, you still can't do a=a+1; Remember this is not an iterative language, the for() does not loop in the programmatic sense, it builds a tree of objects one branch for each item in the range/vector, inside each branch the 'variable' is a specific and separate instantiation or scope. Hence: for (i=[0:3]) translate([i*10,0,0]) cube(i+1); Produces: [See Design/Display-CSG-Tree menu] for() loops nested 3 deep example 1 for() loop vector of vectors (rotation) group() { group() { multmatrix([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) { cube(size = [1, 1, 1], center = false); } multmatrix([[1, 0, 0, 10], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) { cube(size = [2, 2, 2], center = false); } multmatrix([[1, 0, 0, 20], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) { cube(size = [3, 3, 3], center = false); } multmatrix([[1, 0, 0, 30], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) { cube(size = [4, 4, 4], center = false); } } } While the group() is built sequentially, all instances of the for() exist as separate entities, they do not iterate one piece of code sequentially. Nested for() While it is reasonable to nest multiple for() statements such as: for(z=[-180:45:+180]) for(x=[10:5:50])\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"014095b2-6a6e-40f3-9cdd-4b2ca2faaf36":{"__data__":"{\"id_\":\"014095b2-6a6e-40f3-9cdd-4b2ca2faaf36\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"f7f3507d-4eb6-44e0-901a-2ee46c90516b\",\"metadata\":{},\"hash\":\"yYYA9wE0MhyWl211Gn9O/aI2UcO+gCwUFZI47Flws/Q=\"},\"NEXT\":{\"nodeId\":\"b1d05a2a-e0fb-4721-ba84-89ad4a6531ea\",\"metadata\":{},\"hash\":\"Sd6mQynEsza22y0YYhHAUNmKrcNqa/zzJLFj5sVYckQ=\"}},\"hash\":\"e2jcbMznx8FjFMHAvjj0Lg0EFtNy4krfRoq1dHWrLtY=\",\"text\":\"for(z=[-180:45:+180]) for(x=[10:5:50]) rotate([0,0,z]) translate([x,0,0]) cube(1); instead, all ranges/vectors can be included in the same for() operator. for ( variable1 = <range or vector> , variable2 = <range or vector> ) <do something using both variables> example for() nested 3 deep  color_vec = [\\\"black\\\",\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"pink\\\",\\\"purple\\\"]; for (x = [-20:10:20] ) for (y = [0:4] )color(color_vec[y]) for (z = [0,4,10] ) {translate([x,y*5-10,z])cube();}  shorthand nesting for same result  color_vec = [\\\"black\\\",\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"pink\\\",\\\"purple\\\"]; for (x = [-20:10:20], y = [0:4], z = [0,4,10] ) translate([x,y*5-10,z]){color(color_vec[y])cube();} Examples using vector of vectors example 1 - iteration over a vector of vectors (rotation)  for(i = [ [  0,  0,   0], [ 10, 20, 300], [200, 40,  57], [ 20, 88,  57] ]) { rotate(i) cube([100, 20, 20], center = true); } example 2 for() loop vector of vectors (translation) example 3 for() loop vector of vectors intersection_for() either intersection() for() or for() intersection() example 2 - iteration over a vector of vectors (translation)  for(i = [ [ 0,  0,  0], [10, 12, 10], [20, 24, 20], [30, 36, 30], [20, 48, 40], [10, 60, 50] ]) { translate(i) cube([50, 15, 10], center = true); } example 3 - iteration over a vector of vectors\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b1d05a2a-e0fb-4721-ba84-89ad4a6531ea":{"__data__":"{\"id_\":\"b1d05a2a-e0fb-4721-ba84-89ad4a6531ea\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"014095b2-6a6e-40f3-9cdd-4b2ca2faaf36\",\"metadata\":{},\"hash\":\"e2jcbMznx8FjFMHAvjj0Lg0EFtNy4krfRoq1dHWrLtY=\"},\"NEXT\":{\"nodeId\":\"e49c1e0c-c0e2-4c3d-989a-90ee384ad962\",\"metadata\":{},\"hash\":\"enSumXBwX9JvcwoqmNJRlRw9IEPT7otslKjMCHduLWM=\"}},\"hash\":\"Sd6mQynEsza22y0YYhHAUNmKrcNqa/zzJLFj5sVYckQ=\",\"text\":\"} example 3 - iteration over a vector of vectors for(i = [ [[ 0,  0,  0], 20], [[10, 12, 10], 50], [[20, 24, 20], 70], [[30, 36, 30], 10], [[20, 48, 40], 30], [[10, 60, 50], 40] ]) { translate([i[0][0], 2*i[0][1], 0]) cube([10, 15, i[1]]); } Intersection For Loop Iterate over the values in a range or vector and create the intersection of objects created by each pass. Besides creating separate instances for each pass, the standard for() also groups all these instances creating an implicit union. intersection_for() is a work around because the implicit union prevents getting the expected results using a combination of the standard for() and intersection() statements. intersection_for() uses the same parameters, and works the same as a For Loop, other than eliminating the implicit union. example 1 - loop over a range: intersection_for(n = [1 : 6]) { rotate([0, 0, n * 60]) { translate([5,0,0]) sphere(r=12); } } example 2 - rotation : intersection_for(i = [ [  0,  0,   0], [ 10, 20, 300], [200, 40,  57], [ 20, 88,  57] ]) { rotate(i) cube([100, 20, 20], center = true); } If Statement Performs a test to determine if the actions in a sub scope should be performed or not. REALLY IMPORTANT. You can't change the value of Variables. If you update the value of a variable inside brackets, the new value will be lost as soon as you exit that scope. if (test) scope1 if (test){scope1} if (test) scope1  else  scope2 if (test){scope1} else {scope2} Parameters intersection_for() intersection() for()\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"e49c1e0c-c0e2-4c3d-989a-90ee384ad962":{"__data__":"{\"id_\":\"e49c1e0c-c0e2-4c3d-989a-90ee384ad962\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"b1d05a2a-e0fb-4721-ba84-89ad4a6531ea\",\"metadata\":{},\"hash\":\"Sd6mQynEsza22y0YYhHAUNmKrcNqa/zzJLFj5sVYckQ=\"},\"NEXT\":{\"nodeId\":\"d70376dd-7697-4515-9fc2-fef3c636562f\",\"metadata\":{},\"hash\":\"WtS7krIAvlfBFFqzi7FwZpXtdSkxhp+b/BcLmChAuVs=\"}},\"hash\":\"enSumXBwX9JvcwoqmNJRlRw9IEPT7otslKjMCHduLWM=\",\"text\":\"Parameters intersection_for() intersection() for() test: Usually a boolean expression, but can be any value or variable. See here for true or false state of values. See here for boolean and logical operators Do not confuse the assignment operator '=' with the equal operator '==' scope1: one or more actions to take when test is true. scope2: one or more actions to take when test is false. if (b==a)  cube(4); if (b<a)  {cube(4); cylinder(6);} if (b&&a) {cube(4); cylinder(6);} if (b!=a)  cube(4); else cylinder(3); if (b)    {cube(4); cylinder(6);} else {cylinder(10,5,5);} if (!true){cube(4); cylinder(6);} else  cylinder(10,5,5); if (x>y)   cube(1, center=false); else {cube(size = 2, center = true);} if (a==4) {}                      else  echo(\\\"a is not 4\\\"); if ((b<5)&&(a>8))  {cube(4);}     else {cylinder(3);} if (b<5&&a>8)       cube(4);      else  cylinder(3); Since 2015.03 variables can now be assigned in any scope. Note that assignments are only valid within the scope in which they are defined - you are still not allowed to leak values to an outer scope. See Scope of variables for more details. Nested if The scopes of both the if() portion and the else portion, can in turn contain if() statements. This nesting can be to many depths. if (test1) { scope1 if (test2) {scope2.1} else {scope2.2} } else { scope2 if (test3) {scope3.1} else {scope3.2} } When scope1 and scope2 contain only the if() statement, the outer sets of braces can be removed. if (test1) if (test2) {scope2.1} else {scope2.2} else if (test3) {scope3.1}\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d70376dd-7697-4515-9fc2-fef3c636562f":{"__data__":"{\"id_\":\"d70376dd-7697-4515-9fc2-fef3c636562f\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"e49c1e0c-c0e2-4c3d-989a-90ee384ad962\",\"metadata\":{},\"hash\":\"enSumXBwX9JvcwoqmNJRlRw9IEPT7otslKjMCHduLWM=\"},\"NEXT\":{\"nodeId\":\"91c293ae-1718-4295-b167-f0563b48e98b\",\"metadata\":{},\"hash\":\"g/YEaBpk9TaU7w9FGPLfrEIOCg/W+JP5rQjoRYHi9/0=\"}},\"hash\":\"WtS7krIAvlfBFFqzi7FwZpXtdSkxhp+b/BcLmChAuVs=\",\"text\":\"else if (test3) {scope3.1} else {scope3.2} One evolution is this: else if if(test1) {scope1} else if(test2) {scope2} else if(test3) {scope3} else if(test4) {scope4} else           {scope5} Note that else and if are two separate words. When working down the chain of tests, the first true uses its scope. All further tests are skipped. example if((k<8)&&(m>1)) cube(10); else if(y==6)   {sphere(6);cube(10);} else if(y==7)    color(\\\"blue\\\")sphere(5); else if(k+m!=8) {cylinder(15,5,0);sphere(8);} else             color(\\\"green\\\"){cylinder(12,5,0);sphere(8);} Conditional ? : A function that uses a test to determine which of 2 values to return. a =   test ? TrueValue : FalseValue ; echo( test ? TrueValue : FalseValue ); Parameters test: Usually a boolean expression, but can be any value or variable. See here for true or false state of values. See here for boolean and logical operators Do not confuse assignment '=' with equal '==' TrueValue: the value to return when test is true. FalseValue: the value to return when test is false. A value in OpenSCAD is either a Number (like 42), a Boolean (like true), a String (like \\\"foo\\\"), a Vector (like [1,2,3]), or the Undefined value (undef). Values can be stored in variables, passed as function arguments, and returned as function results. This works like the ?: operator from the family of C-like programming languages. Examples a=1; b=2; c= a==b ? 4 : 5 ;                  //  5 a=1; b=2; c= a==b ? \\\"a==b\\\" : \\\"a!=b\\\" ;        //  \\\"a!=b\\\"  TrueValue = true; FalseValue = false; a=5; test = a==1; echo( test ? TrueValue : FalseValue );       // false\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"91c293ae-1718-4295-b167-f0563b48e98b":{"__data__":"{\"id_\":\"91c293ae-1718-4295-b167-f0563b48e98b\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"d70376dd-7697-4515-9fc2-fef3c636562f\",\"metadata\":{},\"hash\":\"WtS7krIAvlfBFFqzi7FwZpXtdSkxhp+b/BcLmChAuVs=\"},\"NEXT\":{\"nodeId\":\"3714a845-3da3-43a5-bc98-cab5079dd681\",\"metadata\":{},\"hash\":\"l8NVOR12jzh/0z4vMOXz09oIqTcHdDjB81pJa/eQnew=\"}},\"hash\":\"g/YEaBpk9TaU7w9FGPLfrEIOCg/W+JP5rQjoRYHi9/0=\",\"text\":\"echo( test ? TrueValue : FalseValue );       // false  L = 75; R = 2; test = (L/R)>25; TrueValue =  [test,L,R,L/R,cos(30)]; FalseValue = [test,L,R,sin(15)]; a1 = test ? TrueValue : FalseValue ;         // [true, 75, 2, 37.5, 0.866025] Some forms of tail-recursion elimination are supported. Recursive function calls Recursive function calls are supported. Using the Conditional \\\"... ? ... : ... \\\" it's possible to ensure the recursion is terminated. Note: There is a built-in recursion limit to prevent an application crash. If the limit is hit, the function returns undef. example // recursion - find the sum of the values in a vector (array) by calling itself // from the start (or s'th element) to the i'th element - remember elements are zero based function sumv(v, i, s = 0) = (i == s ? v[i] : v[i] + sumv(v, i-1, s));  vec=[ 10, 20, 30, 40 ]; echo(\\\"sum vec=\\\", sumv(vec, 2, 1)); // calculates 20+30=50 Formatting complex usage Multiple nested conditionals can become difficult to understand. Formatting them like multi-line indented \\\"if/else\\\" statements is clearer. // find the maximum value in a vector function maxv(v, m=-999999999999, i=0) = (i == len(v) ) ? m :     (m > v[i]) ? maxv(v, m, i+1) :    maxv(v, v[i], i+1); v=[7,3,9,3,5,6]; echo(\\\"max\\\",maxv(v));   // ECHO: \\\"max\\\", 9 Assign Statement [Deprecated: assign() will be removed in future releases. Variables can now be assigned anywhere. If you prefer this way of setting values, the new Let Statement can be used instead.] Set variables to a new value for a sub-tree. Parameters The variables that should be (re-)assigned example:\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"3714a845-3da3-43a5-bc98-cab5079dd681":{"__data__":"{\"id_\":\"3714a845-3da3-43a5-bc98-cab5079dd681\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"91c293ae-1718-4295-b167-f0563b48e98b\",\"metadata\":{},\"hash\":\"g/YEaBpk9TaU7w9FGPLfrEIOCg/W+JP5rQjoRYHi9/0=\"},\"NEXT\":{\"nodeId\":\"6daa334d-91c2-4561-8278-64fa8b9cbe5d\",\"metadata\":{},\"hash\":\"9GLLz1VelcFN+UGGcRUtIKd+qQSh+TGtBrY7U7R0Yk0=\"}},\"hash\":\"l8NVOR12jzh/0z4vMOXz09oIqTcHdDjB81pJa/eQnew=\",\"text\":\"Parameters The variables that should be (re-)assigned example: for (i = [10:50]) { assign (angle = i*360/20, distance = i*10, r = i*2) { rotate(angle, [1, 0, 0]) translate([0, distance, 0]) sphere(r = r); } } for (i = [10:50]) { angle = i*360/20; distance = i*10; r = i*2; rotate(angle, [1, 0, 0]) translate([0, distance, 0]) sphere(r = r); } Let Statement [Note: Requires version 2019.05] Set variables to a new value for a sub-tree. The parameters are evaluated sequentially and may depend on each other (as opposed to the deprecated assign() statement). Parameters The variables that should be set example: for (i = [10:50]) { let (angle = i*360/20, r= i*2, distance = r*5) { rotate(angle, [1, 0, 0]) translate([0, distance, 0]) sphere(r = r); } } Mathematical Operators Scalar Arithmetical Operators The scalar arithmetical operators take numbers as operands and produce a new number. + add - subtract * multiply / divide % modulo ^ exponent [Note: Requires version 2021.01] The \\\"-\\\" can also be used as prefix operator to negate a number. Relational Operators Relational operators produce a Boolean result from two operands. < less than <= less or equal == equal != not equal >= greater or equal > greater than If both operands are simple numbers, the meaning is self-evident. If both operands are strings, alphabetical sorting determines equality and order. E.g., \\\"ab\\\" > \\\"aa\\\" > \\\"a\\\". If both operands are Booleans, true > false. In an inequality comparison between a Boolean and a number true is treated as 1 and false is treated as 0. Other inequality tests involving Booleans return false. If both operands are vectors, an equality test returns true when the vectors are identical and false otherwise. Inequality tests involving one or two vectors\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"6daa334d-91c2-4561-8278-64fa8b9cbe5d":{"__data__":"{\"id_\":\"6daa334d-91c2-4561-8278-64fa8b9cbe5d\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"3714a845-3da3-43a5-bc98-cab5079dd681\",\"metadata\":{},\"hash\":\"l8NVOR12jzh/0z4vMOXz09oIqTcHdDjB81pJa/eQnew=\"},\"NEXT\":{\"nodeId\":\"6dbf8253-a603-435e-b62a-a7181c5cca76\",\"metadata\":{},\"hash\":\"TNPWgF4J2rnQsfsdXlWiVXmYh99Z8BVgjLCDY6yq/rs=\"}},\"hash\":\"9GLLz1VelcFN+UGGcRUtIKd+qQSh+TGtBrY7U7R0Yk0=\",\"text\":\"Inequality tests involving one or two vectors always return false, so for example [1] < [2] is false. Dissimilar types always test as unequal with '==' and '!='. Inequality comparisons between dissimilar types, except for Boolean and numbers as noted above, always result in false. Note that [1] and 1 are different types so [1] == 1 is false. undef doesn't equal anything but undef. Inequality comparisons involving undef result in false. nan doesn't equal anything (not even itself) and inequality tests all produce false. See Numbers. Logical Operators All logical operators take Booleans as operands and produce a Boolean. Non-Boolean quantities are converted to Booleans before the operator is evaluated. && logical AND || logical OR ! logical unary NOT Since [false] is true, false || [false] is also true. Note that how logical operators deal with vectors is different than relational operators: [1, 1] > [0, 2] is false, but [false, false] && [false, false] is true. Conditional Operator The ?: operator can be used to conditionally evaluate one or another expression. It works like the ?: operator from the family of C-like programming languages. ? : Conditional operator Usage Example: a=1; b=2; c= a==b ? 4 : 5; If a equals b, then c is set to 4, else c is set to 5. The part \\\"a==b\\\" must be something that evaluates to a boolean value. Vector-Number Operators The vector-number operators take a vector and a number as operands and produce a new vector. * multiply all vector elements by number / divide all vector elements by number Example L = [1, [2, [3, \\\"a\\\"] ] ]; echo(5*L); // ECHO: [5, [10, [15, undef]]] Vector Operators The vector operators take vectors as operands and produce a new vector. + add element-wise - subtract element-wise The \\\"-\\\" can also be used as prefix operator to element-wise negate a vector. Example L1 = [1, [2, [3, \\\"a\\\"] ] ]; L2 = [1, [2, 3] ];\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"6dbf8253-a603-435e-b62a-a7181c5cca76":{"__data__":"{\"id_\":\"6dbf8253-a603-435e-b62a-a7181c5cca76\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"6daa334d-91c2-4561-8278-64fa8b9cbe5d\",\"metadata\":{},\"hash\":\"9GLLz1VelcFN+UGGcRUtIKd+qQSh+TGtBrY7U7R0Yk0=\"},\"NEXT\":{\"nodeId\":\"1d775cb0-d859-4649-9968-a4a791b378f8\",\"metadata\":{},\"hash\":\"zRtoeTCUZUhHz+MdY1lHmKn7d6687CHjAhVM/mq4sPU=\"}},\"hash\":\"TNPWgF4J2rnQsfsdXlWiVXmYh99Z8BVgjLCDY6yq/rs=\",\"text\":\"L2 = [1, [2, 3] ]; echo(L1+L1); // ECHO: [2, [4, [6, undef]]] echo(L1+L2); // ECHO: [2, [4, undef]] Vector Dot-Product Operator If both operands of multiplication are simple vectors, the result is a number according to the linear algebra rule for dot product. c = u*v; results in . If the operands' sizes don't match, the result is undef. Matrix Multiplication If one or both operands of multiplication are matrices, the result is a simple vector or matrix according to the linear algebra rules for matrix product. In the following, A, B, C... are matrices, u, v, w... are vectors. Subscripts i, j denote element indices. For A a matrix of size n × m and B a matrix of size m × p, their product C = A*B; is a matrix of size n × p with elements . C = B*A; results in undef unless n = p. For A a matrix of size n × m and v a vector of size m, their product u = A*v; is a vector of size n with elements . In linear algebra, this is the product of a matrix and a column vector. For v a vector of size n and A a matrix of size n × m, their product u = v*A; is a vector of size m with elements . In linear algebra, this is the product of a row vector and a matrix. Matrix multiplication is not commutative: , . OpenSCAD Cos Function​ OpenSCAD Sin Function Mathematical Functions Trigonometric Functions The trig functions use the C Language mathematics functions, which are based in turn on Binary Floating Point mathematics, which use approximations of Real Numbers during calculation. OpenSCAD's math functions use the C++ 'double' type, inside Value.h/Value.cc, A good resource for the specifics of the C library math functions, such as valid inputs/output ranges, can be found at the Open Group website math.h & acos cos Mathematical cosine function of degrees. See Cosine Parameters <degrees> Decimal. Angle in degrees. Usage Example: for(i=[0:36])\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1d775cb0-d859-4649-9968-a4a791b378f8":{"__data__":"{\"id_\":\"1d775cb0-d859-4649-9968-a4a791b378f8\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"6dbf8253-a603-435e-b62a-a7181c5cca76\",\"metadata\":{},\"hash\":\"TNPWgF4J2rnQsfsdXlWiVXmYh99Z8BVgjLCDY6yq/rs=\"},\"NEXT\":{\"nodeId\":\"db841ea4-c7c6-458c-a337-8b418fdb3787\",\"metadata\":{},\"hash\":\"Lx7Z+4jhuVbl0VWell779sZSewrHzlL7cY+VjqlBk2M=\"}},\"hash\":\"zRtoeTCUZUhHz+MdY1lHmKn7d6687CHjAhVM/mq4sPU=\",\"text\":\"Decimal. Angle in degrees. Usage Example: for(i=[0:36]) translate([i*10,0,0]) cylinder(r=5,h=cos(i*10)*50+60); sin Mathematical sine function. See Sine Parameters <degrees> Decimal. Angle in degrees. Usage example 1: for (i = [0:5]) { echo(360*i/6, sin(360*i/6)*80, cos(360*i/6)*80); translate([sin(360*i/6)*80, cos(360*i/6)*80, 0 ]) cylinder(h = 200, r=10); } Usage example 2: for(i=[0:36]) translate([i*10,0,0]) cylinder(r=5,h=sin(i*10)*50+60); tan Mathematical tangent function. See Tangent Parameters <degrees> Decimal. Angle in degrees. Usage example: for (i = [0:5]) { echo(360*i/6, tan(360*i/6)*80); translate([tan(360*i/6)*80, 0, 0 ]) cylinder(h = 200, r=10); } acos Mathematical arccosine, or inverse cosine, expressed in degrees. See: Inverse trigonometric functions asin Mathematical arcsine, or inverse sine, expressed in degrees. See: Inverse trigonometric functions atan Mathematical arctangent, or inverse tangent, function. Returns the principal value of the arc tangent of x, expressed in degrees. See: Inverse trigonometric functions atan2 Mathematical two-argument atan function atan2(y,x) that spans the full 360 degrees. This function returns the full angle (0-360) made between the x axis and the vector(x,y) expressed in degrees. atan can not distinguish between y/x and -y/-x and returns angles from -90 to +90 See: atan2 Usage examples: atan2(5.0,-5.0);     //result: 135 degrees. atan() would give -45\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"db841ea4-c7c6-458c-a337-8b418fdb3787":{"__data__":"{\"id_\":\"db841ea4-c7c6-458c-a337-8b418fdb3787\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"1d775cb0-d859-4649-9968-a4a791b378f8\",\"metadata\":{},\"hash\":\"zRtoeTCUZUhHz+MdY1lHmKn7d6687CHjAhVM/mq4sPU=\"},\"NEXT\":{\"nodeId\":\"6fa7c19c-025f-4a41-bd7c-2f4d506b3df4\",\"metadata\":{},\"hash\":\"SnR3y7tgFd4ACvwyLXI11PRSs9gofYYRHH+FbUCppx0=\"}},\"hash\":\"Lx7Z+4jhuVbl0VWell779sZSewrHzlL7cY+VjqlBk2M=\",\"text\":\"atan() would give -45 atan2(y,x);          //angle between (1,0) and (x,y) = angle around z-axis Other Mathematical Functions abs Mathematical absolute value function. Returns the positive value of a signed decimal number. Usage examples: abs(-5.0);  returns 5.0 abs(0);     returns 0.0 abs(8.0);   returns 8.0 ceil Mathematical ceiling function. Returns the next highest integer value by rounding up value if necessary. See: Ceil Function echo(ceil(4.4),ceil(-4.4));     // produces ECHO: 5, -4 concat [Note: Requires version 2015.03] Return a new vector that is the result of appending the elements of the supplied vectors. Where an argument is a vector the elements of the vector are individually appended to the result vector. Strings are distinct from vectors in this case. Usage examples: echo(concat(\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\",\\\"e\\\",\\\"f\\\"));          // produces ECHO: [\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\", \\\"f\\\"] echo(concat([\\\"a\\\",\\\"b\\\",\\\"c\\\"],[\\\"d\\\",\\\"e\\\",\\\"f\\\"]));      // produces ECHO: [\\\"a\\\", \\\"b\\\", \\\"c\\\", \\\"d\\\", \\\"e\\\", \\\"f\\\"] echo(concat(1,2,3,4,5,6));                      // produces ECHO: [1, 2, 3, 4, 5, 6] Vector of vectors echo(concat([ [1],[2] ], [ [3] ]));             // produces ECHO: [[1], [2], [3]] Note: All vectors passed to the function lose one nesting level. When adding something like a single element [x, y, z] tuples (which are vectors, too), the tuple needs to be enclosed in a vector (i.e. an extra set of brackets) before the concatenation. in the exmple below, a fourth point is added to the polygon path, which used to resemble a triangle, making it a square now: polygon(concat([[0,0],[0,5],[5,5]], [[5,0]])); Contrast with strings\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"6fa7c19c-025f-4a41-bd7c-2f4d506b3df4":{"__data__":"{\"id_\":\"6fa7c19c-025f-4a41-bd7c-2f4d506b3df4\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"db841ea4-c7c6-458c-a337-8b418fdb3787\",\"metadata\":{},\"hash\":\"Lx7Z+4jhuVbl0VWell779sZSewrHzlL7cY+VjqlBk2M=\"},\"NEXT\":{\"nodeId\":\"e5141ef4-5676-4fe5-a069-4cdda5272cc1\",\"metadata\":{},\"hash\":\"36stVRBql/RLZtga3weq0SXv//f0XSfOb+tkUxx+qPs=\"}},\"hash\":\"SnR3y7tgFd4ACvwyLXI11PRSs9gofYYRHH+FbUCppx0=\",\"text\":\"Contrast with strings echo(concat([1,2,3],[4,5,6]));                   // produces ECHO: [1, 2, 3, 4, 5, 6] echo(concat(\\\"abc\\\",\\\"def\\\"));                       // produces ECHO: [\\\"abc\\\", \\\"def\\\"] echo(str(\\\"abc\\\",\\\"def\\\"));                          // produces ECHO: \\\"abcdef\\\" cross Calculates the cross product of two vectors in 3D or 2D space. If both vectors are in the 3D, the result is a vector that is perpendicular to both of the input vectors. If both vectors are in 2D space, their cross product has the form [0,0,z] and the cross function returns just the z value of the cross product: cross([x,y], [u,v]) = x*v - y*u Note that this is the determinant of the 2x2 matrix [[x,y],[u,v]]. Using any other types, vectors with lengths different from 2 or 3, or vectors not of the same length produces 'undef'. Usage examples: echo(cross([2, 3, 4], [5, 6, 7]));     // produces ECHO: [-3, 6, -3] echo(cross([2, 1, -3], [0, 4, 5]));    // produces ECHO: [17, -10, 8] echo(cross([2, 1], [0, 4]));           // produces ECHO: 8 echo(cross([1, -3], [4, 5]));          // produces ECHO: 17 echo(cross([2, 1, -3], [4, 5]));       // produces ECHO: undef echo(cross([2, 3, 4], \\\"5\\\"));           // produces ECHO: undef For any two vectors a and b in 2D or in 3D, the following holds: cross(a,b) == -cross(b,a) exp Mathematical exp function. Returns the base-e exponential function of x, which is the number e raised to the power x. See: Exponent echo(exp(1),exp(ln(3)*4));    // produces ECHO: 2.71828, 81 floor Mathematical floor function.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"e5141ef4-5676-4fe5-a069-4cdda5272cc1":{"__data__":"{\"id_\":\"e5141ef4-5676-4fe5-a069-4cdda5272cc1\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"6fa7c19c-025f-4a41-bd7c-2f4d506b3df4\",\"metadata\":{},\"hash\":\"SnR3y7tgFd4ACvwyLXI11PRSs9gofYYRHH+FbUCppx0=\"},\"NEXT\":{\"nodeId\":\"4164d166-97d2-4575-8944-6e8eb6cbfb58\",\"metadata\":{},\"hash\":\"BzVQl1mhCfqIGSLf3/q3dQc1k8Vm9hGkSdRaBPJukcM=\"}},\"hash\":\"36stVRBql/RLZtga3weq0SXv//f0XSfOb+tkUxx+qPs=\",\"text\":\"floor Mathematical floor function. floor(x) = is the largest integer not greater than x See: Floor Function echo(floor(4.4),floor(-4.4));    // produces ECHO: 4, -5 ln Mathematical natural logarithm. See: Natural logarithm len Mathematical length function. Returns the length of an array, a vector or a string parameter. Usage examples: str1=\\\"abcdef\\\"; len_str1=len(str1); echo(str1,len_str1); a=6; len_a=len(a); echo(a,len_a); array1=[1,2,3,4,5,6,7,8]; len_array1=len(array1); echo(array1,len_array1); array2=[[0,0],[0,1],[1,0],[1,1]]; len_array2=len(array2); echo(array2,len_array2); len_array2_2=len(array2[2]); echo(array2[2],len_array2_2); Results: ECHO: \\\"abcdef\\\", 6 ECHO: 6, undef ECHO: [1, 2, 3, 4, 5, 6, 7, 8], 8 ECHO: [[0, 0], [0, 1], [1, 0], [1, 1]], 4 ECHO: [1, 0], 2 This function allows (e.g.) the parsing of an array, a vector or a string. Usage examples: str2=\\\"4711\\\"; for (i=[0:len(str2)-1]) echo(str(\\\"digit \\\",i+1,\\\"  :  \\\",str2[i])); Results: ECHO: \\\"digit 1  :  4\\\" ECHO: \\\"digit 2  :  7\\\" ECHO: \\\"digit 3  :  1\\\" ECHO: \\\"digit 4  :  1\\\" Note that the len() function is not defined when a simple variable is passed as the parameter. This is useful when handling parameters to a module, similar to how shapes can be defined as a single number, or as an [x,y,z] vector; i.e. cube(5) or cube([5,5,5])\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"4164d166-97d2-4575-8944-6e8eb6cbfb58":{"__data__":"{\"id_\":\"4164d166-97d2-4575-8944-6e8eb6cbfb58\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"e5141ef4-5676-4fe5-a069-4cdda5272cc1\",\"metadata\":{},\"hash\":\"36stVRBql/RLZtga3weq0SXv//f0XSfOb+tkUxx+qPs=\"},\"NEXT\":{\"nodeId\":\"33066aad-2b20-44d1-ac61-7e5490b0438b\",\"metadata\":{},\"hash\":\"gb16W4xgeTrcBi/fDxVRr8GUJ5dC+F75cXH//WI8lu8=\"}},\"hash\":\"BzVQl1mhCfqIGSLf3/q3dQc1k8Vm9hGkSdRaBPJukcM=\",\"text\":\"cube(5) or cube([5,5,5]) For example module doIt(size) { if (len(size) == undef) { // size is a number, use it for x,y & z. (or could be undef) do([size,size,size]); } else { // size is a vector, (could be a string but that would be stupid) do(size); } }  doIt(5);    // equivalent to [5,5,5] doIt([5,5,5]);    // similar to cube(5) v's cube([5,5,5]) let [Note: Requires version 2015.03] Sequential assignment of variables inside an expression. The following expression is evaluated in context of the let assignments and can use the variables. This is mainly useful to make complicated expressions more readable by assigning interim results to variables. Parameters let (var1 = value1, var2 = f(var1), var3 = g(var1, var2)) expression Usage Example: echo(let(a = 135, s = sin(a), c = cos(a)) [ s, c ]); // ECHO: [0.707107, -0.707107] log Mathematical logarithm to the base 10. Example: log(1000) = 3. See: Logarithm lookup Look up value in table, and linearly interpolate if there's no exact match. The first argument is the value to look up. The second is the lookup table -- a vector of key-value pairs. Parameters key A lookup key OpenSCAD Lookup Function <key,value> array keys and values Notes There is a bug in which out-of-range keys return the first value in the list. Newer versions of Openscad should use the top or bottom end of the table as appropriate instead. Usage example: Create a 3D chart made from cylinders of different heights. function get_cylinder_h(p) = lookup(p, [ [ -200, 5 ], [ -50, 20 ], [ -20, 18 ], [ +80, 25 ], [ +150, 2 ] ]);  for (i = [-100:5:+100]) {\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"33066aad-2b20-44d1-ac61-7e5490b0438b":{"__data__":"{\"id_\":\"33066aad-2b20-44d1-ac61-7e5490b0438b\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"4164d166-97d2-4575-8944-6e8eb6cbfb58\",\"metadata\":{},\"hash\":\"BzVQl1mhCfqIGSLf3/q3dQc1k8Vm9hGkSdRaBPJukcM=\"},\"NEXT\":{\"nodeId\":\"4d2fe101-9efe-49e4-9353-f1046d96af06\",\"metadata\":{},\"hash\":\"Iad96n2tFDAG6HTUaBnUM65uu4WEo7SgnzIaLGJxLmg=\"}},\"hash\":\"gb16W4xgeTrcBi/fDxVRr8GUJ5dC+F75cXH//WI8lu8=\",\"text\":\"]);  for (i = [-100:5:+100]) { // echo(i, get_cylinder_h(i)); translate([ i, 0, -30 ]) cylinder(r1 = 6, r2 = 2, h = get_cylinder_h(i)*3); } max Returns the maximum of the parameters. If a single vector is given as parameter, returns the maximum element of that vector. Parameters max(n,n{,n}...) max(vector) <n> Two or more decimals <vector> Single vector of decimals [Note: Requires version 2014.06]. Usage Example: max(3.0,5.0) max(8.0,3.0,4.0,5.0) max([8,3,4,5]) Results: 5 8 8 min Returns the minimum of the parameters. If a single vector is given as parameter, returns the minimum element of that vector. Parameters min(n,n{,n}...) min(vector) <n> Two or more decimals <vector> Single vector of decimals [Note: Requires version 2014.06]. Usage Example: min(3.0,5.0) min(8.0,3.0,4.0,5.0) min([8,3,4,5]) Results: 3 3 3 Looking for mod - it's not a function, see modulo operator (%) norm Returns the euclidean norm of a vector. Note this returns the actual numeric length while len returns the number of elements in the vector or array. Usage examples: a=[1,2,3,4]; b=\\\"abcd\\\"; c=[]; d=\\\"\\\"; e=[[1,2,3,4],[1,2,3],[1,2],[1]]; echo(norm(a)); //5.47723 echo(norm(b)); //undef echo(norm(c)); //0 echo(norm(d)); //undef echo(norm(e[0])); //5.47723 echo(norm(e[1])); //3.74166 echo(norm(e[2])); //2.23607 echo(norm(e[3])); //1 Results: ECHO: 5.47723 ECHO: undef ECHO: 0\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"4d2fe101-9efe-49e4-9353-f1046d96af06":{"__data__":"{\"id_\":\"4d2fe101-9efe-49e4-9353-f1046d96af06\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"33066aad-2b20-44d1-ac61-7e5490b0438b\",\"metadata\":{},\"hash\":\"gb16W4xgeTrcBi/fDxVRr8GUJ5dC+F75cXH//WI8lu8=\"},\"NEXT\":{\"nodeId\":\"c037dfa6-e17c-42c0-b7df-53eb7d4430e5\",\"metadata\":{},\"hash\":\"G0rHXBqNSlTu+HGBGmhnFWqfFga2ejk1lL9HjiQ/cq4=\"}},\"hash\":\"Iad96n2tFDAG6HTUaBnUM65uu4WEo7SgnzIaLGJxLmg=\",\"text\":\"ECHO: 5.47723 ECHO: undef ECHO: 0 ECHO: undef ECHO: 5.47723 ECHO: 3.74166 ECHO: 2.23607 ECHO: 1 pow Mathematical power function. Parameters <base> Decimal. Base. <exponent> Decimal. Exponent. Usage examples: for (i = [0:5]) { translate([i*25,0,0]) { cylinder(h = pow(2,i)*5, r=10); echo (i, pow(2,i)); } } echo(pow(10,2)); // means 10^2 or 10*10 // result: ECHO: 100 echo(pow(10,3)); // means 10^3 or 10*10*10 // result: ECHO: 1000 echo(pow(125,1/3)); // means 125^(0.333...), which calculates the cube root of 125 // result: ECHO: 5 rands Random number generator. Generates a constant vector of pseudo random numbers, much like an array. The numbers are doubles not integers. When generating only one number, you still call it with variable[0] Parameters min_value Minimum value of random number range max_value Maximum value of random number range value_count Number of random numbers to return as a vector seed_value (optional) Seed value for random number generator for repeatable results. On versions before late 2015, seed_value gets rounded to the nearest integer Usage Examples: // get a single number single_rand = rands(0,10,1)[0]; echo(single_rand); // get a vector of 4 numbers seed=42; random_vect=rands(5,15,4,seed); echo( \\\"Random Vector: \\\",random_vect); sphere(r=5); for(i=[0:3]) { rotate(360*i/4) { translate([10+random_vect[i],0,0]) sphere(r=random_vect[i]/2); } }\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"c037dfa6-e17c-42c0-b7df-53eb7d4430e5":{"__data__":"{\"id_\":\"c037dfa6-e17c-42c0-b7df-53eb7d4430e5\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"4d2fe101-9efe-49e4-9353-f1046d96af06\",\"metadata\":{},\"hash\":\"Iad96n2tFDAG6HTUaBnUM65uu4WEo7SgnzIaLGJxLmg=\"},\"NEXT\":{\"nodeId\":\"bd92ce54-85c4-451a-be78-3a4a0a1ec64a\",\"metadata\":{},\"hash\":\"Yw6pfWA1DY3f6WmuhmwUA1OquOUgR6t+uKiadWHMMGY=\"}},\"hash\":\"G0rHXBqNSlTu+HGBGmhnFWqfFga2ejk1lL9HjiQ/cq4=\",\"text\":\"sphere(r=random_vect[i]/2); } } // ECHO: \\\"Random Vector: \\\", [8.7454, 12.9654, 14.5071, 6.83435] round The \\\"round\\\" operator returns the greatest or least integer part, respectively, if the numeric input is positive or negative. Some examples: round(x.5) = x+1. round(x.49) = x. round(-(x.5)) = -(x+1). round(-(x.49)) = -x. round(5.4); //-> 5 round(5.5); //-> 6 round(5.6); //-> 6 sign Mathematical signum function. Returns a unit value that extracts the sign of a value see: Signum function Parameters <x> Decimal. Value to find the sign of. Usage examples: sign(-5.0); sign(0); sign(8.0); Results: -1.0 0.0 1.0 sqrt Mathematical square root function. Usage Examples: translate([sqrt(100),0,0])sphere(100); Infinities and NaNs How does OpenSCAD deal with inputs like (1/0)? Basically, the behavior is inherited from the language OpenSCAD was written in, the C++ language, and its floating point number types and the associated C math library. This system allows representation of both positive and negative infinity by the special values \\\"Inf\\\" or \\\"-Inf\\\". It also allow representation of creatures like sqrt(-1) or 0/0 as \\\"NaN\\\", an abbreviation for \\\"Not A Number\\\". Some very nice explanations can be found on the web, for example the Open Group's site on math.h or Wikipedia's page on the IEEE 754 number format. However OpenSCAD is it's own language so it may not exactly match everything that happens in C. For example, OpenSCAD uses degrees instead of radians for trigonometric functions. Another example is that sin() does not throw a \\\"domain error\\\" when the input is 1/0, although it does return NaN.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"bd92ce54-85c4-451a-be78-3a4a0a1ec64a":{"__data__":"{\"id_\":\"bd92ce54-85c4-451a-be78-3a4a0a1ec64a\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"c037dfa6-e17c-42c0-b7df-53eb7d4430e5\",\"metadata\":{},\"hash\":\"G0rHXBqNSlTu+HGBGmhnFWqfFga2ejk1lL9HjiQ/cq4=\"},\"NEXT\":{\"nodeId\":\"1fb06054-4a07-4803-ac36-77399fed9e63\",\"metadata\":{},\"hash\":\"rKBfFUbNs5R8dI9UCe0uTD7v/HfBSWWpm1Vca06Eakk=\"}},\"hash\":\"Yw6pfWA1DY3f6WmuhmwUA1OquOUgR6t+uKiadWHMMGY=\",\"text\":\"Here are some examples of infinite input to OpenSCAD math functions and the resulting output, taken from OpenSCAD's regression test system in late 2015. 0/0: nan sin(1/0): nan asin(1/0): nan ln(1/0): inf round(1/0): inf -0/0: nan cos(1/0): nan acos(1/0): nan ln(-1/0): nan round(-1/0): -inf 0/-0: nan tan(1/0): nan atan(1/0): 90 log(1/0): inf sign(1/0): 1 1/0: inf ceil(-1/0): -inf atan(-1/0): -90 log(-1/0): nan sign(-1/0): -1 1/-0: -inf ceil(1/0): inf atan2(1/0, -1/0): 135 max(-1/0, 1/0): inf sqrt(1/0): inf -1/0: -inf floor(-1/0): -inf exp(1/0): inf min(-1/0, 1/0): -inf sqrt(-1/0): nan -1/-0: inf floor(1/0): inf exp(-1/0): 0 pow(2, 1/0): inf pow(2, - 1/0): 0 String Functions str Convert all arguments to strings and concatenate. Usage examples: number=2; echo (\\\"This is \\\",number,3,\\\" and that's it.\\\"); echo (str(\\\"This is \\\",number,3,\\\" and that's it.\\\")); Results: ECHO: \\\"This is \\\", 2, 3, \\\" and that's it.\\\" ECHO: \\\"This is 23 and that's it.\\\" chr [Note: Requires version 2015.03] Convert numbers to a string containing character with the corresponding code. OpenSCAD uses Unicode, so the number is interpreted as Unicode code point. Numbers outside the valid code point range produce an empty string. Parameters chr(Number) Convert one code point to a string of length 1 (number of bytes depending on UTF-8 encoding) if the code point is valid. chr(Vector)\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1fb06054-4a07-4803-ac36-77399fed9e63":{"__data__":"{\"id_\":\"1fb06054-4a07-4803-ac36-77399fed9e63\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"bd92ce54-85c4-451a-be78-3a4a0a1ec64a\",\"metadata\":{},\"hash\":\"Yw6pfWA1DY3f6WmuhmwUA1OquOUgR6t+uKiadWHMMGY=\"},\"NEXT\":{\"nodeId\":\"bab93170-0ba8-448c-ba5b-558b18d4674b\",\"metadata\":{},\"hash\":\"up7lclLUcqB/KR+qkWpiUucXYZMowI2HEQ6VWU5H034=\"}},\"hash\":\"rKBfFUbNs5R8dI9UCe0uTD7v/HfBSWWpm1Vca06Eakk=\",\"text\":\"chr(Vector) Convert all code points given in the argument vector to a string. chr(Range) Convert all code points produced by the range argument to a string. Examples echo(chr(65), chr(97));      // ECHO: \\\"A\\\", \\\"a\\\" echo(chr(65, 97));           // ECHO: \\\"Aa\\\" echo(chr([66, 98]));         // ECHO: \\\"Bb\\\" echo(chr([97 : 2 : 102]));   // ECHO: \\\"ace\\\" echo(chr(-3));               // ECHO: \\\"\\\" echo(chr(9786), chr(9788));  // ECHO: \\\"☺\\\", \\\"☼\\\" echo(len(chr(9788)));        // ECHO: 1 Note: When used with echo() the output to the console for character codes greater than 127 is platform dependent. ord [Note: Requires version 2019.05] Convert a character to a number representing the Unicode code point. If the parameter is not a string, the ord() returns undef. Parameters ord(String) Convert the first character of the given string to a Unicode code point. Examples echo(ord(\\\"a\\\")); // ECHO: 97 echo(ord(\\\"BCD\\\")); // ECHO: 66 echo([for (c = \\\"Hello! \\u0001\\\") ord(c)]); // ECHO: [72, 101, 108, 108, 111, 33, 32, 128578] Also See search() search() for text searching. List Comprehensions [Note: Requires version 2015.03] Basic Syntax The list comprehensions provide a flexible way to generate lists using the general syntax [ list-definition expression ] The following elements are supported to construct the list definition for (i = sequence) Iteration over a range or an existing list for (init;condition;next) Simple recursive call represented as C-style for each Takes a sequence value as argument, and adds each element to the list being constructed. each x is equivalent to `for (i = x) i` if (condition) Selection criteria, when true the expression is calculated and added to the result list let (x = value) Local variable assignment multiple generator expressions\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"bab93170-0ba8-448c-ba5b-558b18d4674b":{"__data__":"{\"id_\":\"bab93170-0ba8-448c-ba5b-558b18d4674b\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"1fb06054-4a07-4803-ac36-77399fed9e63\",\"metadata\":{},\"hash\":\"rKBfFUbNs5R8dI9UCe0uTD7v/HfBSWWpm1Vca06Eakk=\"},\"NEXT\":{\"nodeId\":\"80f53e68-230e-4784-bace-ce90e9a650b6\",\"metadata\":{},\"hash\":\"twlbvAvkNz2ZhMyF8KetlT8To9C++kYiNMSxABOxgqM=\"}},\"hash\":\"up7lclLUcqB/KR+qkWpiUucXYZMowI2HEQ6VWU5H034=\",\"text\":\"let (x = value) Local variable assignment multiple generator expressions [Note: Requires version 2019.05] The list comprehension syntax is generalized to allow multiple expressions. This allows to easily construct lists from multiple sub lists generated by different list comprehension expressions avoiding concat. steps = 50; points = [ // first expression generating the points in the positive Y quadrant for (a = [0 : steps]) [ a, 10 * sin(a * 360 / steps) + 10 ], // second expression generating the points in the negative Y quadrant for (a = [steps : -1 : 0]) [ a, 10 * cos(a * 360 / steps) - 20 ], // additional list of fixed points [ 10, -3 ], [ 3, 0 ], [ 10, 3 ] ]; polygon(points); for The for element defines the input values for the list generation. The syntax is the same as used by the for iterator. The sequence to the right of the equals sign can be any list. The for element iterates over all the members of the list. The variable on the left of the equals sign take on the value of each member of the sequence in turn. This value can then be processed in the child of the for element, and each result becomes a member of the final list that is produced. If the sequence has more than one dimension, for iterates over the first dimension only. Deeper dimensions can be accessed by nesting for elements. Several common usage patterns are presented here. [ for (i = [start : step : end]) i ] Generate output based on a range definition, this version is mainly useful to calculate list values or access existing lists using the range value as index. Examples // generate a list with all values defined by a range list1 = [ for (i = [0 : 2 : 10]) i ]; echo(list1); // ECHO: [0, 2, 4, 6, 8, 10] // extract every second character of a string str = \\\"SomeText\\\"; list2 = [ for (i = [0 : 2 : len(str) - 1]) str[i] ]; echo(list2); // ECHO: [\\\"S\\\", \\\"m\\\", \\\"T\\\", \\\"x\\\"]\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"80f53e68-230e-4784-bace-ce90e9a650b6":{"__data__":"{\"id_\":\"80f53e68-230e-4784-bace-ce90e9a650b6\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"bab93170-0ba8-448c-ba5b-558b18d4674b\",\"metadata\":{},\"hash\":\"up7lclLUcqB/KR+qkWpiUucXYZMowI2HEQ6VWU5H034=\"},\"NEXT\":{\"nodeId\":\"d30c3108-7ec7-4941-9712-0160a008ab0f\",\"metadata\":{},\"hash\":\"fwJptfo8FtNN6y476zvOHu5L7aauUhxAzxXLj4rx4NE=\"}},\"hash\":\"twlbvAvkNz2ZhMyF8KetlT8To9C++kYiNMSxABOxgqM=\",\"text\":\"echo(list2); // ECHO: [\\\"S\\\", \\\"m\\\", \\\"T\\\", \\\"x\\\"] // indexed list access, using function to map input values to output values function func(x) = x < 1 ? 0 : x + func(x - 1); input = [1, 3, 5, 8]; output = [for (a = [ 0 : len(input) - 1 ]) func(input[a]) ]; echo(output); // ECHO: [1, 6, 15, 36] [ for (i = [a, b, c, ...]) i ] Use list parameter as input, this version can be used to map input values to calculated output values. Examples // iterate over an existing list friends = [\\\"John\\\", \\\"Mary\\\", \\\"Alice\\\", \\\"Bob\\\"]; list = [ for (i = friends) len(i)]; echo(list); // ECHO: [4, 4, 5, 3] // map input list to output list list = [ for (i = [2, 3, 5, 7, 11]) i * i ]; echo(list); // ECHO: [4, 9, 25, 49, 121] // calculate Fibonacci numbers function func(x) = x < 3 ? 1 : func(x - 1) + func(x - 2); input = [7, 10, 12]; output = [for (a = input) func(a) ]; echo(output); // ECHO: [13, 55, 144] [ for (c = \\\"String\\\") c ] Generate output based on a string, this iterates over each character of the string. [Note: Requires version 2019.05] Examples echo([ for (c = \\\"String\\\") c ]); // ECHO: [\\\"S\\\", \\\"t\\\", \\\"r\\\", \\\"i\\\", \\\"n\\\", \\\"g\\\"] [ for (a = inita, b = initb, ...;condition;a = nexta, b = nextb, ...) expr ] Generator for expressing simple recursive call in a c-style for loop. [Note: Requires version 2019.05] The recursive equivalent of this generator is function f(a, b, ...) = condition ?\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d30c3108-7ec7-4941-9712-0160a008ab0f":{"__data__":"{\"id_\":\"d30c3108-7ec7-4941-9712-0160a008ab0f\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"80f53e68-230e-4784-bace-ce90e9a650b6\",\"metadata\":{},\"hash\":\"twlbvAvkNz2ZhMyF8KetlT8To9C++kYiNMSxABOxgqM=\"},\"NEXT\":{\"nodeId\":\"2c79d51d-87d8-40d2-b4d9-438de2b747ce\",\"metadata\":{},\"hash\":\"eKiFy6LBT74iE1BIwKYMB3jiZNOpBiiXtn/YWXed6GE=\"}},\"hash\":\"fwJptfo8FtNN6y476zvOHu5L7aauUhxAzxXLj4rx4NE=\",\"text\":\"function f(a, b, ...) = condition ? concat([expr], f(nexta, nextb, ...)) : []; f(inita, initb, ...) Examples echo( [for (a = 0, b = 1;a < 5;a = a + 1, b = b + 2) [ a, b * b ] ] ); // ECHO: [[0, 1], [1, 9], [2, 25], [3, 49], [4, 81]] // Generate fibonacci sequence echo([for (a = 0, b = 1;a < 1000;x = a + b, a = b, b = x) a]); // ECHO: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] each [Note: Requires version 2019.05] each embeds the values of a list given as argument directly, effectively unwrapping the argument list. // Without using \\\"each\\\", a nested list is generated echo([ for (a = [1 : 4]) [a, a * a] ]); // ECHO: [[1, 1], [2, 4], [3, 9], [4, 16]] // Adding \\\"each\\\" unwraps the inner list, producing a flat list as result echo([ for (a = [1 : 4]) each [a, a * a] ]); // ECHO: [1, 1, 2, 4, 3, 9, 4, 16] each unwraps ranges and helps to build more general for lists when combined with multiple generator expressions. A = [-2, each [1:2:5], each [6:-2:0], -1]; echo([ for (a = A) 2 * a ]); // ECHO: [-4, 2, 6, 10, 12, 8, 4, 0, -2] if The if element allows selection if the expression should be allocated and added to the result list or not. In the simplest case this allows filtering of an list.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2c79d51d-87d8-40d2-b4d9-438de2b747ce":{"__data__":"{\"id_\":\"2c79d51d-87d8-40d2-b4d9-438de2b747ce\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"d30c3108-7ec7-4941-9712-0160a008ab0f\",\"metadata\":{},\"hash\":\"fwJptfo8FtNN6y476zvOHu5L7aauUhxAzxXLj4rx4NE=\"},\"NEXT\":{\"nodeId\":\"66dee7bf-bf7b-4812-b1aa-f9421e6ec189\",\"metadata\":{},\"hash\":\"6scaYEIutLuO1OijXl9j2N8a00RWQx5caW9LhkDAL+E=\"}},\"hash\":\"eKiFy6LBT74iE1BIwKYMB3jiZNOpBiiXtn/YWXed6GE=\",\"text\":\"In the simplest case this allows filtering of an list. [ for (i = list) if (condition(i)) i ] When the evaluation of the condition returns true, the expression i is added to the result list. Example list = [ for (a = [ 1 : 8 ]) if (a % 2 == 0) a ]; echo(list); // ECHO: [2, 4, 6, 8] Note that the if element cannot be inside an expression, it should be at the top. Example // from the input list include all positive odd numbers // and also all even number divided by 2 list = [-10:5]; echo([for(n=list) if(n%2==0 || n>=0) n%2==0 ? n/2 : n ]); // ECHO: [-5, -4, -3, -2, -1, 0, 1, 1, 3, 2, 5] // echo([for(n=list) n%2==0 ? n/2 : if(n>=0) n ]); // this would generate a syntactical error if/else [Note: Requires version 2019.05] The if-else construct is equivalent to the conditional expression ?: except that it can be combined with filter if. [ for (i = list) if (condition(i)) x else y ] When the evaluation of the condition returns true, the expression x is added to the result list else the expression y. // even numbers are halved, positive odd numbers are preserved, negative odd numbers are eliminated echo([for (a = [-3:5]) if (a % 2 == 0) [a, a/2] else if (a > 0) [a, a] ]); // ECHO: [[-2, -1], [0, 0], [1, 1], [2, 1], [3, 3], [4, 2], [5, 5]]; Note that in the expression above the conditional operator could not substitute if-else. It is possible to express this same filter with the conditional operator but with a more cryptic logic: // even numbers are halved, positive odd numbers are preserved, negative odd numbers are eliminated\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"66dee7bf-bf7b-4812-b1aa-f9421e6ec189":{"__data__":"{\"id_\":\"66dee7bf-bf7b-4812-b1aa-f9421e6ec189\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"2c79d51d-87d8-40d2-b4d9-438de2b747ce\",\"metadata\":{},\"hash\":\"eKiFy6LBT74iE1BIwKYMB3jiZNOpBiiXtn/YWXed6GE=\"},\"NEXT\":{\"nodeId\":\"f0875a7d-83ec-4983-9fc7-6e471422025a\",\"metadata\":{},\"hash\":\"NyYAfp6/WHFuamhou+V9jQDc3SKw1dQav7/+/v8Cx6Y=\"}},\"hash\":\"6scaYEIutLuO1OijXl9j2N8a00RWQx5caW9LhkDAL+E=\",\"text\":\"// even numbers are halved, positive odd numbers are preserved, negative odd numbers are eliminated echo([for (a = [-3:5]) if (a % 2 == 0 || (a % 2 != 0 && a > 0)) a % 2 == 0 ? [a, a / 2] : [a, a] ]); // ECHO: [[-2, -1], [0, 0], [1, 1], [2, 1], [3, 3], [4, 2], [5, 5]]; To bind an else expression to a specific if, it's possible to use parenthesis. // even numbers are dropped, multiples of 4 are substituted by -1 echo([for(i=[0:10]) if(i%2==0) (if(i%4==0) -1 ) else i]); // ECHO: [-1, 1, 3, -1, 5, 7, -1, 9] // odd numbers are dropped, multiples of 4 are substituted by -1 echo([for(i=[0:10]) if(i%2==0) if(i%4==0) -1 else i]); // ECHO: [-1, 2, -1, 6, -1, 10] let Result The let element allows sequential assignment of variables inside a list comprehension definition. [ for (i = list) let (assignments) a ] Example list = [ for (a = [ 1 : 4 ]) let (b = a*a, c = 2 * b) [ a, b, c ] ]; echo(list); // ECHO: [[1, 1, 2], [2, 4, 8], [3, 9, 18], [4, 16, 32]] Nested loops There are different ways to define nested loops. Defining multiple loop variables inside one for element and multiple for elements produce both flat result lists. To generate nested result lists an additional [ ] markup is required. // nested loop using multiple variables flat_result1 = [ for (a = [ 0 : 2 ], b = [ 0 : 2 ]) a == b ? 1 : 0 ];\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"f0875a7d-83ec-4983-9fc7-6e471422025a":{"__data__":"{\"id_\":\"f0875a7d-83ec-4983-9fc7-6e471422025a\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"66dee7bf-bf7b-4812-b1aa-f9421e6ec189\",\"metadata\":{},\"hash\":\"6scaYEIutLuO1OijXl9j2N8a00RWQx5caW9LhkDAL+E=\"},\"NEXT\":{\"nodeId\":\"ec1304bc-9ea7-4660-9b43-92c15e349d73\",\"metadata\":{},\"hash\":\"6UKUBWoE6MjNIodL9+q7pPOKHK1uJLtRkuB/uYHpo5s=\"}},\"hash\":\"NyYAfp6/WHFuamhou+V9jQDc3SKw1dQav7/+/v8Cx6Y=\",\"text\":\"1 : 0 ]; echo(flat_result1); // ECHO: [1, 0, 0, 0, 1, 0, 0, 0, 1] // nested loop using multiple for elements flat_result2 = [ for (a = [ 0 : 2 ]) for (b = [0 : 2])  a == b ? 1 : 0 ]; echo(flat_result2); // ECHO: [1, 0, 0, 0, 1, 0, 0, 0, 1] // nested loop to generate a bi-dimensional matrix identity_matrix = [ for (a = [ 0 : 2 ]) [ for (b = [ 0 : 2 ]) a == b ? 1 : 0 ] ]; echo(identity_matrix); // ECHO: [[1, 0, 0], [0, 1, 0], [0, 0, 1]] Advanced Examples This chapter lists some advanced examples, useful idioms and use-cases for the list comprehension syntax. Generating vertices for a polygon Using list comprehension, a parametric equation can be calculated at a number of points to approximate many curves, such as the following example for an ellipse (using polygon()): sma = 20;  // semi-minor axis smb = 30;  // semi-major axis polygon( [ for (a = [0 : 5 : 359]) [ sma * sin(a), smb * cos(a) ] ] ); Flattening a nested vector List comprehension can be used in a user-defined function to perform tasks on or for vectors. Here is a user-defined function that flattens a nested vector. // input : nested list // output : list with the outer level nesting removed function flatten(l) = [ for (a = l) for (b = a) b ] ; nested_list = [ [ 1, 2, 3 ], [ 4, 5, 6 ] ]; echo(flatten(nested_list)); // ECHO: [1, 2, 3, 4, 5, 6] Sorting a vector Even a complicated algorithm Quicksort becomes doable with for(), if(), let() and recursion: // input : list of numbers // output : sorted list of numbers\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"ec1304bc-9ea7-4660-9b43-92c15e349d73":{"__data__":"{\"id_\":\"ec1304bc-9ea7-4660-9b43-92c15e349d73\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"f0875a7d-83ec-4983-9fc7-6e471422025a\",\"metadata\":{},\"hash\":\"NyYAfp6/WHFuamhou+V9jQDc3SKw1dQav7/+/v8Cx6Y=\"},\"NEXT\":{\"nodeId\":\"030b9748-8b22-46fd-99c2-dd510b654b37\",\"metadata\":{},\"hash\":\"xxHndvppwH+YeBJcyJ9t7qQ+qkK6gWmd37SFDFMueTw=\"}},\"hash\":\"6UKUBWoE6MjNIodL9+q7pPOKHK1uJLtRkuB/uYHpo5s=\",\"text\":\"// input : list of numbers // output : sorted list of numbers function quicksort(arr) = !(len(arr)>0) ? [] : let( pivot   = arr[floor(len(arr)/2)], lesser  = [ for (y = arr) if (y  < pivot) y ], equal   = [ for (y = arr) if (y == pivot) y ], greater = [ for (y = arr) if (y  > pivot) y ] ) concat( quicksort(lesser), equal, quicksort(greater) ); // use seed in rands() to get reproducible results unsorted = [for (a = rands(0, 10, 6, 3)) ceil(a)]; echo(unsorted); // ECHO: [6, 1, 8, 9, 3, 2] echo(quicksort(unsorted)); // ECHO: [1, 2, 3, 6, 8, 9] Selecting elements of a vector select() performs selection and reordering of elements into a new vector. function select(vector, indices) = [ for (index = indices) vector[index] ];  vector1 =   [[0,0],[1,1],[2,2],[3,3],[4,4]]; selector1 = [4,0,3]; vector2 =   select(vector1,selector1);    // [[4, 4], [0, 0], [3, 3]] vector3 =   select(vector1,[0,2,4,4,2,0]);// [[0, 0], [2, 2], [4, 4],[4, 4], [2, 2], [0, 0]] // range also works as indices vector4 =   select(vector1, [4:-1:0]);    // [[4, 4], [3, 3], [2, 2], [1, 1], [0, 0]] Concatenating two vectors Using indices: function cat(L1, L2) = [for (i=[0:len(L1)+len(L2)-1]) i < len(L1)? L1[i] : L2[i-len(L1)]] ;\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"030b9748-8b22-46fd-99c2-dd510b654b37":{"__data__":"{\"id_\":\"030b9748-8b22-46fd-99c2-dd510b654b37\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"ec1304bc-9ea7-4660-9b43-92c15e349d73\",\"metadata\":{},\"hash\":\"6UKUBWoE6MjNIodL9+q7pPOKHK1uJLtRkuB/uYHpo5s=\"},\"NEXT\":{\"nodeId\":\"b136db52-618b-46fc-88d1-3c37fa0012ab\",\"metadata\":{},\"hash\":\"Y6iIe2qIoRZeZzOMDoVj+/5CGTCBq0MTZmL4dn1Dt2M=\"}},\"hash\":\"xxHndvppwH+YeBJcyJ9t7qQ+qkK6gWmd37SFDFMueTw=\",\"text\":\"L1[i] : L2[i-len(L1)]] ; echo(cat([1,2,3],[4,5])); //concatenates two OpenSCAD lists [1,2,3] and [4,5], giving [1, 2, 3, 4, 5] Without using indices: function cat(L1, L2) = [for(L=[L1, L2], a=L) a]; echo(cat([1,2,3],[4,5])); //concatenates two OpenSCAD lists [1,2,3] and [4,5], giving [1, 2, 3, 4, 5] Other Language Features Special variables Special variables provide an alternate means of passing arguments to modules and functions. All user, or OpenSCAD, defined variables starting with a '$' are special variables, similar to special variables in lisp. Modules and function see all outside variables in addition to those passed as arguments or defined internally. The value for a regular variable is assigned at compile time and is thus static for all calls. Special variables pass along their value from within the scope (see scope of variables) from which the module or function is called. This means that special variables can potentially have a different value each time a module or function is called. regular  = \\\"regular global\\\"; $special = \\\"special global\\\"; module show() echo(\\\"         in show    \\\", regular,\\\"   \\\", $special ); echo (\\\"         outside    \\\", regular,\\\"   \\\", $special ); // ECHO: \\\"         outside    \\\", \\\"regular global\\\", \\\"   \\\", \\\"special global\\\"  for ( regular = [0:1] ){ echo(\\\"in regular loop     \\\", regular,\\\"   \\\", $special ); show();} // ECHO: \\\"in regular loop     \\\", 0, \\\"   \\\", \\\"special global\\\" // ECHO: \\\"         in show    \\\", \\\"regular global\\\", \\\"   \\\", \\\"special global\\\" // ECHO: \\\"in regular loop     \\\", 1, \\\"   \\\", \\\"special global\\\" // ECHO: \\\"         in show    \\\", \\\"regular global\\\", \\\"   \\\", \\\"special global\\\" for ( $special = [5:6] ){ echo(\\\"in special loop     \\\", regular,\\\"   \\\", $special ); show();}\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b136db52-618b-46fc-88d1-3c37fa0012ab":{"__data__":"{\"id_\":\"b136db52-618b-46fc-88d1-3c37fa0012ab\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"030b9748-8b22-46fd-99c2-dd510b654b37\",\"metadata\":{},\"hash\":\"xxHndvppwH+YeBJcyJ9t7qQ+qkK6gWmd37SFDFMueTw=\"},\"NEXT\":{\"nodeId\":\"fa06c28c-dbf9-4db6-afe3-997142c8b485\",\"metadata\":{},\"hash\":\"WLKYFr2ef/l3/NNl/skb5TIGlTwILJMq/jE/LtyAmvg=\"}},\"hash\":\"Y6iIe2qIoRZeZzOMDoVj+/5CGTCBq0MTZmL4dn1Dt2M=\",\"text\":\"// ECHO: \\\"in special loop     \\\", \\\"regular global\\\", \\\"   \\\", 5 // ECHO: \\\"         in show    \\\", \\\"regular global\\\", \\\"   \\\", 5 // ECHO: \\\"in special loop     \\\", \\\"regular global\\\", \\\"   \\\", 6 // ECHO: \\\"         in show    \\\", \\\"regular global\\\", \\\"   \\\", 6 show(); // ECHO: \\\"         in show    \\\", \\\"regular global\\\", \\\"   \\\", \\\"special global\\\" This is useful when multiple arguments need to be passed thru several layers of module calls. Several special variables are already defined by OpenSCAD. $fa, $fs and $fn The $fa, $fs and $fn special variables control the number of facets used to generate an arc: $fa is the minimum angle for a fragment. Even a huge circle does not have more fragments than 360 divided by this number. The default value is 12 (i.e. 30 fragments for a full circle). The minimum allowed value is 0.01. Attempting to set a lower value causes a warning. $fs is the minimum size of a fragment. The default value is 2 so very small circles have a smaller number of fragments than specified using $fa. The minimum allowed value is 0.01. Attempting to set a lower value causes a warning. $fn is usually the default value of 0. When this variable has a value greater than zero, the other two variables are ignored, and a full circle is rendered using this number of fragments. The higher the number of fragments, the more memory and CPU consumed; large values can bring many systems to their knees. Depending on the design, $fn values, and the corresponding results of $fa & $fs, should be kept small, at least until the design is finalised when it can be increased for the final result. A $fn over 100 is not recommended or only for specific circumstances, and below 50 would be advisable for performance. TIP: If you want to create a circle/cylinder/sphere which has an axis aligned integer bounding box (i.e. a bounding box that has integral dimensions, and an integral position) use a value of $fn that is divisible by 4.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"fa06c28c-dbf9-4db6-afe3-997142c8b485":{"__data__":"{\"id_\":\"fa06c28c-dbf9-4db6-afe3-997142c8b485\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"b136db52-618b-46fc-88d1-3c37fa0012ab\",\"metadata\":{},\"hash\":\"Y6iIe2qIoRZeZzOMDoVj+/5CGTCBq0MTZmL4dn1Dt2M=\"},\"NEXT\":{\"nodeId\":\"141dab11-261c-4048-a5a4-cf702c18d143\",\"metadata\":{},\"hash\":\"PqTdtG4Xv7WS12o3tye0dImJ+4x+3+9udbonE1cZREw=\"}},\"hash\":\"WLKYFr2ef/l3/NNl/skb5TIGlTwILJMq/jE/LtyAmvg=\",\"text\":\"an integral position) use a value of $fn that is divisible by 4. When $fa and $fs are used to determine the number of fragments for a circle, then OpenSCAD never uses fewer than 5 fragments. This is the C code that calculates the number of fragments in a circle: int get_fragments_from_r(double r, double fn, double fs, double fa) { if (r < GRID_FINE) return 3; if (fn > 0.0) return (int)(fn >= 3 ? fn : 3); return (int)ceil(fmax(fmin(360.0 / fa, r*2*M_PI / fs), 5)); } Or you can embed this OpenSCAD version in your code to work out what's going on, you need to set r= to your size echo(n=($fn>0?($fn>=3?$fn:3):ceil(max(min(360/$fa,r*2*PI/$fs),5))),a_based=360/$fa,s_based=r*2*PI/$fs); Spheres are first sliced into as many slices as the number of fragments being used to render a circle of the sphere's radius, and then every slice is rendered into as many fragments as are needed for the slice radius. You might have recognized already that the pole of a sphere is usually a pentagon. This is why. The number of fragments for a cylinder is determined using the greater of the two radii. The method is also used when rendering circles and arcs from DXF files. The variables have no effect when importing STL files. You can generate high resolution spheres by resetting the $fX values in the instantiating module: $fs = 0.01; sphere(2); or simply by passing the special variable as parameter: sphere(2, $fs = 0.01); You can even scale the special variable instead of resetting it: sphere(2, $fs = $fs * 0.01); $t The $t variable is used for animation. If you enable the animation frame with view->animate and give a value for \\\"FPS\\\" and \\\"Steps\\\", the \\\"Time\\\" field shows the current value of $t. With this information in mind, you can animate your design.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"141dab11-261c-4048-a5a4-cf702c18d143":{"__data__":"{\"id_\":\"141dab11-261c-4048-a5a4-cf702c18d143\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"fa06c28c-dbf9-4db6-afe3-997142c8b485\",\"metadata\":{},\"hash\":\"WLKYFr2ef/l3/NNl/skb5TIGlTwILJMq/jE/LtyAmvg=\"},\"NEXT\":{\"nodeId\":\"602a72df-b432-463e-8c54-4ad412a60980\",\"metadata\":{},\"hash\":\"cAeH1iT8r37LdzG61u1/5ojGwnwrxNCYagnnHkPv1f0=\"}},\"hash\":\"PqTdtG4Xv7WS12o3tye0dImJ+4x+3+9udbonE1cZREw=\",\"text\":\"With this information in mind, you can animate your design. The design is recompiled every 1/\\\"FPS\\\" seconds with $t incremented by 1/\\\"Steps\\\" for \\\"Steps\\\" times, ending at either $t=1 or $t=1-1/steps. If \\\"Dump Pictures\\\" is checked, then images are created in the same directory as the .scad file, using the following $t values, and with the following naming convention: Naming Convention Pattern 1: $t=0/Steps filename=\\\"frame00001.png\\\" $t=1/Steps filename=\\\"frame00002.png $t=2/Steps filename=\\\"frame00003.png\\\" . . . $t=1-3/Steps filename=\\\"frame<Steps-2>.png\\\" $t=1-2/Steps filename=\\\"frame<Steps-1>.png\\\" $t=1-1/Steps filename=\\\"frame00000.png\\\" Or, for other values of Steps, it follows this pattern: Pattern2: $t=0/Steps filename=\\\"frame00001.png\\\" $t=1/Steps filename=\\\"frame00002.png $t=2/Steps filename=\\\"frame00003.png\\\" . . . $t=1-3/Steps filename=\\\"frame<Steps-2>.png\\\" $t=1-2/Steps filename=\\\"frame<Steps-1>.png\\\" $t=1-1/Steps filename=\\\"frame<Steps-0>.png\\\" $t=1-0/Steps filename=\\\"frame00000.png\\\" Which pattern it chooses appears to be an unpredictable, but consistent determined by Steps. For example, when Steps=4, it follows the first pattern, and outputs a total of 4 files. When Steps=3, it follows the second pattern, and also outputs 4 files. It always outputs either Steps or Steps+1 files, though it may not be predictable which. When finished, it wraps around and recreate each of the files, looping through and recreating them forever. $vpr, $vpt, $vpf and $vpd These contain the current viewport rotation and translation and camera distance - at the time of doing the rendering. Moving the viewport does not update them. During an animation they are updated for each frame. $vpr shows rotation $vpt shows translation (i.e.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"602a72df-b432-463e-8c54-4ad412a60980":{"__data__":"{\"id_\":\"602a72df-b432-463e-8c54-4ad412a60980\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"141dab11-261c-4048-a5a4-cf702c18d143\",\"metadata\":{},\"hash\":\"PqTdtG4Xv7WS12o3tye0dImJ+4x+3+9udbonE1cZREw=\"},\"NEXT\":{\"nodeId\":\"b2c0dcf2-0c35-473a-bda8-3572ca6e2c41\",\"metadata\":{},\"hash\":\"M4B5gdam+hsgBa0EURZ6dnnyTm6i24FnVr6U/w8kdqA=\"}},\"hash\":\"cAeH1iT8r37LdzG61u1/5ojGwnwrxNCYagnnHkPv1f0=\",\"text\":\"$vpr shows rotation $vpt shows translation (i.e. won't be affected by rotate and zoom) $vpf shows the FOV of the view [Note: Requires version 2021.01] $vpd shows the camera distance [Note: Requires version 2015.03] Example cube([10, 10, $vpr[0] / 10]); which makes the cube change size based on the view angle, if an animation loop is active (which does not need to use the $t variable) You can also make bits of a complex model vanish as you change the view. All three variables are writable, but only assignments at the top-level of the main file has an effect on the viewport. [Note: Requires version 2015.03] Example $vpr = [0, 0, $t * 360]; which allows a simple 360 degree rotation around the Z axis in animation mode. The menu command Edit - Paste Viewport Rotation/Translation copies the current value of the viewport, but not the current $vpr or $vpt. $preview [Note: Requires version 2019.05] $preview is true, when in OpenCSG preview (F5). $preview is false, when in render (F6). This can, for example, be used to reduce detail during preview to save time, without losing detail in the final rendered result: $fn = $preview ? 12 : 72; sphere(r = 1); Note that the render module does not affect $preview: render(){ $fn = $preview ? 12 : 72; sphere(r = 1); } Another use could be to make the preview show an assembly view and the render generate just the printed parts laid out for printing. If printed parts need extra features that are removed post printing, for example support for suspended holes, then the preview can omit these to show the finished part after post processing. When OpenSCAD is run from the command line $preview is only true when generating a PNG image with OpenCSG. It is false when generating STL, DXF and SVG files with CGAL. It is also false when generating CSG and ECHO files. This may or may not be what you want, but you can always override\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b2c0dcf2-0c35-473a-bda8-3572ca6e2c41":{"__data__":"{\"id_\":\"b2c0dcf2-0c35-473a-bda8-3572ca6e2c41\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"602a72df-b432-463e-8c54-4ad412a60980\",\"metadata\":{},\"hash\":\"cAeH1iT8r37LdzG61u1/5ojGwnwrxNCYagnnHkPv1f0=\"},\"NEXT\":{\"nodeId\":\"29847c89-5f02-4072-a3a2-6e3e4fe67b52\",\"metadata\":{},\"hash\":\"zBrQy2C78jcysyp9X+MRJzqZfgaoVokIRA/BNr7C9Dk=\"}},\"hash\":\"M4B5gdam+hsgBa0EURZ6dnnyTm6i24FnVr6U/w8kdqA=\",\"text\":\"This may or may not be what you want, but you can always override it on the command line like any other variable with the -D option. Echo Statements This function prints the contents to the compilation window (aka Console). Useful for debugging code. Also see the String function str(). Numeric values are rounded to 5 significant digits. It can be handy to use 'variable=variable' as the expression to easily label the variables, see the example below. Usage examples: my_h=50; my_r=100; echo(\\\"This is a cylinder with h=\\\", my_h, \\\" and r=\\\", my_r); echo(my_h=my_h,my_r=my_r); // shortcut cylinder(h=my_h, r=my_r); Shows in the Console as ECHO: \\\"This is a cylinder with h=\\\", 50, \\\" and r=\\\", 100 ECHO: my_h = 50, my_r = 100 Note that the output will not have the extra double quotes and commas if converted to a string using str(). Rounding examples An example for the rounding: a=1.0; b=1.000002; echo(a); echo(b); if(a==b){ //while echoed the same, the values are still distinct echo (\\\"a==b\\\"); }else if(a>b){ echo (\\\"a>b\\\"); }else if(a<b){ echo (\\\"a<b\\\"); }else{ echo (\\\"???\\\"); } Small and large Numbers c=1000002; d=0.000002; echo(c); //1e+06 echo(d); //2e-06 HTML HTML output is not officially supported, however depending on the OpenSCAD version, some HTML tags were rendered in the console window. Echo Function [Note: Requires version 2019.05] Echo can be used in expression context to print information while the function/expression is evaluated. The output is generated before the expression evaluation to allow debugging of recursive functions. Example a = 3; b = 5;  // echo() prints values before evaluating the expression r1 = echo(a, b) a * b; // ECHO: 3, 5  // using let it's still easy to output the result\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"29847c89-5f02-4072-a3a2-6e3e4fe67b52":{"__data__":"{\"id_\":\"29847c89-5f02-4072-a3a2-6e3e4fe67b52\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"b2c0dcf2-0c35-473a-bda8-3572ca6e2c41\",\"metadata\":{},\"hash\":\"M4B5gdam+hsgBa0EURZ6dnnyTm6i24FnVr6U/w8kdqA=\"},\"NEXT\":{\"nodeId\":\"1aeb1b32-ef27-4486-921d-9257a0b7bb9b\",\"metadata\":{},\"hash\":\"mS04ODdC4IH3jwKFxAbDyISshiFqhND1u953+151JuU=\"}},\"hash\":\"zBrQy2C78jcysyp9X+MRJzqZfgaoVokIRA/BNr7C9Dk=\",\"text\":\"// using let it's still easy to output the result r2 = let(r = 2 * a * b) echo(r) r; // ECHO: 30  // use echo statement for showing results echo(r1, r2); // ECHO: 15, 30 A more complex example shows how echo() can be used in both descending and ascending path of a recursive function. The result() helper function is a simple way to output the value of an expression after evaluation. Example printing both input values and result of recursive sum() v = [4, 7, 9, 12]; function result(x) = echo(result = x) x; function sum(x, i = 0) = echo(str(\\\"x[\\\", i, \\\"]=\\\", x[i])) result(len(x) > i ? x[i] + sum(x, i + 1) : 0); echo(\\\"sum(v) = \\\", sum(v));  // ECHO: \\\"x[0]=4\\\" // ECHO: \\\"x[1]=7\\\" // ECHO: \\\"x[2]=9\\\" // ECHO: \\\"x[3]=12\\\" // ECHO: \\\"x[4]=undef\\\" // ECHO: result = 0 // ECHO: result = 12 // ECHO: result = 21 // ECHO: result = 28 // ECHO: result = 32 // ECHO: \\\"sum(v) = \\\", 32 Render Forces the generation of a mesh even in preview mode. Useful when the boolean operations become too slow to track. Needs description. Usage examples: render(convexity = 2) difference() { cube([20, 20, 150], center = true); translate([-10, -10, 0]) cylinder(h = 80, r = 10, center = true); translate([-10, -10, +40]) sphere(r = 10); translate([-10, -10, -40]) sphere(r = 10); } Surface Surface reads Heightmap information from text or image files. Parameters file String. The path to the file containing the heightmap data. center Boolean. This determines the positioning of the generated object.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1aeb1b32-ef27-4486-921d-9257a0b7bb9b":{"__data__":"{\"id_\":\"1aeb1b32-ef27-4486-921d-9257a0b7bb9b\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"29847c89-5f02-4072-a3a2-6e3e4fe67b52\",\"metadata\":{},\"hash\":\"zBrQy2C78jcysyp9X+MRJzqZfgaoVokIRA/BNr7C9Dk=\"},\"NEXT\":{\"nodeId\":\"b20c490e-300a-4a8e-b3e1-66500c219349\",\"metadata\":{},\"hash\":\"+kZEP3iNoVn+7Eo1YDwL2xXJqCE5n87RVMQS1RhJAJc=\"}},\"hash\":\"mS04ODdC4IH3jwKFxAbDyISshiFqhND1u953+151JuU=\",\"text\":\"center Boolean. This determines the positioning of the generated object. If true, object is centered in X- and Y-axis. Otherwise, the object is placed in the positive quadrant. Defaults to false. invert Boolean. Inverts how the color values of imported images are translated into height values. This has no effect when importing text data files. Defaults to false. [Note: Requires version 2015.03] convexity Integer. The convexity parameter specifies the maximum number of front sides (back sides) a ray intersecting the object might penetrate. This parameter is only needed for correctly displaying the object in OpenCSG preview mode and has no effect on the final rendering. Text file format The format for text based heightmaps is a matrix of numbers that represent the height for a specific point. Rows are mapped to the Y-axis, columns to the X axis. The numbers must be separated by spaces or tabs. Empty lines and lines starting with a # character are ignored. Images [Note: Requires version 2015.03] Currently only PNG images are supported. Alpha channel information of the image is ignored and the height for the pixel is determined by converting the color value to Grayscale using the linear luminance for the sRGB color space (Y = 0.2126R + 0.7152G + 0.0722B). The gray scale values are scaled to be in the range 0 to 100. Examples Example 1: //surface.scad surface(file = \\\"surface.dat\\\", center = true, convexity = 5); %translate([0,0,5])cube([10,10,10], center =true); #surface.dat 10 9 8 7 6 5 5 5 5 5 9 8 7 6 6 4 3 2 1 0 8 7 6 6 4 3 2 1 0 0 7 6 6 4 3 2 1 0 0 0 6 6 4 3 2 1 1 0 0 0 6 6 3 2 1 1 1 0 0 0\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"b20c490e-300a-4a8e-b3e1-66500c219349":{"__data__":"{\"id_\":\"b20c490e-300a-4a8e-b3e1-66500c219349\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"1aeb1b32-ef27-4486-921d-9257a0b7bb9b\",\"metadata\":{},\"hash\":\"mS04ODdC4IH3jwKFxAbDyISshiFqhND1u953+151JuU=\"},\"NEXT\":{\"nodeId\":\"281c1368-e034-4387-b503-cc1f8272d9fa\",\"metadata\":{},\"hash\":\"dXrP/enlS0BQH4l3HQCOjPHTW6ehsS6YxwgPQOajLsc=\"}},\"hash\":\"+kZEP3iNoVn+7Eo1YDwL2xXJqCE5n87RVMQS1RhJAJc=\",\"text\":\"6 6 3 2 1 1 1 0 0 0 6 6 2 1 1 1 1 0 0 0 6 6 1 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 Result: Example 2 // example010.dat generated using octave: // d = (sin(1:0.2:10)' * cos(1:0.2:10)) * 10; // save(\\\"example010.dat\\\", \\\"d\\\"); intersection() { surface(file = \\\"example010.dat\\\", center = true, convexity = 5); rotate(45, [0, 0, 1]) surface(file = \\\"example010.dat\\\", center = true, convexity = 5); } Example 3: [Note: Requires version 2015.03] // Example 3a scale([1, 1, 0.1]) surface(file = \\\"smiley.png\\\", center = true); // Example 3b scale([1, 1, 0.1]) surface(file = \\\"smiley.png\\\", center = true, invert = true); Input image Example 3a: surface(invert = false) Example 3b: surface (invert = true) Example 3: Using surface() with a PNG image as heightmap input. Example 4: [Note: Requires version 2015.03] // Example 4 surface(file = \\\"BRGY-Grey.png\\\", center = true, invert = false); PNG Test File 3D Surface Search The search() function is a general-purpose function to find one or more (or all) occurrences of a value or list of values in a vector, string or more complex list-of-list construct. Search Usage search( match_value , string_or_vector [, num_returns_per_match [, index_col_num ] ] ); Search Arguments match_value Can be a single string value. Search loops over the characters in the string and searches for each one in the second argument. The second\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"281c1368-e034-4387-b503-cc1f8272d9fa":{"__data__":"{\"id_\":\"281c1368-e034-4387-b503-cc1f8272d9fa\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"b20c490e-300a-4a8e-b3e1-66500c219349\",\"metadata\":{},\"hash\":\"+kZEP3iNoVn+7Eo1YDwL2xXJqCE5n87RVMQS1RhJAJc=\"},\"NEXT\":{\"nodeId\":\"3d15798a-c543-44a3-943d-ac77520e94c3\",\"metadata\":{},\"hash\":\"yJpaUa3SHVBTCvftcU/JyE51VmcC7KHhlQE6NoIbde8=\"}},\"hash\":\"dXrP/enlS0BQH4l3HQCOjPHTW6ehsS6YxwgPQOajLsc=\",\"text\":\"The second argument must be a string or a list of lists (this second case is not recommended). The search function does not search for substrings. Can be a single numerical value. Can be a list of values. The search function searches for each item on the list. To search for a list or a full string give the list or string as a single element list such as [\\\"abc\\\"] to search for the string \\\"abc\\\" (See Example 9) or [[6,7,8]] to search for the list [6,7,8]. Without the extra brackets, search looks separately for each item in the list. If match_value is boolean then search returns undef. string_or_vector The string or vector to search for matches. If match_value is a string then this should be a string and the string is searched for individual character matches to the characters in match_value If this is a list of lists, v=[[a0,a1,a2...],[b0,b1,b2,...],[c0,c1,c2,...],...] then search looks only at one index position of the sublists. By default this is position 0, so the search looks only at a0, b0, c0, etc. The index_col_num parameter changes which index is searched. If match_value is a string and this parameter is a list of lists then the characters of the string are tested against the appropriate index entry in the list of lists. However, if any characters fail to find a match a warning message is printed and that return value is excluded from the output (if num_returns_per_match is 1). This means that the length of the output is unpredictable. num_returns_per_match (default: 1) By default, search only looks for one match per element of match_value to return as a list of indices If num_returns_per_match > 1, search returns a list of lists of up to num_returns_per_match index values for each element of match_value. See Example 8 below. If num_returns_per_match = 0, search returns a list of lists of all matching index values for each element of match_value. See Example 6 below. index_col_num (default: 0) As noted above, when searching a list of lists, search looks only at one index position of each sublist. That index position is specified by\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"3d15798a-c543-44a3-943d-ac77520e94c3":{"__data__":"{\"id_\":\"3d15798a-c543-44a3-943d-ac77520e94c3\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"281c1368-e034-4387-b503-cc1f8272d9fa\",\"metadata\":{},\"hash\":\"dXrP/enlS0BQH4l3HQCOjPHTW6ehsS6YxwgPQOajLsc=\"},\"NEXT\":{\"nodeId\":\"730f5ed3-e9e2-4600-b2ac-41943876494b\",\"metadata\":{},\"hash\":\"yFZFs82wrwfA7Fvgcic54+WttHdvs630vfnlVJrvU6w=\"}},\"hash\":\"yJpaUa3SHVBTCvftcU/JyE51VmcC7KHhlQE6NoIbde8=\",\"text\":\"That index position is specified by index_col_num. See Example 5 below for a simple usage example. Search Usage Examples See example023.scad included with OpenSCAD for a renderable example. Index values return as list Example Code Result 1 search(\\\"a\\\",\\\"abcdabcd\\\"); [0] 2 search(\\\"e\\\",\\\"abcdabcd\\\"); [] 3 search(\\\"a\\\",\\\"abcdabcd\\\",0); [[0,4]] 4 data=[ [\\\"a\\\",1],[\\\"b\\\",2],[\\\"c\\\",3],[\\\"d\\\",4],[\\\"a\\\",5],[\\\"b\\\",6],[\\\"c\\\",7],[\\\"d\\\",8],[\\\"e\\\",9] ]; search(\\\"a\\\", data, num_returns_per_match=0); [[0,4]] (see also Example 6 below) Search on different column; return Index values Example 5: data= [ [\\\"a\\\",1],[\\\"b\\\",2],[\\\"c\\\",3],[\\\"d\\\",4],[\\\"a\\\",5],[\\\"b\\\",6],[\\\"c\\\",7],[\\\"d\\\",8],[\\\"e\\\",3] ]; echo(search(3, data));    // Searches index 0, so it doesn't find anything echo(search(3, data, num_returns_per_match=0, index_col_num=1)); Outputs: ECHO: [] ECHO: [2, 8] Search on list of values Example 6: Return all matches per search vector element. data= [ [\\\"a\\\",1],[\\\"b\\\",2],[\\\"c\\\",3],[\\\"d\\\",4],[\\\"a\\\",5],[\\\"b\\\",6],[\\\"c\\\",7],[\\\"d\\\",8],[\\\"e\\\",9] ]; search(\\\"abc\\\", data, num_returns_per_match=0); Returns: [[0,4],[1,5],[2,6]] Example 7: Return first match per search vector element; special case return vector. data= [ [\\\"a\\\",1],[\\\"b\\\",2],[\\\"c\\\",3],[\\\"d\\\",4],[\\\"a\\\",5],[\\\"b\\\",6],[\\\"c\\\",7],[\\\"d\\\",8],[\\\"e\\\",9] ]; search(\\\"abc\\\", data, num_returns_per_match=1); Returns: [0,1,2] Example 8: Return first two matches per search vector element; vector of vectors.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"730f5ed3-e9e2-4600-b2ac-41943876494b":{"__data__":"{\"id_\":\"730f5ed3-e9e2-4600-b2ac-41943876494b\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"3d15798a-c543-44a3-943d-ac77520e94c3\",\"metadata\":{},\"hash\":\"yJpaUa3SHVBTCvftcU/JyE51VmcC7KHhlQE6NoIbde8=\"},\"NEXT\":{\"nodeId\":\"1195edd1-6f4c-4cf9-bf92-03b84af32b09\",\"metadata\":{},\"hash\":\"RsKm2hwS77ODwpJGSLH4vhi1jNHH8h7L65EG8kEGbLw=\"}},\"hash\":\"yFZFs82wrwfA7Fvgcic54+WttHdvs630vfnlVJrvU6w=\",\"text\":\"Example 8: Return first two matches per search vector element; vector of vectors. data= [ [\\\"a\\\",1],[\\\"b\\\",2],[\\\"c\\\",3],[\\\"d\\\",4],[\\\"a\\\",5],[\\\"b\\\",6],[\\\"c\\\",7],[\\\"d\\\",8],[\\\"e\\\",9] ]; search(\\\"abce\\\", data, num_returns_per_match=2); Returns: [[0,4],[1,5],[2,6],[8]] Search on list of strings Example 9: lTable2=[ [\\\"cat\\\",1],[\\\"b\\\",2],[\\\"c\\\",3],[\\\"dog\\\",4],[\\\"a\\\",5],[\\\"b\\\",6],[\\\"c\\\",7],[\\\"d\\\",8],[\\\"e\\\",9],[\\\"apple\\\",10],[\\\"a\\\",11] ]; lSearch2=[\\\"b\\\",\\\"zzz\\\",\\\"a\\\",\\\"c\\\",\\\"apple\\\",\\\"dog\\\"]; l2=search(lSearch2,lTable2); echo(str(\\\"Default list string search (\\\",lSearch2,\\\"): \\\",l2)); Returns ECHO: \\\"Default list string search ([\\\"b\\\", \\\"zzz\\\", \\\"a\\\", \\\"c\\\", \\\"apple\\\", \\\"dog\\\"]): [1, [], 4, 2, 9, 3]\\\" Getting the right results // workout which vectors get the results v=[ [\\\"O\\\",2],[\\\"p\\\",3],[\\\"e\\\",9],[\\\"n\\\",4],[\\\"S\\\",5],[\\\"C\\\",6],[\\\"A\\\",7],[\\\"D\\\",8] ]; // echo(v[0]);                    // -> [\\\"O\\\",2] echo(v[1]);                                     // -> [\\\"p\\\",3] echo(v[1][0],v[1][1]);                          // -> \\\"p\\\",3 echo(search(\\\"p\\\",v));                            // find \\\"p\\\" -> [1] echo(search(\\\"p\\\",v)[0]);                         // -> 1 echo(search(9,v,0,1));                          // find  9  -> [2] echo(v[search(9,v,0,1)[0]]);                    // -> [\\\"e\\\",9] echo(v[search(9,v,0,1)[0]][0]);                 // -> \\\"e\\\" echo(v[search(9,v,0,1)[0]][1]);                 // -> 9\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1195edd1-6f4c-4cf9-bf92-03b84af32b09":{"__data__":"{\"id_\":\"1195edd1-6f4c-4cf9-bf92-03b84af32b09\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"730f5ed3-e9e2-4600-b2ac-41943876494b\",\"metadata\":{},\"hash\":\"yFZFs82wrwfA7Fvgcic54+WttHdvs630vfnlVJrvU6w=\"},\"NEXT\":{\"nodeId\":\"d3fccd4b-6f56-49f0-b87c-d04920bfc069\",\"metadata\":{},\"hash\":\"8kXfSBudYRo8+8nOK1f9uhjpBz29+HlUCo4PYK7Z5oQ=\"}},\"hash\":\"RsKm2hwS77ODwpJGSLH4vhi1jNHH8h7L65EG8kEGbLw=\",\"text\":\"echo(v[search(\\\"p\\\",v,1,0)[0]][1]);               // -> 3 echo(v[search(\\\"p\\\",v,1,0)[0]][0]);               // -> \\\"p\\\" echo(v[search(\\\"d\\\",v,1,0)[0]][0]);               // \\\"d\\\" not found -> undef echo(v[search(\\\"D\\\",v,1,0)[0]][1]);               // -> 8 OpenSCAD Version version() and version_num() returns the OpenSCAD version number. The version() function returns the OpenSCAD version as a vector of three numbers, e.g. [2011, 9, 23] The version_num() function returns the OpenSCAD version as a number, e.g. 20110923 parent_module(n) and $parent_modules $parent_modules contains the number of modules in the instantiation stack. parent_module(i) returns the name of the module i levels above the current module in the instantiation stack. The stack is independent of where the modules are defined. It's where they're instantiated that counts. This can, for example, be used to build a BOM (Bill Of Material). Example: module top() { children(); } module middle() { children(); } top() middle() echo(parent_module(0)); // prints \\\"middle\\\" top() middle() echo(parent_module(1)); // prints \\\"top\\\" assert [Note: Requires version 2019.05] see also Assertion (software development) Assert evaluates a logical expression. If the expression evaluates to false, the generation of the preview/render is stopped, and an error condition is reported via the console. The report consists of a string representation of the expression and an additional string (optional) that is specified in the assert command. assert(condition); assert(condition, message); Parameters condition Expression. The expression to be evaluated as check for the assertion. message String. Optional message to be output in case the assertion failed. Example The simplest example is a simple assert(false);, e.g. in a file named assert_example1.scad. cube(); assert(false); sphere();  // ERROR: Assertion 'false' failed in file assert_example1.scad, line 2\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d3fccd4b-6f56-49f0-b87c-d04920bfc069":{"__data__":"{\"id_\":\"d3fccd4b-6f56-49f0-b87c-d04920bfc069\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"1195edd1-6f4c-4cf9-bf92-03b84af32b09\",\"metadata\":{},\"hash\":\"RsKm2hwS77ODwpJGSLH4vhi1jNHH8h7L65EG8kEGbLw=\"},\"NEXT\":{\"nodeId\":\"39aacd13-b81c-48f1-afc1-7a224ed171d8\",\"metadata\":{},\"hash\":\"7uICXjVDpOJS81rDftRSKo2/ms9sWXj8nXvBU4h4jqU=\"}},\"hash\":\"8kXfSBudYRo8+8nOK1f9uhjpBz29+HlUCo4PYK7Z5oQ=\",\"text\":\"// ERROR: Assertion 'false' failed in file assert_example1.scad, line 2 This example has little use, but the simple assert(false); can be used in code sections that should be unreachable. Checking parameters A useful example is checking the validity of input parameters: module row(cnt = 3){ // Count has to be a positive integer greater 0 assert(cnt > 0); for (i = [1 : cnt]) { translate([i * 2, 0, 0]) sphere(); } } row(0); // ERROR: Assertion '(cnt > 0)' failed in file assert_example2.scad, line 3 Adding message When writing a library, it could be useful to output additional information to the user in case of an failed assertion. module row(cnt = 3){ assert(cnt > 0, \\\"Count has to be a positive integer greater 0\\\"); for(i = [1 : cnt]) { translate([i * 2, 0, 0]) sphere(); } } row(0); // ERROR: Assertion '(cnt > 0)': \\\"Count has to be a positive integer greater 0\\\" failed in file assert_example3.scad, line 2 Using assertions in function Assert returns its children, so when using it in a function you can write function f(a, b) = assert(a < 0, \\\"wrong a\\\") // assert input assert(b > 0, \\\"wrong b\\\") // assert input let (c = a + b) // derive a new value from input assert(c != 0, \\\"wrong c\\\") // assert derived value a * b; // calculate Chapter 7 -- User-Defined Functions and Modules OpenSCAD User Manual/The OpenSCAD Language Introduction Users can extend the language by defining their own modules and functions. This allows grouping portions of script for easy reuse with different values. Well chosen names also help document your script. OpenSCAD provides: functions, which return values. modules, which perform actions, but do not return values. OpenSCAD calculates the value of variables at compile-time, not run-time. The last variable assignment within a scope applies everywhere in that scope. It also applies to any inner scopes, or children, thereof. See Scope of variables for more details.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"39aacd13-b81c-48f1-afc1-7a224ed171d8":{"__data__":"{\"id_\":\"39aacd13-b81c-48f1-afc1-7a224ed171d8\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"d3fccd4b-6f56-49f0-b87c-d04920bfc069\",\"metadata\":{},\"hash\":\"8kXfSBudYRo8+8nOK1f9uhjpBz29+HlUCo4PYK7Z5oQ=\"},\"NEXT\":{\"nodeId\":\"ca621dad-b5d5-439d-8de4-1d027acd16c9\",\"metadata\":{},\"hash\":\"LjYPZeGVjb9EnT4wtQa5TcFWfujT5PQYH+dqF7WbDCo=\"}},\"hash\":\"7uICXjVDpOJS81rDftRSKo2/ms9sWXj8nXvBU4h4jqU=\",\"text\":\"See Scope of variables for more details. It may be helpful to think of them as override-able constants rather than as variables. For functions and modules OpenSCAD makes copies of pertinent portions of the script for each use. Each copy has its own scope, which contains fixed values for variables and expressions unique to that instance. The name of functions and modules is case sensitive, therefore test() and TEST() refer to different functions/modules. Scope Modules and functions can be defined within a module definition, where they are visible only in the scope of that module. For example function parabola(f,x) = ( 1/(4*f) ) * x*x; module plotParabola(f,wide,steps=1) { function y(x) = parabola(f,x); module plot(x,y) { translate([x,y]) circle(1,$fn=12); } xAxis=[-wide/2:steps:wide/2]; for (x=xAxis) plot(x, y(x)); } color(\\\"red\\\")  plotParabola(10, 100, 5); color(\\\"blue\\\") plotParabola(4,  60,  2); The function y() and module plot() cannot be called in the global scope. Functions Functions operate on values to calculate and return new values. function definition function name ( parameters ) = value ; name Your name for this function. A meaningful name is helpful later. parameters Zero or more arguments. Parameters can be assigned default values, to use in case they are omitted in the call. Parameter names are local and do not conflict with external variables of the same name. value an expression that calculates a value. This value can be a vector. function use When used, functions are treated as values, and do not themselves end with a semi-colon ';'. Example 3 // example 1  function func0() = 5; function func1(x=3) = 2*x+1; function func2() = [1,2,3,4]; function func3(y=7) = (y==7) ? 5 : 2 ; function func4(p0,p1,p2,p3) = [p0,p1,p2,p3];\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"ca621dad-b5d5-439d-8de4-1d027acd16c9":{"__data__":"{\"id_\":\"ca621dad-b5d5-439d-8de4-1d027acd16c9\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"39aacd13-b81c-48f1-afc1-7a224ed171d8\",\"metadata\":{},\"hash\":\"7uICXjVDpOJS81rDftRSKo2/ms9sWXj8nXvBU4h4jqU=\"},\"NEXT\":{\"nodeId\":\"56aacd46-4174-4ab4-aeb3-5fb891c174ed\",\"metadata\":{},\"hash\":\"ad/+kt+wuEBRieZ8shXLEWGJC1aedbheDwFAZ3mawyw=\"}},\"hash\":\"LjYPZeGVjb9EnT4wtQa5TcFWfujT5PQYH+dqF7WbDCo=\",\"text\":\"echo(func0());            // 5 a =   func1();            // 7 b =   func1(5);           // 11 echo(func2());            // [1, 2, 3, 4] echo(func3(2), func3());  // 2, 5  z = func4(func0(), func1(), func2(), func3()); //  [5, 7, [1, 2, 3, 4], 5]  translate([0, -4*func0(), 0]) cube([func0(), 2*func0(), func0()]); // same as translate([0,-20,0]) cube([5,10,5]); // example 2  creates for() range to give desired no of steps to cover range  function steps(start, no_steps, end) = [start : (end-start)/(no_steps-1) : end];  echo(steps(10, 3, 5));                // [10 : -2.5 : 5] for (i = steps(10, 3, 5))  echo(i);   //  10 7.5 5  echo(steps(10, 3, 15));               // [10 : 2.5 : 15] for (i = steps(10, 3, 15)) echo(i);   // 10 12.5 15  echo(steps(0, 5, 5));                // [0 : 1.25 : 5] for (i = steps(0, 5, 5))   echo(i);  // 0 1.25 2.5 3.75 5 // example 3     rectangle with top pushed over, keeping same y  function rhomboid(x=1, y=1, angle=90) = [[0,0],[x,0], [x+x*cos(angle)/sin(angle),y], [x*cos(angle)/sin(angle),y]];  echo (v1); v1 = rhomboid(10,10,35);  // [[0, 0], // [10, 0], // [24.2815, 10], // [14.2815, 10]] polygon(v1);\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"56aacd46-4174-4ab4-aeb3-5fb891c174ed":{"__data__":"{\"id_\":\"56aacd46-4174-4ab4-aeb3-5fb891c174ed\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"ca621dad-b5d5-439d-8de4-1d027acd16c9\",\"metadata\":{},\"hash\":\"LjYPZeGVjb9EnT4wtQa5TcFWfujT5PQYH+dqF7WbDCo=\"},\"NEXT\":{\"nodeId\":\"862228a2-3692-494a-a2fd-72e71e8f5455\",\"metadata\":{},\"hash\":\"AfCujYgozV5qCVqklAXl4WcjvhdiPaJ5Xc52AdYt2cc=\"}},\"hash\":\"ad/+kt+wuEBRieZ8shXLEWGJC1aedbheDwFAZ3mawyw=\",\"text\":\"// [14.2815, 10]] polygon(v1); polygon(rhomboid(10,10,35));         // alternate //performing the same action with a module  module parallelogram(x=1,y=1,angle=90) {polygon([[0,0],[x,0], [x+x*cos(angle)/sin(angle),y], [x*cos(angle)/sin(angle),y]]);};  parallelogram(10,10,35); You can also use the let statement: function get_square_triangle_perimeter(p1, p2) = let (hypotenuse = sqrt(p1*p1+p2*p2)) p1 + p2 + hypotenuse; It can be used to store values in recursive functions. See the wikipedia page for more information on the general concept. Recursive functions Recursive function calls are supported. Using the Conditional Operator \\\"... ? ... : ... \\\", it is possible to ensure the recursion is terminated. // recursion example: add all integers up to n function add_up_to(n) = ( n==0 ? 0 : n + add_up_to(n-1) ); There is a built-in recursion limit to prevent an application crash (a few thousands). If the limit is hit, you get an error like: ERROR: Recursion detected calling function ... . For all tail-recursive functions that calls itself, OpenSCAD is able to eliminate internally the recursion transforming it in an iterative loop. The previous example code is not a tail call as an \\\"add\\\" operation need to be calculated after calling. But the following is entitled to tail-recursion elimination: // tail-recursion elimination example: add all integers up to n function add_up_to(n, sum=0) = n==0 ? sum : add_up_to(n-1, sum+n);  echo(sum=add_up_to(100000)); // ECHO: sum = 5.00005e+009 Tail-recursion elimination allows much higher recursion limits (up to 1000000). Function Literals [Note: Requires version 2021.01] Function literals are expressions that define functions, other names for this are lambdas or closures. function literal function (x) x + x Function literals can be assigned to variables and passed around like any value.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"862228a2-3692-494a-a2fd-72e71e8f5455":{"__data__":"{\"id_\":\"862228a2-3692-494a-a2fd-72e71e8f5455\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"56aacd46-4174-4ab4-aeb3-5fb891c174ed\",\"metadata\":{},\"hash\":\"ad/+kt+wuEBRieZ8shXLEWGJC1aedbheDwFAZ3mawyw=\"},\"NEXT\":{\"nodeId\":\"3729abe4-49fd-4dca-a497-b0109118fd23\",\"metadata\":{},\"hash\":\"sOFyEatrkBASAQ/vKf819Y4Q2Y6xlgrRlUXA0s/NMvk=\"}},\"hash\":\"AfCujYgozV5qCVqklAXl4WcjvhdiPaJ5Xc52AdYt2cc=\",\"text\":\"Function literals can be assigned to variables and passed around like any value. Calling the function uses the normal function call syntax with parenthesis. func = function (x) x * x; echo(func(5)); // ECHO: 25 It's possible to define functions that return functions. Unbound variables are captured by lexical scope. a = 1; selector = function (which) which == \\\"add\\\" ? function (x) x + x + a : function (x) x * x + a;  echo(selector(\\\"add\\\"));     // ECHO: function(x) ((x + x) + a) echo(selector(\\\"add\\\")(5));  // ECHO: 11 echo(selector(\\\"mul\\\"));     // ECHO: function(x) ((x * x) + a) echo(selector(\\\"mul\\\")(5));  // ECHO: 26 Modules Modules can be used to define objects or, using children(), define operators. Once defined, modules are temporarily added to the language. module definition module name ( parameters ) { actions } name Your name for this module. Try to pick something meaningful. parameters Zero or more arguments. Parameters may be assigned default values, to use in case they are omitted in the call. Parameter names are local and do not conflict with external variables of the same name. actions Nearly any statement valid outside a module can be included within a module. This includes the definition of functions and other modules. Such functions and modules can be called only from within the enclosing module. Variables can be assigned, but their scope is limited to within each individual use of the module. There is no mechanism in OpenSCAD for modules to Color bar House return values to the outside. See Scope of variables for more details. Object modules Object modules use one or more primitives, with associated operators, to define new objects. In use, object modules are actions ending with a semi-colon ';'. name ( parameter values ); //example 1  translate([-30,-20,0]) ShowColorBars(Expense);  ColorBreak=[[0,\\\"\\\"], [20,\\\"lime\\\"],  // upper limit of color range [40,\\\"greenyellow\\\"], [60,\\\"yellow\\\"], [75,\\\"LightCoral\\\"], [200,\\\"red\\\"]];\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"3729abe4-49fd-4dca-a497-b0109118fd23":{"__data__":"{\"id_\":\"3729abe4-49fd-4dca-a497-b0109118fd23\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"862228a2-3692-494a-a2fd-72e71e8f5455\",\"metadata\":{},\"hash\":\"AfCujYgozV5qCVqklAXl4WcjvhdiPaJ5Xc52AdYt2cc=\"},\"NEXT\":{\"nodeId\":\"9aaf39bf-24d0-4cff-885f-a5847c61e77f\",\"metadata\":{},\"hash\":\"DZTIv5UrgyDvQ5HS9FDmPtkL2zMt7CG+Q83B4fif7RM=\"}},\"hash\":\"sOFyEatrkBASAQ/vKf819Y4Q2Y6xlgrRlUXA0s/NMvk=\",\"text\":\"[60,\\\"yellow\\\"], [75,\\\"LightCoral\\\"], [200,\\\"red\\\"]]; Expense=[16,20,25,85,52,63,45];  module ColorBar(value,period,range){  // 1 color on 1 bar RangeHi = ColorBreak[range][0]; RangeLo = ColorBreak[range-1][0]; color( ColorBreak[range][1] ) translate([10*period,0,RangeLo]) if (value > RangeHi)      cube([5,2,RangeHi-RangeLo]); else if (value > RangeLo) cube([5,2,value-RangeLo]); } module ShowColorBars(values){ for (month = [0:len(values)-1], range = [1:len(ColorBreak)-1]) ColorBar(values[month],month,range); } //example 2 module house(roof=\\\"flat\\\",paint=[1,0,0]) { color(paint) if(roof==\\\"flat\\\") { translate([0,-1,0]) cube(); } else if(roof==\\\"pitched\\\") { rotate([90,0,0]) linear_extrude(height=1) polygon(points=[[0,0],[0,1],[0.5,1.5],[1,1],[1,0]]); } else if(roof==\\\"domical\\\") { translate([0,-1,0]){ translate([0.5,0.5,1]) sphere(r=0.5,$fn=20); cube(); } } } house(); translate([2,0,0]) house(\\\"pitched\\\"); translate([4,0,0]) house(\\\"domical\\\",[0,1,0]); translate([6,0,0]) house(roof=\\\"pitched\\\",paint=[0,0,1]); translate([0,3,0]) house(paint=[0,0,0],roof=\\\"pitched\\\"); translate([2,3,0]) house(roof=\\\"domical\\\"); translate([4,3,0]) house(paint=[0,0.5,0.5]); //example 3  element_data = [[0,\\\"\\\",\\\"\\\",0],  // must be in order [1,\\\"Hydrogen\\\",\\\"H\\\",1.008],   // indexed via atomic number\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"9aaf39bf-24d0-4cff-885f-a5847c61e77f":{"__data__":"{\"id_\":\"9aaf39bf-24d0-4cff-885f-a5847c61e77f\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"3729abe4-49fd-4dca-a497-b0109118fd23\",\"metadata\":{},\"hash\":\"sOFyEatrkBASAQ/vKf819Y4Q2Y6xlgrRlUXA0s/NMvk=\"},\"NEXT\":{\"nodeId\":\"2fe42f7b-6af2-49ae-9506-74aa15996bdc\",\"metadata\":{},\"hash\":\"KKYE9udh1b8lSumOlpA09r6PHXRVSnaF8WPBGNixYDA=\"}},\"hash\":\"DZTIv5UrgyDvQ5HS9FDmPtkL2zMt7CG+Q83B4fif7RM=\",\"text\":\"[1,\\\"Hydrogen\\\",\\\"H\\\",1.008],   // indexed via atomic number [2,\\\"Helium\\\",  \\\"He\\\",4.003]   // redundant atomic number to preserve your sanity later ];  Hydrogen = 1; Helium   = 2;  module coaster(atomic_number){ element     = element_data[atomic_number][1]; symbol      = element_data[atomic_number][2]; atomic_mass = element_data[atomic_number][3]; //rest of script } Use all children Use only the first child, multiple times Separate action for each child Operator Modules Use of children() allows modules to act as operators applied to any or all of the objects within this module instantiation. In use, operator modules do not end with a semi-colon. name ( parameter values ){scope of operator} Children Objects are indexed via integers from 0 to $children-1. OpenSCAD sets $children to the total number of objects within the scope. Objects grouped into a sub scope are treated as one child. See example of separate children below and Scope of variables. Note that children(), echo() and empty block statements (including ifs) count as $children objects, even if no geometry is present (as of v2017.12.23). children();                         all children children(index);                    value or variable to select one child children([start : step : end]);     select from start to end incremented by step children([start : end]);            step defaults to 1 or -1 children([vector]);                 selection of several children Deprecated child() module Up to release 2013.06 the now deprecated child() module was used instead. This can be translated to the new children() according to the table: up to 2013.06 2014.03 and later child() children(0) child(x) children(x) for (a = [0:$children-1]) child(a) children([0:$children-1]) Examples //Use all children  module move(x=0,y=0,z=0,rx=0,ry=0,rz=0) { translate([x,y,z])rotate([rx,ry,rz]) children(); }  move(10)           cube(10,true); move(-10)          cube(10,true);\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2fe42f7b-6af2-49ae-9506-74aa15996bdc":{"__data__":"{\"id_\":\"2fe42f7b-6af2-49ae-9506-74aa15996bdc\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"9aaf39bf-24d0-4cff-885f-a5847c61e77f\",\"metadata\":{},\"hash\":\"DZTIv5UrgyDvQ5HS9FDmPtkL2zMt7CG+Q83B4fif7RM=\"},\"NEXT\":{\"nodeId\":\"1ece8add-49e5-4669-a042-ea44754423ec\",\"metadata\":{},\"hash\":\"W+n0V9OEIWclBTfgLjjBsqVfQ2H8RTdbvkB6166h1ko=\"}},\"hash\":\"KKYE9udh1b8lSumOlpA09r6PHXRVSnaF8WPBGNixYDA=\",\"text\":\"move(-10)          cube(10,true); move(z=7.07, ry=45)cube(10,true); move(z=-7.07,ry=45)cube(10,true); //Use only the first child, multiple times  module lineup(num, space) { for (i = [0 : num-1]) translate([ space*i, 0, 0 ]) children(0); } lineup(5, 65){ sphere(30);cube(35);} //Separate action for each child  module SeparateChildren(space){ for ( i= [0:1:$children-1])   // step needed in case $children < 2 translate([i*space,0,0]) {children(i);text(str(i));} }  SeparateChildren(-20){ cube(5);              // 0 sphere(5);            // 1 translate([0,20,0]){  // 2 cube(5); sphere(5); } cylinder(15);         // 3 cube(8,true);         // 4 } translate([0,40,0])color(\\\"lightblue\\\") SeparateChildren(20){cube(3,true);} Multiple ranges Rotary Clusters //Multiple ranges module MultiRange(){ color(\\\"lightblue\\\") children([0:1]); color(\\\"lightgreen\\\")children([2:$children-2]); color(\\\"lightpink\\\") children($children-1); }  MultiRange() { cube(5);              // 0 sphere(5);            // 1 translate([0,20,0]){  // 2 cube(5); sphere(5); } cylinder(15);         // 3 cube(8,true);         // 4 } Further Module Examples Objects module arrow(){ cylinder(10); cube([4,.5,3],true); cube([.5,4,3],true); translate([0,0,10]) cylinder(4,2,0,true); }  module cannon(){ difference(){union() {sphere(10);cylinder(40,10,8);} cylinder(41,4,4); } }  module base(){ difference(){\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1ece8add-49e5-4669-a042-ea44754423ec":{"__data__":"{\"id_\":\"1ece8add-49e5-4669-a042-ea44754423ec\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"2fe42f7b-6af2-49ae-9506-74aa15996bdc\",\"metadata\":{},\"hash\":\"KKYE9udh1b8lSumOlpA09r6PHXRVSnaF8WPBGNixYDA=\"},\"NEXT\":{\"nodeId\":\"1365eb78-f5e3-45f9-9b10-490f03d2beca\",\"metadata\":{},\"hash\":\"2Wxj5Dj3HeRcG2tclmdFWr9hQciNMcDOKEP9e7bkNXs=\"}},\"hash\":\"W+n0V9OEIWclBTfgLjjBsqVfQ2H8RTdbvkB6166h1ko=\",\"text\":\"} }  module base(){ difference(){ cube([40,30,20],true); translate([0,0,5])  cube([50,20,15],true); } } Operators module aim(elevation,azimuth=0) { rotate([0,0,azimuth]) { rotate([0,90-elevation,0]) children(0); children([1:1:$children-1]);   // step needed in case $children < 2 } }  aim(30,20)arrow(); aim(35,270)cannon(); aim(15){cannon();base();} module RotaryCluster(radius=30,number=8) for (azimuth =[0:360/number:359]) rotate([0,0,azimuth]) translate([radius,0,0]) { children(); translate([40,0,30]) text(str(azimuth)); }  RotaryCluster(200,7) color(\\\"lightgreen\\\") aim(15) {cannon();base();} rotate([0,0,110]) RotaryCluster(100,4.5) aim(35)cannon(); color(\\\"LightBlue\\\")aim(55,30){cannon();base();} Recursive Modules Like functions, modules may contain recursive calls. However, there is no tail-recursion elimination for recursive modules. The code below generates a crude model of a tree. Each tree branch is itself a modified version of the tree and produced by recursion. Be careful to keep the recursion depth (branching) n below 7 as the number of primitives and the preview time grow exponentially. A simple tree created with a recursive OpenSCAD module module simple_tree(size, dna, n) { if (n > 0) { // trunk cylinder(r1=size/10, r2=size/12, h=size, $fn=24); // branches translate([0,0,size]) for(bd = dna) { angx = bd[0]; angz = bd[1]; scal = bd[2]; rotate([angx,0,angz]) simple_tree(scal*size, dna, n-1); } } else // leaves color(\\\"green\\\") scale([1,1,3])\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"1365eb78-f5e3-45f9-9b10-490f03d2beca":{"__data__":"{\"id_\":\"1365eb78-f5e3-45f9-9b10-490f03d2beca\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"1ece8add-49e5-4669-a042-ea44754423ec\",\"metadata\":{},\"hash\":\"W+n0V9OEIWclBTfgLjjBsqVfQ2H8RTdbvkB6166h1ko=\"},\"NEXT\":{\"nodeId\":\"3b675a71-79b0-425f-a44e-347bba4c3938\",\"metadata\":{},\"hash\":\"6Td7gV+CYRSYIU4zJvbyUtsCEzRoEViR1UJfu8yiUyw=\"}},\"hash\":\"2Wxj5Dj3HeRcG2tclmdFWr9hQciNMcDOKEP9e7bkNXs=\",\"text\":\"} else // leaves color(\\\"green\\\") scale([1,1,3]) translate([0,0,size/6]) rotate([90,0,0]) cylinder(r=size/6,h=size/10); } // dna is a list of branching data bd of the tree: //      bd[0] - inclination of the branch //      bd[1] - Z rotation angle of the branch //      bd[2] - relative scale of the branch dna = [ [12,  80, 0.85], [55,    0, 0.6], [62, 125, 0.6], [57, -125, 0.6] ]; simple_tree(50, dna, 5); Another example of recursive module may be found in Tips and Tricks Overwriting built-in modules It is possible to overwrite the built-in modules. A simple, but pointless example would be: module sphere(){ square(); } sphere(); Note that the built-in sphere module can not be called when over written. A more sensible way to use this language feature is to overwrite the 3D primitives with extruded 2D-primitives. This allows additional to customize the default parameters and to add additional parameters. Overwriting built-in functions It is possible to overwrite the built-in functions. Source Code Console output echo (sin(1)); function sin() = true; echo (sin(1)); Compiling design (CSG Tree generation)... ECHO: true ECHO: true Compiling design (CSG Products generation)... Chapter 8 -- Debugging aids OpenSCAD User Manual/The OpenSCAD Language Modifier characters are used to change the appearance or behaviours of child nodes. They are particularly useful in debugging where they can be used to highlight specific objects, or include or exclude them from rendering. Advanced concept As OpenSCAD uses different libraries to implement capabilities this can introduce some inconsistencies to the F5 preview behaviour of transformations. Traditional transforms (translate, rotate, scale, mirror & multimatrix) are performed using OpenGL in preview, while other more advanced transforms, such as resize, perform a CGAL operation, behaving like a CSG operation affecting the underlying object, not just transforming it. In particular this can affect\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"3b675a71-79b0-425f-a44e-347bba4c3938":{"__data__":"{\"id_\":\"3b675a71-79b0-425f-a44e-347bba4c3938\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"1365eb78-f5e3-45f9-9b10-490f03d2beca\",\"metadata\":{},\"hash\":\"2Wxj5Dj3HeRcG2tclmdFWr9hQciNMcDOKEP9e7bkNXs=\"},\"NEXT\":{\"nodeId\":\"08bf8f76-de8f-427b-b88d-dc23f1f9c205\",\"metadata\":{},\"hash\":\"OJJ4WEjQkEa72+4omwTjTjkw0/R08q/Q6NwucQGYsto=\"}},\"hash\":\"6Td7gV+CYRSYIU4zJvbyUtsCEzRoEViR1UJfu8yiUyw=\",\"text\":\"In particular this can affect the display of modifier characters, specifically \\\"#\\\" and \\\"%\\\", where the highlight may not display intuitively, such as highlighting the pre-resized object, but highlighting the post-scaled object. Note: The color changes triggered by character modifiers appear only in \\\"Compile\\\" mode, not \\\"Compile and Render (CGAL)\\\" mode. (As per the color section.) Background Modifier Ignore this subtree for the normal rendering process and draw it in transparent gray (all transformations are still applied to the nodes in this tree). Because the marked subtree is completely ignored, it might have unexpected effects in case it's used, for example, with the first object in a difference(). In that case this object is rendered in transparent gray, but it is not used as the base for the difference()! Usage % { ... } Example difference() { cylinder (h = 12, r=5, center = true, $fn=100); // first object to be subtracted rotate ([90,0,0]) cylinder (h = 15, r=1, center = true, $fn=100); // second object to be subtracted %rotate ([0,90,0]) cylinder (h = 15, r=3, center = true, $fn=100); } Example Output Output without the modifier. Output with modifier added. Rendered Model. Debug Modifier Use this subtree as usual in the rendering process but also draw it unmodified in transparent pink. Usage # { ... } Example difference() { // start objects cylinder (h = 12, r=5, center = true, $fn=100); // first object to be subtracted #rotate ([90,0,0]) cylinder (h = 15, r=1, center = true, $fn=100); // second object to be subtracted #rotate ([0,90,0]) cylinder (h = 15, r=3, center = true, $fn=100); } Example Output Output without the modifier. Output with modifier added. Root Modifier Ignore the rest of the design and use this subtree as design root. Usage ! { ... } Example difference() { cube(10, center = true);\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"08bf8f76-de8f-427b-b88d-dc23f1f9c205":{"__data__":"{\"id_\":\"08bf8f76-de8f-427b-b88d-dc23f1f9c205\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"3b675a71-79b0-425f-a44e-347bba4c3938\",\"metadata\":{},\"hash\":\"6Td7gV+CYRSYIU4zJvbyUtsCEzRoEViR1UJfu8yiUyw=\"},\"NEXT\":{\"nodeId\":\"5c1033aa-63cf-4141-b855-22e6531dd487\",\"metadata\":{},\"hash\":\"cxK+hjekBxsr49Cvjk/zbHPSzGDTWoTncPjkhe9jpoY=\"}},\"hash\":\"OJJ4WEjQkEa72+4omwTjTjkw0/R08q/Q6NwucQGYsto=\",\"text\":\"{ ... } Example difference() { cube(10, center = true); translate([0, 0, 5]) { !rotate([90, 0, 0]) { #cylinder(r = 2, h = 20, center = true, $fn = 40); } } } Example Output Output without the modifier. Output with modifier added. As shown in the example output with the root modifier active, the rotate() is executed as it's part of the subtree marked with the root modifier, but the translate() has no effect. Disable Modifier Simply ignore this entire subtree. Usage * { ... } Example difference() { cube(10, center = true); translate([0, 0, 5]) { rotate([0, 90, 0]) { cylinder(r = 2, h = 20, center = true, $fn = 40); } *rotate([90, 0, 0]) { #cylinder(r = 2, h = 20, center = true, $fn = 40); } } } Example Output Output without the modifier. Output with modifier added. The disable modifier allows you to comment out one or multiple subtrees. Compared to using the usual line or multi-line comments, it's aware of the hierarchical structure, which makes it easier to disable even larger trees without the need to search for the end of the subtree. Echo Statements see also OpenSCAD User Manual/Other Language Features#Echo Statements This function prints the contents to the compilation window (aka Console). Useful for debugging code. Also see the String function str(). Numeric values are rounded to 5 significant digits. It can be handy to use 'variable=variable' as the expression to easily label the variables, see the example below. Usage examples: my_h=50; my_r=100; echo(\\\"This is a cylinder with h=\\\", my_h, \\\" and r=\\\", my_r); echo(my_h=my_h,my_r=my_r); // shortcut cylinder(h=my_h, r=my_r); Shows in the Console as ECHO: \\\"This is a cylinder with h=\\\", 50, \\\" and r=\\\", 100\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"5c1033aa-63cf-4141-b855-22e6531dd487":{"__data__":"{\"id_\":\"5c1033aa-63cf-4141-b855-22e6531dd487\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"08bf8f76-de8f-427b-b88d-dc23f1f9c205\",\"metadata\":{},\"hash\":\"OJJ4WEjQkEa72+4omwTjTjkw0/R08q/Q6NwucQGYsto=\"},\"NEXT\":{\"nodeId\":\"3322090d-24b2-4573-b04d-946c5e49d769\",\"metadata\":{},\"hash\":\"+wa3W7kIP0+F5ukthpz8tZR6eMoTl0ok87ez1FpuQNI=\"}},\"hash\":\"cxK+hjekBxsr49Cvjk/zbHPSzGDTWoTncPjkhe9jpoY=\",\"text\":\"ECHO: \\\"This is a cylinder with h=\\\", 50, \\\" and r=\\\", 100 ECHO: my_h = 50, my_r = 100 Chapter 9 -- External libraries and code files OpenSCAD User Manual/The OpenSCAD Language Use and Include For including code from external files in OpenSCAD, there are two commands available: include <filename> acts as if the contents of the included file were written in the including file, and use <filename> imports modules and functions, but does not execute any commands other than those definitions. Library files are searched for in the same folder as the design was open from, or in the library folder of the OpenSCAD installation. You can use a relative path specification to either. If they lie elsewhere you must give the complete path. Newer versions have predefined user libraries, see the OpenSCAD_User_Manual/Libraries page, which also documents a number of library files included in OpenSCAD. Wildcards (*, for e.g. include <MCAD/*.scad>) can not be used to include multiple files. Directory separators Windows and Linux/Mac use different separators for directories. Windows uses \\\\, e.g. directory\\\\file.ext, while the others use /, e.g. directory/file.ext. This could lead to cross platform issues. However OpenSCAD on Windows correctly handles the use of /, so using / in all include or use statements work on all platforms. To access the parent directory ../ can be used under Linux. Variables Scope of variables Using include <filename> allows default variables to be specified in the library. These defaults can be overridden in the main code. An OpenSCAD variable has only one value during the life of the program. When there are multiple assignments it takes the last value, but assigns when the variable is first created. This has an effect when assigning in a library, as any variables that you later use to change the default, must be assigned before the include statement. See the second example below. Overwriting variables Default variables in an include can be overridden, for example lib.scad i=1; k=3; module x() { echo(\\\"hello world\\\"); echo(\\\"i=\\\",i,\\\"j=\\\",j,\\\"k=\\\",k); } hello.scad j=4;\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"3322090d-24b2-4573-b04d-946c5e49d769":{"__data__":"{\"id_\":\"3322090d-24b2-4573-b04d-946c5e49d769\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"5c1033aa-63cf-4141-b855-22e6531dd487\",\"metadata\":{},\"hash\":\"cxK+hjekBxsr49Cvjk/zbHPSzGDTWoTncPjkhe9jpoY=\"},\"NEXT\":{\"nodeId\":\"2b04843d-d46f-4ab8-a475-575f148cde90\",\"metadata\":{},\"hash\":\"Xj7BsEdts9Wq5NufmFoHEXMG7nE/edH7XfEi7yu63ok=\"}},\"hash\":\"+wa3W7kIP0+F5ukthpz8tZR6eMoTl0ok87ez1FpuQNI=\",\"text\":\"} hello.scad j=4; include <lib.scad>; x(); i=5; x(); k=j; x(); Produces the following ECHO: \\\"hello world\\\" ECHO: \\\"i=\\\", 5, \\\"j=\\\", 4, \\\"k=\\\", 4 ECHO: \\\"hello world\\\" ECHO: \\\"i=\\\", 5, \\\"j=\\\", 4, \\\"k=\\\", 4 ECHO: \\\"hello world\\\" ECHO: \\\"i=\\\", 5, \\\"j=\\\", 4, \\\"k=\\\", 4 However, placing j=4; after the include fails, producing ECHO: \\\"hello world\\\" ECHO: \\\"i=\\\", 5, \\\"j=\\\", 4, \\\"k=\\\", undef ECHO: \\\"hello world\\\" ECHO: \\\"i=\\\", 5, \\\"j=\\\", 4, \\\"k=\\\", undef ECHO: \\\"hello world\\\" ECHO: \\\"i=\\\", 5, \\\"j=\\\", 4, \\\"k=\\\", undef Example \\\"Ring-Library\\\" A library file for generating rings might look like this (defining a function and providing an example): ring.scad: module ring(r1, r2, h) { difference() { cylinder(r = r1, h = h); translate([ 0, 0, -1 ]) cylinder(r = r2, h = h+2); } } ring(5, 4, 10); Including the library using include <ring.scad>; rotate([90, 0, 0]) ring(10, 1, 1); would result in the example ring being shown in addition to the rotated ring, but use <ring.scad>; rotate([90, 0, 0]) ring(10, 1, 1); shows only the rotated ring. If using the use function, make sure to place the use statements at top of the file, or at least not within a module! This works fine: // a.scad use <ring.scad>; module a() { ring(); } but this results in an syntax error: //a.scad module a() { use <ring.scad>; ring(); } Nested Include and Use OpenSCAD executes nested calls to include and use.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"2b04843d-d46f-4ab8-a475-575f148cde90":{"__data__":"{\"id_\":\"2b04843d-d46f-4ab8-a475-575f148cde90\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"3322090d-24b2-4573-b04d-946c5e49d769\",\"metadata\":{},\"hash\":\"+wa3W7kIP0+F5ukthpz8tZR6eMoTl0ok87ez1FpuQNI=\"},\"NEXT\":{\"nodeId\":\"4c70bfe7-2993-46e2-85e3-9acad70a4a15\",\"metadata\":{},\"hash\":\"Y5L5i+AV5N3RYE5+5xKCtnSuwptk4Z1H511i29JEwjg=\"}},\"hash\":\"Xj7BsEdts9Wq5NufmFoHEXMG7nE/edH7XfEi7yu63ok=\",\"text\":\"} Nested Include and Use OpenSCAD executes nested calls to include and use. There is one caveat to this, that use brings functions and modules only into the local file context. As a result, nested calls to use have no effect on the environment of the base file; the child use call works in the parent use context, but the modules and functions so imported fall out of context before they are seen by the base context. Importing is achieved by the import() command. [Note: Requires version 2015.03-2] The File >> Open command may be used to insert this command. The file type filter of the Open File dialog may show only OpenSCAD files, but file name can be replaced with a wildcard (e.g. *.stl) to browse to additional file types. import Imports a file for use in the current OpenSCAD model. The file extension is used to determine which type. 3D formats STL (both ASCII and Binary) OFF AMF [Note: Requires version 2019.05] 3MF [Note: Requires version 2019.05] 2D formats DXF SVG [Note: Requires version 2019.05] Other CSG can be imported using include<> or loaded like an SCAD file, PNG can be imported using surface() Parameters <file> A string containing the path to file.:If the give path is not absolute, it is resolved relative to the importing script. Note that when using include<> with a script that uses import(), this is relative to the script doing the include<>. <convexity> An Integer. The convexity parameter specifies the maximum number of front sides (back sides) a ray intersecting the object might penetrate. This parameter is needed only for correctly displaying the object in OpenCSG preview mode and has no effect on the polyhedron rendering. Optional. <layer> For DXF import only, specify a specific layer to import. Optional. import(\\\"example012.stl\\\", convexity=3); import(\\\"D:/Documents and Settings/User/My Documents/Gear.stl\\\", convexity=3); (Windows users must \\\"escape\\\" the backslashes by writing them doubled, or replace the backslashes with forward slashes.)\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"4c70bfe7-2993-46e2-85e3-9acad70a4a15":{"__data__":"{\"id_\":\"4c70bfe7-2993-46e2-85e3-9acad70a4a15\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"2b04843d-d46f-4ab8-a475-575f148cde90\",\"metadata\":{},\"hash\":\"Xj7BsEdts9Wq5NufmFoHEXMG7nE/edH7XfEi7yu63ok=\"},\"NEXT\":{\"nodeId\":\"55fd0f3a-a988-4426-8798-9fcd723cf390\",\"metadata\":{},\"hash\":\"BqKiAfoI91gtoztqPh4a25WL8MnnHe4hWzPW2U4RjfI=\"}},\"hash\":\"Y5L5i+AV5N3RYE5+5xKCtnSuwptk4Z1H511i29JEwjg=\",\"text\":\"slashes.) Read a layer of a 2D DXF file and create a 3D shape. linear_extrude(height = 5, center = true, convexity = 10) import_dxf(file = \\\"example009.dxf\\\", layer = \\\"plate\\\"); Convexity This image shows a 2D shape with a convexity of 4, as the ray indicated in red crosses the 2D shape a maximum of 4 times. The convexity of a 3D shape would be determined in a similar way. Setting it to 10 should work fine for most cases. Notes In the latest version of OpenSCAD, import() is now used for importing both 2D (DXF for extrusion) and 3D (STL) files. If you want to render the imported STL file later, you have to make sure that the STL file is \\\"clean\\\". This means that the mesh has to be manifold and should not contain holes nor self-intersections. If the STL is not clean, it might initially import and preview fine, but then as soon as you attempt to perform computational geometry on it by rendering a combination of it with something else, you might get warnings about it not being manifold, your imported stl might disappear from the output entirely, or you might get errors like: CGAL error in CGAL_Build_PolySet: CGAL ERROR: assertion violation! Expr: check_protocoll == 0 File: /home/don/openscad_deps/mxe/usr/i686-pc-mingw32/include/CGAL/Polyhedron_incremental_builder_3.h Line: 199 or CGAL error in CGAL_Nef_polyhedron3(): CGAL ERROR: assertion violation! Expr: pe_prev->is_border() || !internal::Plane_constructor<Plane>::get_plane(pe_prev->facet(),pe_prev- >facet()->plane()).is_degenerate() File: /home/don/openscad_deps/mxe/usr/i686-pc-mingw32/include/CGAL/Nef_3/polyhedron_3_to_nef_3.h Line: 253 In order to clean the STL file, you have the following options: use http://wiki.netfabb.com/Semi-Automatic_Repair_Options to repair the holes but not the self-intersections.\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"55fd0f3a-a988-4426-8798-9fcd723cf390":{"__data__":"{\"id_\":\"55fd0f3a-a988-4426-8798-9fcd723cf390\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"4c70bfe7-2993-46e2-85e3-9acad70a4a15\",\"metadata\":{},\"hash\":\"Y5L5i+AV5N3RYE5+5xKCtnSuwptk4Z1H511i29JEwjg=\"},\"NEXT\":{\"nodeId\":\"d12d29ce-a4c6-41e6-ad48-17e0d491bb3a\",\"metadata\":{},\"hash\":\"uARK9CmA5OGYS3yMfuQxLEA5NWBMSqADBmV7gR7suxs=\"}},\"hash\":\"BqKiAfoI91gtoztqPh4a25WL8MnnHe4hWzPW2U4RjfI=\",\"text\":\"use netfabb basic. This free software doesn't have the option to close holes nor can it fix the self-intersections. use MeshLab, This free software can fix all the issues. Using MeshLab, you can do: Render - Show non Manif Edges Render - Show non Manif Vertices if found, use Filters - Selection - Select non Manifold Edges or Select non Manifold Vertices - Apply - Close. Then click button 'Delete the current set of selected vertices...' or check http://www.youtube.com/watch?v=oDx0Tgy0UHo for an instruction video. The screen should show \\\"0 non manifold edges\\\", \\\"0 non manifold vertices\\\" Next, you can click the icon 'Fill Hole', select all the holes and click Fill and then Accept. You might have to redo this action a few times. Use File - Export Mesh to save the STL. If Meshlab can't fill the last hole then Blender might help: 1. Start Blender 2. `X, 1` to remove the default object 3. File, Import, Stl 4. `Tab` to edit the mesh 5. `A` to de-select all vertices 6. `Alt+Ctrl+Shift+M` to select all non-manifold vertices 7. `MMB` to rotate, `Shift+MMB` to pan, `wheel` to zoom 8. `C` for \\\"circle\\\" select, `Esc` to finish 9. `Alt+M, 1` to merge or `Space` and search for \\\"merge\\\" as alternative 10. Merging vertices is a useful way of filling holes where the vertices are so closely packed that the slight change in geometry is unimportant compared to the precision of a typical 3D printer import_dxf [Deprecated: import_dxf() will be removed in future releases. Use import() instead.] Read a DXF file and create a 3D shape. linear_extrude(height = 5, center = true, convexity = 10) import_dxf(file = \\\"example009.dxf\\\", layer = \\\"plate\\\"); import_stl [Deprecated: import_stl() will be removed in future releases. Use import() instead.]\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"d12d29ce-a4c6-41e6-ad48-17e0d491bb3a":{"__data__":"{\"id_\":\"d12d29ce-a4c6-41e6-ad48-17e0d491bb3a\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"55fd0f3a-a988-4426-8798-9fcd723cf390\",\"metadata\":{},\"hash\":\"BqKiAfoI91gtoztqPh4a25WL8MnnHe4hWzPW2U4RjfI=\"},\"NEXT\":{\"nodeId\":\"a5ca4c72-d049-48e0-b0c7-8fdf0923137e\",\"metadata\":{},\"hash\":\"oWOf4OxjBcr8FyEpNjxn3EYvWXnti4zC562IfoaPcI0=\"}},\"hash\":\"uARK9CmA5OGYS3yMfuQxLEA5NWBMSqADBmV7gR7suxs=\",\"text\":\"[Deprecated: import_stl() will be removed in future releases. Use import() instead.] Imports an STL file for use in the current OpenSCAD model import_stl(\\\"body.stl\\\", convexity = 5); surface surface() reads Heightmap information from text or image files. It can read PNG files. Parameters file String. The path to the file containing the heightmap data. center Boolean. This determines the positioning of the generated object. If true, object is centered in X- and Y-axis. Otherwise, the object is placed in the positive quadrant. Defaults to false. invert Boolean. Inverts how the color values of imported images are translated into height values. This has no effect when importing text data files. Defaults to false. [Note: Requires version 2015.03] convexity Integer. The convexity parameter specifies the maximum number of front sides (back sides) a ray intersecting the object might penetrate. This parameter is needed only for correct display of the object in OpenCSG preview mode and has no effect on the final rendering. Text file format The format for text based heightmaps is a matrix of numbers that represent the height for a specific point. Rows are mapped to the Y-axis, columns to the X axis. The numbers must be separated by spaces or tabs. Empty lines and lines starting with a # character are ignored. Images [Note: Requires version 2015.03] Currently only PNG images are supported. Alpha channel information of the image is ignored and the height for the pixel is determined by converting the color value to Grayscale using the linear luminance for the sRGB color space (Y = 0.2126R + 0.7152G + 0.0722B). The gray scale values are scaled to be in the range 0 to 100. Examples Example 1: //surface.scad surface(file = \\\"surface.dat\\\", center = true, convexity = 5); %translate([0,0,5])cube([10,10,10], center =true); #surface.dat 10 9 8 7 6 5 5 5 5 5 9 8 7 6 6 4 3 2 1 0\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"},"a5ca4c72-d049-48e0-b0c7-8fdf0923137e":{"__data__":"{\"id_\":\"a5ca4c72-d049-48e0-b0c7-8fdf0923137e\",\"metadata\":{},\"excludedEmbedMetadataKeys\":[],\"excludedLlmMetadataKeys\":[],\"relationships\":{\"SOURCE\":{\"nodeId\":\"./data/The_OpenSCAD_Language.pdf\",\"metadata\":{},\"hash\":\"ZD+n+ZL2THU8ck17zM0QZr8LV7dEea4Rb7hmjpwsjmg=\"},\"PREVIOUS\":{\"nodeId\":\"d12d29ce-a4c6-41e6-ad48-17e0d491bb3a\",\"metadata\":{},\"hash\":\"uARK9CmA5OGYS3yMfuQxLEA5NWBMSqADBmV7gR7suxs=\"}},\"hash\":\"oWOf4OxjBcr8FyEpNjxn3EYvWXnti4zC562IfoaPcI0=\",\"text\":\"9 8 7 6 6 4 3 2 1 0 8 7 6 6 4 3 2 1 0 0 7 6 6 4 3 2 1 0 0 0 6 6 4 3 2 1 1 0 0 0 6 6 3 2 1 1 1 0 0 0 6 6 2 1 1 1 1 0 0 0 6 6 1 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 Result: Example 2 // example010.dat generated using octave: // d = (sin(1:0.2:10)' * cos(1:0.2:10)) * 10; // save(\\\"example010.dat\\\", \\\"d\\\"); intersection() { surface(file = \\\"example010.dat\\\", center = true, convexity = 5); rotate(45, [0, 0, 1]) surface(file = \\\"example010.dat\\\", center = true, convexity = 5); } Example 3: [Note: Requires version 2015.03] // Example 3a scale([1, 1, 0.1]) surface(file = \\\"smiley.png\\\", center = true); // Example 3b scale([1, 1, 0.1]) surface(file = \\\"smiley.png\\\", center = true, invert = true); Input image Example 3a: surface(invert = false) Example 3b: surface(invert = true) Example 3: Using surface() with a PNG image as heightmap input. From the WikiBooks article The OpenSCAD Language (provided under CC-BY-SA-3.0)\",\"metadataSeparator\":\"\\n\",\"type\":\"TEXT\"}","__type__":"TEXT"}},"docstore/ref_doc_info":{"./data/101.pdf":{"nodeIds":["59683466-2a6c-4c5a-8c45-cfe29bed951e","ba74d382-8a0a-45e1-8027-cb1fb1a0d160","989cde1e-0da5-492c-964e-e473f06365d7","29c5e192-6771-46d5-9214-61880df08477","2c9ae0e1-8ee9-4b80-a7bd-1a1365a64a60","6161da72-ad88-4daa-b432-e416d1a8e2a7","93fd9e59-0d5e-40df-b1de-1c5e27322589","55b3c169-54d5-4aaa-8599-35a4d0a45458"],"extraInfo":{}},"./data/_Resume Zach Dive.pdf":{"nodeIds":["9fd8cf77-375d-48f9-9d6c-59708d5425a4","0ddc4676-8f5c-4905-8ae4-f0412ec079b4"],"extraInfo":{}},"./data/OpenSCAD CheatSheet.pdf":{"nodeIds":["103d6c65-5677-4afb-ad46-05feca36e6a5","f85d52b3-8801-4c8d-a509-1f08238727ea"],"extraInfo":{}},"./data/OpenSCAD_User_Manual.pdf":{"nodeIds":["17c31771-bb9a-4c95-aed9-4419855fbe1e","38064d01-3554-4b18-ad06-a4b52d388685","6663bd34-6ae2-4146-b906-f73fadfc9887","5abd24ba-bfac-44bc-9caf-4f54d980d1e9","c0f5aac2-7ce8-4bc3-97fd-9c3ab866e4d2","1eca59ef-18ec-4640-a441-24f9c0411829","52ce2ac8-b143-4c20-bdbc-2bfec2ba18c6","8ea1a15e-49ff-4b39-b90c-3ea3a16e239a","f3903400-d470-47b2-afbf-3d0b146f0cba","9f3f6f11-cdda-482b-b087-420e0c94c026","55d662d5-faac-4eae-90e1-404982f0636b","d9940351-d285-4e99-ad0a-a950f42004e4","bc444b8a-c271-4e26-85ca-b6672447cf87","89d07e0a-5112-4485-b225-93874b8e3dcf","ba850f09-7b04-491e-bb4a-2b62173f40f8","9a95cfa2-2a96-4372-bb7d-adfa683e8178","d3341176-2cc5-464b-b842-26dc04dcba50","057806a7-d3f0-4f28-96e4-170c1e843d9e","668b71d6-30be-4f9e-9ba7-8446d36ab896","868ee473-c4c8-43b7-b78f-f05e0c7d18a9","a657f7b9-75d5-4a73-aca2-8666848dc248","8c1bb3e6-42c6-4204-a6d4-4b2c544940ef","559a2d33-0593-4621-bab8-9be5c7b4430b","5685a9d7-bff4-4f14-b6b1-3a189685504d","2d2bbf15-621b-4ced-b7db-affec964805e","7391a281-eb31-4fc7-ad19-8e26035f5c21","ffed19da-edca-4848-8ed5-c9709e97d141","d0623ae5-7f04-4d35-8e28-0ca7becf1a19","b96da8f0-0cc1-4acd-86fe-2fa1964a9c2a","84c31354-45a3-4ab6-8a0a-0e028ae547c7","4eaee97a-e302-4f0c-9224-07c7949fe129","2b2ec95b-6b3d-4d1d-9fea-badbdcdecaa5","58c21190-526b-4428-97d4-c6271cf97a96","a071a378-591e-4136-9ded-42aed969c4ef","9db81337-f230-45ea-b603-145a55b0d137","003f9202-4a78-4ca0-b666-5c5bd725d507","047bf994-93f8-40f5-ab01-88ca1b469764","901920e2-7363-471e-bf2d-95aa93270e75","adbd612f-3f9c-43c9-8dd0-a1293694463b","8424c1cd-cdb8-4b71-863e-4cb31241897c","0ddc8ccb-c883-4aa2-8050-fff221a3a5ea","b87db35d-b938-4432-a5ac-71a0b46627c7","4f857178-85e7-403a-97d7-a73b93d3e156","453f6722-6f6a-41ba-9e02-f8a6313b2562","1bbbc8de-9f65-469b-894c-3606e2474cf2","dcea0ced-5760-47ad-9e2a-548689dbfef9","ec481e4f-3d93-4d23-aa91-1178bdabf825","3b11dcd4-8ecb-4f1d-a4ec-66a00bcda284","9eee2fa8-e601-4645-ac1a-97cba8f4d479","4f81d409-cd04-47a5-93fe-2e955c43a9b1","1a0c91c7-4ad0-49cf-9a7f-c93aa3598959","4d49d26a-03c0-430d-b56b-824e1ee302f0","5a41cd06-ea52-4689-957d-8fc61b886f8b","4de34dfd-4e02-475b-855d-b29b205b153a","c7bd2269-5585-4a24-b7a9-3d3afcfa5e41","1880b1e5-a468-481b-b94d-40568f53e273","826f583d-b27c-446a-84d5-9cda36f0994b","93bb886a-96b8-43ae-bd40-8a20fb52ba41","834e2a70-6460-4e29-86f7-d3cf32652c49","5f23515b-bfe4-4519-8ce5-401ad26335bd","7491d9d6-81c1-49df-9d61-84e244bb956c","ad35d9ea-9ec3-4f23-832c-28eef7b5e701","40f6d154-be08-4eaf-819c-addc6c9ada6a","6f140ea4-7b65-44c9-a992-e36505aa6292","4f28aec4-e6cc-42ed-86a0-a94ebc372899","7956c7b6-cd7e-4780-82d1-b9c0bbb1b26e","11ddb4d3-2a31-4f18-9390-82fb117347ed","bb893d8c-39f3-45d8-b8cb-2da9bba66677","d932c917-a58e-427a-a77c-f0f1de6de167","db0c0d8b-b389-47e4-8c66-688b3ec3fd6d","f379d5de-a624-43a8-9f83-4813fd258eaf","e36dc175-8a80-4042-9f17-77b93760e281","4a7dcfbd-e215-478f-9db8-3cfcdd35eeb6","886f6c37-5cf1-41f1-a16c-9212f2090f0d","377ce9cc-f450-4da2-8ccc-428096fcfbfd","fbd9ecab-9363-4997-acfb-69cda1f50ab8","b47c1688-4c24-4d7c-8b17-d19f98eb7de2","13304efc-dda5-4f34-a9cf-a081c242009d","c87cb60f-31a7-437d-aeac-35f4305ccf12","f59ae72d-1b51-4d84-b2ef-eb894251c4fe","443915fb-8013-4a3a-acc9-1f515b501952","28e5dbb4-2667-4b95-aafc-4f760e1b41b5","90f0f5f8-d0b4-4dea-94d6-80993392c477","c21da9c3-d07a-4cba-9b15-793c032736dd","2ce9da6b-f306-4736-b2d9-d86dae6f2fcf"],"extraInfo":{}},"./data/The_OpenSCAD_Language.pdf":{"nodeIds":["a3e68d1d-73bc-4fca-8354-ab591c6ddba4","50d3255b-feee-40bd-9690-5a1f9f2be81a","659f5eb3-6700-4215-a23f-cbd70b976c68","f3495615-de7d-422b-8fb0-74624a646604","193b28c2-c988-422a-9049-8ddf2861bf0f","a7a678ad-3af0-4940-a8f3-ccdb65238857","cb976b16-db1b-4f80-96e8-1b40d0522601","e91e51a5-d6df-432a-af55-d56f6dcd5e0a","7005455c-a881-43d8-b371-91beab05d692","c9d54c4d-8e9e-446a-88e5-65c88c8f1c4b","6118d7b9-2667-467f-8c43-7740024d1af2","2c6c7234-4ebe-4521-bba3-0b7a3ac9456c","7aa5c3ee-7602-478f-b672-8d60145191ec","8340468e-231d-4a6c-b971-9864c464343e","4c3a92e6-c470-476e-9e1f-41990067f0fa","fa7a258b-3fb2-4a50-ab34-f516f1b30487","7ca2e74f-3950-4b07-aecb-a81d70794c8e","7a3d3a05-99e8-462c-a189-8889be324817","ee5b54c9-1804-4baa-8fe6-99cea7cfc821","389b6b69-1134-4a88-bf42-4659f56df784","4025f175-02e8-4b6b-84a0-70e44e650eac","cdec7d4d-fc47-40c1-a847-71fad1b2350f","0b6f79b2-3517-4214-850d-da0e2f5f68ff","23a5b34d-ca0f-4e49-bc61-a3aa295a2be2","43564100-b022-4aff-84f1-d5dee391544e","7906a468-eb11-495d-9559-dbcc503a1003","d17b6989-bc06-4246-8a03-649dfae82608","00302a0a-d90f-4dc3-ad83-d4918852a042","315883cb-167b-4104-82bf-fb177462a9e2","df9d2c1e-8266-4ab3-9445-d6f753ff9e83","95ca73f2-fbb7-4bee-a0a9-fd68dd528b71","f795328b-3c9a-4521-8495-3bde42381ea8","e2e789c3-f600-4c47-a433-6de9c639df5d","07954e2a-8064-4622-bcfe-ab1a5fed4fd9","e27904a4-7206-4073-905b-b237f4fa88e6","17b91545-8391-4d40-b65b-5e53d1c9a6f7","a8d7eb56-0948-41ac-9da4-e586395555e9","fc4bfaab-1099-457c-8806-55657e59c5c1","6ffa686c-1df3-41a0-9281-d6742a9c33d9","d2851b3b-54c9-42e3-9438-9a9853d05113","f67401fa-2ca1-4d13-b0a4-4b37e75d9de7","665b4f78-8032-46c1-9c00-88217e6b91d8","48043eb6-c97b-44f6-b399-55e3ed47eaa1","27108161-672f-4bed-8838-617a0c714f5b","0042a987-9d97-4661-aadc-f078f9b5e13a","e9eefcc8-08fa-4c6e-960e-2dc6bfb9fb1f","228352a2-1099-4278-aad5-c6dfdfea4283","771fd4aa-f943-449a-8da7-84ed84ab5682","91e35cb7-7b3b-4d2b-bfb2-a1000397c0db","74daf637-d00d-4c33-a5f1-67d8e883dfff","3a9bd32b-a228-4e28-b02c-758510262c13","c325ff09-9f01-439b-b6ab-36061a5abf6e","014095b2-6a6e-40f3-9cdd-4b2ca2faaf36","cf6b0052-4983-4fb3-80a1-5def28d2a66e","7ee34a0f-da80-4a8e-b7ed-7d622d54a8d2","4b7bd1db-9fb9-4c44-9672-1d79321c4524","f7f3507d-4eb6-44e0-901a-2ee46c90516b","e49c1e0c-c0e2-4c3d-989a-90ee384ad962","b1d05a2a-e0fb-4721-ba84-89ad4a6531ea","3714a845-3da3-43a5-bc98-cab5079dd681","6daa334d-91c2-4561-8278-64fa8b9cbe5d","1d775cb0-d859-4649-9968-a4a791b378f8","6dbf8253-a603-435e-b62a-a7181c5cca76","d70376dd-7697-4515-9fc2-fef3c636562f","91c293ae-1718-4295-b167-f0563b48e98b","db841ea4-c7c6-458c-a337-8b418fdb3787","4d2fe101-9efe-49e4-9353-f1046d96af06","4164d166-97d2-4575-8944-6e8eb6cbfb58","33066aad-2b20-44d1-ac61-7e5490b0438b","e5141ef4-5676-4fe5-a069-4cdda5272cc1","c037dfa6-e17c-42c0-b7df-53eb7d4430e5","6fa7c19c-025f-4a41-bd7c-2f4d506b3df4","bd92ce54-85c4-451a-be78-3a4a0a1ec64a","1fb06054-4a07-4803-ac36-77399fed9e63","2c79d51d-87d8-40d2-b4d9-438de2b747ce","80f53e68-230e-4784-bace-ce90e9a650b6","bab93170-0ba8-448c-ba5b-558b18d4674b","f0875a7d-83ec-4983-9fc7-6e471422025a","66dee7bf-bf7b-4812-b1aa-f9421e6ec189","fa06c28c-dbf9-4db6-afe3-997142c8b485","b136db52-618b-46fc-88d1-3c37fa0012ab","030b9748-8b22-46fd-99c2-dd510b654b37","b2c0dcf2-0c35-473a-bda8-3572ca6e2c41","d30c3108-7ec7-4941-9712-0160a008ab0f","141dab11-261c-4048-a5a4-cf702c18d143","ec1304bc-9ea7-4660-9b43-92c15e349d73","b20c490e-300a-4a8e-b3e1-66500c219349","602a72df-b432-463e-8c54-4ad412a60980","29847c89-5f02-4072-a3a2-6e3e4fe67b52","3d15798a-c543-44a3-943d-ac77520e94c3","1aeb1b32-ef27-4486-921d-9257a0b7bb9b","281c1368-e034-4387-b503-cc1f8272d9fa","d3fccd4b-6f56-49f0-b87c-d04920bfc069","730f5ed3-e9e2-4600-b2ac-41943876494b","39aacd13-b81c-48f1-afc1-7a224ed171d8","862228a2-3692-494a-a2fd-72e71e8f5455","56aacd46-4174-4ab4-aeb3-5fb891c174ed","3729abe4-49fd-4dca-a497-b0109118fd23","2fe42f7b-6af2-49ae-9506-74aa15996bdc","1195edd1-6f4c-4cf9-bf92-03b84af32b09","9aaf39bf-24d0-4cff-885f-a5847c61e77f","ca621dad-b5d5-439d-8de4-1d027acd16c9","08bf8f76-de8f-427b-b88d-dc23f1f9c205","3b675a71-79b0-425f-a44e-347bba4c3938","1365eb78-f5e3-45f9-9b10-490f03d2beca","1ece8add-49e5-4669-a042-ea44754423ec","5c1033aa-63cf-4141-b855-22e6531dd487","4c70bfe7-2993-46e2-85e3-9acad70a4a15","3322090d-24b2-4573-b04d-946c5e49d769","2b04843d-d46f-4ab8-a475-575f148cde90","d12d29ce-a4c6-41e6-ad48-17e0d491bb3a","55fd0f3a-a988-4426-8798-9fcd723cf390","a5ca4c72-d049-48e0-b0c7-8fdf0923137e"],"extraInfo":{}}}}